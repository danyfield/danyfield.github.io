<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql笔记</title>
      <link href="/2023/02/07/mysql%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/07/mysql%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="mysql启动停止命令"><a href="#mysql启动停止命令" class="headerlink" title="mysql启动停止命令"></a>mysql启动停止命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动：net start [mysql服务名]</span><br><span class="line">停止：net stop [mysql服务名]</span><br></pre></td></tr></table></figure><h4 id="mysql连接"><a href="#mysql连接" class="headerlink" title="mysql连接"></a>mysql连接</h4><p><code>mysql [-h 127.0.0.1] [-p 3306] -u root -p</code></p><h3 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h3><ul><li>可以单行或多行书写，以分号结尾</li><li>可以使用若干空格/缩进增强语句的可读性</li><li>mysql数据库的SQL语句不区分大小写，关键字建议使用大写</li><li>单行注释：<code>-- 注释内容</code>或<code># 注释内容</code></li><li>多行注释：<code>/* 注释内容 */</code></li></ul><h3 id="MySQL语言"><a href="#MySQL语言" class="headerlink" title="MySQL语言"></a>MySQL语言</h3><h4 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h4><ul><li>DDL（Data Definition Language）：数据定义语言，用于定义数据库对象（数据库、表、字段）</li><li>DML（Data Manipulation Language）：数据操作语言，用于对数据库中的数据进行增删改</li><li>DQL（Data Query Language）：数据查询语言，用于查询数据库表的记录</li><li>DCL（Data Control Language）：数据控制语言，用于创建数据库用户、控制数据库的访问权限</li></ul><h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><h5 id="DDL数据库操作"><a href="#DDL数据库操作" class="headerlink" title="DDL数据库操作"></a>DDL数据库操作</h5><h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><ul><li>查询所有数据库：<code>show database;</code></li><li>查询当前数据库：<code>select database();</code></li></ul><h6 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h6><p><code>create database [if not exists] 数据库名 [default charset 字符集] [collate 排序规则];</code></p><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><p><code>drop database [if exists] 数据库名;</code></p><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><p><code>use 数据库名</code></p><h5 id="DDL表操作"><a href="#DDL表操作" class="headerlink" title="DDL表操作"></a>DDL表操作</h5><p>MySQL数据类型主要分为3类：数值类型、字符串类型、日期时间类型：</p><table><thead><tr><th>数值类型</th><th>大小</th><th>有符号范围</th><th>无符号范围</th></tr></thead><tbody><tr><td>tinyint</td><td>1byte</td><td>(-128,127)</td><td>(0,255)</td></tr><tr><td>smallint</td><td>2byte</td><td>(-32768,32767)</td><td>(0,65535)</td></tr><tr><td>int或integer</td><td>4byte</td><td>(±2147483648)</td><td>(0,4294967295)</td></tr><tr><td>bigint</td><td>8byte</td><td>(-2^63,2^63-1)</td><td>(0,2^64-1)</td></tr><tr><td>float</td><td>4byte</td><td></td><td></td></tr><tr><td>double</td><td>8byte</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>字符串类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>char</td><td>0-255</td><td>定长字符串（性能高）</td></tr><tr><td>varchar</td><td>0-65535</td><td>变长字符串（性能较差）</td></tr><tr><td>tinyblob</td><td>0-255</td><td>不超过255个字节的二进制数据</td></tr><tr><td>tinytext</td><td>0-255</td><td>短文本字符串</td></tr><tr><td>blob</td><td>0-65535</td><td>二进制长文本数据</td></tr><tr><td>text</td><td>0-65535</td><td>长文本数据</td></tr><tr><td>longblob</td><td>0-429467295</td><td>二进制极大文本数据</td></tr><tr><td>longtext</td><td>0-429467295</td><td>极大长文本数据</td></tr></tbody></table><table><thead><tr><th>日期时间类型</th><th>大小</th><th>范围</th><th>格式</th></tr></thead><tbody><tr><td>date</td><td>3</td><td>1000-01-01至9999-12-31</td><td>YYYY-MM-DD</td></tr><tr><td>time</td><td>3</td><td>-838:59:59至838:59:59</td><td>HH:MM:SS</td></tr><tr><td>year</td><td>1</td><td>1901至2155</td><td>YYYY</td></tr><tr><td>datetime</td><td>8</td><td>1000-01-01 00:00:00至9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td></tr></tbody></table><h6 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h6><ul><li>查询当前数据库所有表：<code>show tables;</code></li><li>查询表结构：<code>desc 表名;</code></li><li>查询指定表的建表语句：<code>show create table 表名;</code></li></ul><h6 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">        字段1 字段1的类型 [comment &#x27;字段1注释&#x27;]，</span><br><span class="line">        字段2 字段2的类型 [comment &#x27;字段2注释&#x27;]，</span><br><span class="line">        字段3 字段3的类型 [comment &#x27;字段3注释&#x27;]，</span><br><span class="line">        ......</span><br><span class="line">        字段n 字段n的类型 [comment &#x27;字段n注释&#x27;]</span><br><span class="line">)[comment &#x27;表注释&#x27;];</span><br></pre></td></tr></table></figure><h6 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h6><ul><li>添加字段：<code>alter table 表名 add 字段名 类型(长度) [comment 注释] [约束];</code></li><li>修改数据类型：<code>alter table 表名 modify 字段名 新数据类型(长度);</code></li><li>修改字段名和字段类型：<code>alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];</code></li><li>删除字段：<code>alter table 表名 drop 字段名;</code></li><li>修改表名：<code>alter table 表名 rename to 新表名;</code></li></ul><h6 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h6><ul><li>删除表：<code>drop table [if exists] 表名;</code></li><li>删除指定表，并重新创建该表：<code>truncate table 表名;</code></li></ul><h4 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h4><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><ul><li>添加指定字段：<code>insert into 表名 (字段名1, ...) values (值1, ...);</code></li><li>添加全部字段：<code>insert into values (值1,...);</code></li><li>批量添加数据：<code>insert into 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></li></ul><p><strong>注：</strong>字符串和日期类型数据应包含在引号中；插入数据大小应在字段的规定范围内</p><h5 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h5><ul><li>修改数据：<code>update 表名 set 字段名1 = 值1, 字段名2 = 值2, ... [where 条件];</code></li><li>删除数据：<code>delete from 表名 [where 条件];</code></li></ul><h4 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名字段</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><ul><li><p>去除重复记录：<code>select distinct 字段列表 from 表名;</code></p></li><li><p>转义：<code>select * from 表名 where name like &#39;/_张三&#39; escape &#39;/&#39;;</code>/之后的_不作为通配符</p></li><li><p>条件查询条件列表：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 &#124;&#124;</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table></li><li><p>聚合查询常见聚合函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table></li><li><p>分组查询：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">where和having的区别：</span><br><span class="line">执行时机不同：where是分组前过滤，不满足条件的不参与分组；having是分组后对结果进行过滤</span><br><span class="line">判断条件不同：where不能对聚合函数进行判断，而having可以</span><br><span class="line"></span><br><span class="line">执行顺序：where &gt; 聚合函数 &gt; having</span><br><span class="line">分组之后查询字段一般为聚合函数和分组函数，查询其它字段无任何意义</span><br></pre></td></tr></table></figure></li><li><p>排序查询：<code>select 字段列表 from 表名 order by 字段1 排序方式1, 字段2 排序方式2;</code></p><p>ASC：升序、DESC：降序</p><p>若为多字段排序，只有当第一个字段值相同时才会根据第二个字段进行排序</p></li><li><p>分页查询：<code>select 字段列表 from 表名 limit 起始索引, 查询记录数;</code></p><p>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数；</p><p>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT；</p><p>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10；</p></li><li><p>DQL执行顺序：FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p></li></ul><h4 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h4><h5 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h5><p><code>select * from user;</code></p><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><p><code>create user &#39;用户名&#39;@&#39;主机名&#39; identified by &#39;密码&#39;;</code></p><h5 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h5><p><code>alter user &#39;用户名&#39;@&#39;主机名&#39; identified with mysql_native_password by &#39;新密码&#39;;</code></p><h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><p><code>drop user &#39;用户名&#39;@&#39;主机名&#39;;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建用户test，只能在当前主机localhost访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 创建用户test，能在任意主机访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">create user &#x27;test&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 修改密码</span><br><span class="line">alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user &#x27;test&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><p>常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><ul><li>查询权限：<code>show grants for &#39;用户名&#39;@&#39;主机名&#39;;</code></li><li>授予权限：<code>grant 权限列表 on 数据库名.表名 to &#39;用户名&#39;@&#39;主机名&#39;;</code></li><li>撤销权限：<code>revoke 权限列表 on 数据库名.表名 from &#39;用户名&#39;@&#39;主机名&#39;;</code></li></ul><p><strong>注意事项</strong></p><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用*进行通配，代表所有</li></ul><h3 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h3><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr><tr><td>REPLACE(column, source, replace)</td><td>替换字符串</td></tr></tbody></table><h4 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h4><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x,y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date,INTERVAL expr type)</td><td>返回一个日期/时间加上时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><h4 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h4><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value,t,f)</td><td>若value为true则返回t，否则返回f</td></tr><tr><td>IFNULL(value1,value2)</td><td>若value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [val1] THEN [res1] … ELSE [default] END</td><td>若val1为true，返回res1，…否则返回default默认值</td></tr><tr><td>CASE [expr] WHEN [val1] THEN [res1] … ELSE [default] END</td><td>若expr值为val1，返回res1，…否则返回default默认值</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">name,(case when age &gt; 30 then &#x27;中年&#x27; else &#x27;青年&#x27; end)</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证字段所有数据都是唯一的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td></td><td></td><td>AUTO_INCREMENT</td></tr><tr><td>默认约束</td><td>保存数据时，若未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user (</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">    name varchar(10) not null unique,</span><br><span class="line">    age int check(age &gt; 0 and age &lt; 120),</span><br><span class="line">    status char(1) default &#x27;1&#x27;,</span><br><span class="line">    gender char(1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加外键</span><br><span class="line">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br><span class="line"></span><br><span class="line"># 删除外键</span><br><span class="line">alter table 表名 drop foreign key 外键名</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h4><h5 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">案例：部门与员工</span><br><span class="line">关系：一个部门对应多个员工，一个员工对应一个部门</span><br><span class="line">实现：在多的一方建立外键，指向一的一方的主键</span><br></pre></td></tr></table></figure><h5 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">案例：学生与课程</span><br><span class="line">关系：一个学生可以选多门课程，一门课程可以供多个学生选修</span><br><span class="line">实现：建立中间表，中间表至少包含两个外键，分别关联两方主键</span><br></pre></td></tr></table></figure><h5 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">案例：用户与用户详情</span><br><span class="line">关系：一对一关系，多用于单表拆分，基础字段和详情字段分别放在两张表，以提升操作效率</span><br><span class="line">实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</span><br></pre></td></tr></table></figure><h4 id="查询-2"><a href="#查询-2" class="headerlink" title="查询"></a>查询</h4><h5 id="合并查询（笛卡尔积，展示所有组合结果）"><a href="#合并查询（笛卡尔积，展示所有组合结果）" class="headerlink" title="合并查询（笛卡尔积，展示所有组合结果）"></a>合并查询（笛卡尔积，展示所有组合结果）</h5><blockquote><p>笛卡尔积：两集合所有组合情况（在多表查询时需要消除无效的笛卡尔积）</p></blockquote><p><code>select * from employee,dept;</code></p><ul><li>消除无效笛卡尔积：<code>select * from employee,dept where employee.dept = dept.id;</code></li></ul><h5 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h5><p>内连接查询的是两张表交集的部分；显示内连接比隐式性能更高</p><ul><li>隐式内连接：<code>select 字段列表 from 表1,表2 where 条件 ...;</code></li><li>显示内连接：<code>select 字段列表 from 表1 [ inner ] join 表2 on 连接条件 ...;</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工姓名及关联部门的名称</span><br><span class="line">-- 隐式</span><br><span class="line">select e.name,d.name from employee as e,dept as d where e.dept = d.id;</span><br><span class="line">-- 显示</span><br><span class="line">select e.name,d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h5 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h5><ul><li><p>左外连接：查询左表所有数据和两张表交集数据</p><p><code>select 字段列表 from 表1 left [ outer ] join 表2 on 条件 ...; </code></p></li><li><p>右外连接：查询右表所有数据和两张表交集数据</p><p><code>select 字段列表 from 表1 right [ outer ] join 表2 on 条件 ...;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 左</span><br><span class="line">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class="line">-- 右</span><br><span class="line">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br><span class="line"></span><br><span class="line"># 左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</span><br></pre></td></tr></table></figure><h5 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h5><p>当前表与自身的连接查询，自连接必须使用表别名；自连接查询可以是内连接查询也可以是外连接查询</p><p><code>select 字段列表 from 表A 别名A join 表A 别名B on 条件 ...;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工及所属领导的名字</span><br><span class="line">select a.name,b.name from employee a,employee b where a.manager = b.id;</span><br><span class="line">-- 没有领导的也查询出来</span><br><span class="line">select a.name,b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></table></figure><h5 id="联合查询union、union-all"><a href="#联合查询union、union-all" class="headerlink" title="联合查询union、union all"></a>联合查询union、union all</h5><p>将多次查询的结果合并，形成一个新的查询集</p><p><strong>注：</strong>union all会有重复结果，union不会；联合查询比使用or效率高，不会使索引失效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段列表 from 表A ...</span><br><span class="line">union [all]</span><br><span class="line">select 字段列表 from 表B ...</span><br></pre></td></tr></table></figure><h5 id="子查询（嵌套查询）"><a href="#子查询（嵌套查询）" class="headerlink" title="子查询（嵌套查询）"></a>子查询（嵌套查询）</h5><p>子查询的位置可在<code>where之后</code>、<code>from之后</code>、<code>select之后</code></p><h6 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h6><p>返回的结果是一列（可以是多行）</p><ul><li>常用操作符：in、not in、any、some（等同于any）、all</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询销售部和市场部所有员工信息</span><br><span class="line">select * from employee where dept in (select id from dept where name = &#x27;销售部&#x27; or name = &#x27;市场部&#x27;)</span><br><span class="line">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="line">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#x27;财务部&#x27;));</span><br><span class="line">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="line">select * from employee where salary &gt; any(select salary from employ where dept = (select id from dept where name = &#x27;研发部&#x27;))；</span><br></pre></td></tr></table></figure><h6 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h6><p>返回的结果是一行（可以是多列）</p><ul><li>常用操作符：=、&lt;、&gt;、in、not in</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class="line">select * from employee where (salary,manager) = (12500,1);</span><br><span class="line">select * from employee where (salary,manager) = (select salary,manager from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure><h6 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h6><p>返回的结果是多行多列</p><ul><li>常用操作符：in</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询与xxx1、xxx2的职位和薪资相同的员工</span><br><span class="line">select * from employee where (job,salary) in (select job,salary from employee where name = &#x27;xxx1&#x27; or name = &#x27;xxx2&#x27;);</span><br><span class="line">-- 查询入职日期是2006-01-01之后的员工及部门信息</span><br><span class="line">select e.*, d.* from (select * from employee where entrydate &gt; &#x27;2006-01-01&#x27;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>一组操作的集合，事务将所有操作作为一个整体一起向系统提交或撤销操作请求；即这些操作要么同时成功，要么同时失败</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一、</span><br><span class="line">-- 查看事务提交方式</span><br><span class="line">select @@AUTOCOMMIT;</span><br><span class="line">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="line">set @@AUTOCOMMIT = 0;</span><br><span class="line">-- 提交事务</span><br><span class="line">commit;</span><br><span class="line">-- 回滚事务</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line">-- 事务实例（设置手动提交后）</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"># 二、</span><br><span class="line">-- 开启事务</span><br><span class="line">start transaction 或 begin transaction;</span><br><span class="line">-- 提交事务</span><br><span class="line">commit;</span><br><span class="line">-- 回滚事务</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line">start transaction;</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h4 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h4><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还未提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时发现数据已经存在</td></tr></tbody></table><h5 id="并发事务隔离级别"><a href="#并发事务隔离级别" class="headerlink" title="并发事务隔离级别"></a>并发事务隔离级别</h5><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><h6 id="查看事务隔离级别"><a href="#查看事务隔离级别" class="headerlink" title="查看事务隔离级别"></a>查看事务隔离级别</h6><p><code>select @@TRANSACTION_ISOLATION;</code></p><h6 id="设置事务隔离级别"><a href="#设置事务隔离级别" class="headerlink" title="设置事务隔离级别"></a>设置事务隔离级别</h6><p><code>set [ SESSION | GLOBAL ] TRANSACTION ISOLATION  LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code></p><p>SESSION是会话级别，表示只针对当前会话有效，GLOBAL表示对所有会话有效</p><h4 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h4><ul><li>原子性(Atomicity)：事务是不可分割的最小操作</li><li>一致性(Consistency)：事务完成时，必须使所有数据</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库数据的改变即永久的</li></ul><h3 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h3><h4 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h4><p>原子性：保证每一列不可再分</p><h4 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h4><p>在满足第一范式的前提下实现每张表只描述一件事</p><h4 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h4><p>满足第一和第二范式的前提下实现确保数据表中每一列数据都和主键直接相关</p><h4 id="反范式适用场景"><a href="#反范式适用场景" class="headerlink" title="反范式适用场景"></a>反范式适用场景</h4><p>反范式通过增加冗余字段实现空间换时间从而提高查询的效率，但这会使得：</p><ul><li>存储空间变大</li><li>一个表中字段做了修改，另一表中冗余字段也要同步修改，不然会导致数据不一致</li><li>若存储过程支持数据的更新、删除等操作。操作频繁会消耗系统资源</li><li>在数据量小的情况下反范式不能体现性能的优势</li></ul><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p><img src="https://s1.ax1x.com/2023/02/13/pSoKwJH.png"></p><p><img src="https://s1.ax1x.com/2023/02/13/pSoKUoD.png"></p><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎，默认存储引擎为InnoDB</p><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p>支持事务；行级锁，提高并发访问性能；支持外键</p><p>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引</p><ul><li>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</li></ul><p>查看mysql变量：<code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p>从idb文件提取表结构数据(在cmd运行)：<code>ibd2sdi xxx.ibd</code></p><p><img src="https://s1.ax1x.com/2023/02/13/pSoKdFe.png"></p><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><p>mysql早期默认存储引擎；不支持事务和外键、支持表锁，不支持行锁、访问速度快</p><p>xxx.sdi: 存储表结构信息；xxx.MYD: 存储数据；xxx.MYI: 存储索引</p><h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><p>表数据存在内存中，受硬件、断电问题的影响，只能将这些表作为临时表或缓存</p><p>存放在内存中，速度快；hash索引；xxx.sdi: 存储表结构信息</p><h4 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h4><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h4 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h4><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎；对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合</p><ul><li>InnoDB：若应用对事物的完整性有较高要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多更新、删除操作</li><li>MyISAm：若应用以读和插入操作为主，只有很少的更新和删除操作，且对事物完整性、并发性要求不高</li><li>Memory：将所有数据保存在内存中，访问速度快，常用于临时表及缓存，对表的大小有限制，无法保障数据的安全性</li></ul><p>电商中足迹和评论适合使用MyISAm，缓存适合用Memory</p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><h4 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h4><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：</p><ul><li>查看全局数据：<code>show global status like &#39;Com_______&#39;;</code></li><li>查看当前会话：<code>show session status like &#39;Com_______&#39;;</code></li></ul><h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><p>记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：</span><br><span class="line"># 开启慢查询日志开关</span><br><span class="line">slow_query_log=1</span><br><span class="line"># 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span><br><span class="line">long_query_time=2</span><br><span class="line">更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log</span><br></pre></td></tr></table></figure><ul><li>查看慢查询日志开关状态：<code>show variables like &#39;slow_query_log&#39;;</code></li></ul><h4 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h4><p>在做SQL优化时了解时间耗费在哪，通过<code>have_profiling</code>参数可以看到当前mysql是否支持profile操作：</p><p><code>select @@have_profiling;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- profilling默认关闭，可以通过set语句在session/global级别开启profilling</span><br><span class="line">set profiling = 1;</span><br><span class="line">-- 查看所有语句的耗时</span><br><span class="line">show profiles;</span><br><span class="line">-- 查看指定query_id的SQL语句各个阶段的耗时</span><br><span class="line">show profile for query query_id;</span><br><span class="line">-- 查看指定query_id的SQL语句CPU的使用情况</span><br><span class="line">show profile cpu for query query_id;</span><br></pre></td></tr></table></figure><h4 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h4><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序</p><ul><li>获取表是否顺序读取</li><li>获取数据读取操作的操作类型</li><li>获取哪些索引可以使用</li><li>获取哪些索引实际被使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ul><p><code>explain select 字段列表 from 表名 where 条件 </code> </p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，表示查询中执行select子句或操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</td></tr><tr><td>select_type</td><td>表示select的类型，常见取值有：SIMPLE(简单表，即不适用表连接或子查询)、PRIMARY(主查询，即外层查询)、UNION(UNION中的第二个或后面的查询语句)、SUBQUERY(SELECT/WHERE之后包含了子查询)等</td></tr><tr><td>type</td><td>连接类型，性能由好到差的连接类型为：NULL、system、const、eq_ref、ref、range、index、all</td></tr><tr><td>possible_key</td><td>可能应用在这张表上的索引，一个或多个</td></tr><tr><td>key</td><td>实际使用的索引，若为NULL，则没有索引</td></tr><tr><td>key_len</td><td>索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</td></tr><tr><td>rows</td><td>mysql认为必须要执行的行数，在InnoDB的表中该值可能不准确</td></tr><tr><td>filtered</td><td>表示返回结果的行数占需读取行数的百分比，值越大越好</td></tr></tbody></table><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用数据，这样就可以在这些数据结构上实现高级查询算法</p><p><strong>优点：</strong></p><ul><li>提高数据检索效率，降低数据库io成本，类似于书的目录</li><li>通过索引列对数据排序，降低数据排序成本和CPU的消耗</li></ul><p><strong>缺点：</strong></p><ul><li>索引列也要占用空间</li><li>索引大大提高了查询效率，但降低了更新的速度，如INSERT、UPDATE、DELETE</li></ul><h4 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h4><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h5 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h5><p><img src="https://s1.ax1x.com/2023/02/13/pSoMZpd.md.png"></p><p>二叉树的缺点可以用红黑树来解决：</p><p><img src="https://s1.ax1x.com/2023/02/13/pSoMEfH.md.png"></p><p>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p><p><img src="https://s1.ax1x.com/2023/02/13/pSoK5Ss.png"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h5 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h5><p><img src="https://s1.ax1x.com/2023/02/13/pSoKIln.md.png"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能</p><p><img src="https://s1.ax1x.com/2023/02/13/pSoKoyq.md.png"></p><h5 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h5><p>哈希索引即采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中；如果两个（或多个）键值映射到一个相同的槽位上就产生了hash冲突（也称为hash碰撞），可以通过链表来解决</p><p><img src="https://s1.ax1x.com/2023/02/13/pSoKTO0.png"></p><ul><li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li><li>存储引擎支持：Memory、InnoDB（具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的）</li></ul><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><h5 id="MyIsam索引"><a href="#MyIsam索引" class="headerlink" title="MyIsam索引"></a>MyIsam索引</h5><h6 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h6><p>表user的索引存储在索引文件<code>user.MYI</code>中，数据文件存储在数据文件 <code>user.MYD</code>中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id = 28;</span><br><span class="line"></span><br><span class="line"># 先在主键树中从根节点开始检索，将根节点加载到内存，比较28&lt;75，走左路（1次磁盘IO）</span><br><span class="line"># 将左子树节点加载到内存中，比较16&lt;28&lt;47，向下检索（1次磁盘IO）</span><br><span class="line"># 检索到叶节点，将节点加载到内存中遍历，比较16&lt;28，18&lt;28，28=28。查找到值等于30的索引项（1次磁盘IO）</span><br><span class="line"># 从索引项中获取磁盘地址，然后到数据文件user.MYD中获取对应整行记录（1次磁盘IO）</span><br><span class="line"># 将记录返回给客户端</span><br><span class="line"></span><br><span class="line"># 磁盘IO次数：3次索引检索+记录数据检索</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/13/pSopdPO.md.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id between 28 and 47;</span><br><span class="line"></span><br><span class="line"># 先在主键树中从根节点开始检索，将根节点加载到内存，比较28&lt;75，走左路（1次磁盘IO）</span><br><span class="line"># 将左子树节点加载到内存中，比较16&lt;28&lt;47，向下检索（1次磁盘IO）</span><br><span class="line"># 检索到叶节点，将节点加载到内存中遍历比较16&lt;28，18&lt;28，28=28&lt;47。查找到值等于28的索引项；根据磁盘地址从数据文件中获取行记录缓存到结果集中（1次磁盘IO）；查询语句时范围查找，需要向后遍历底层叶子链表，直至到达最后一个不满足筛选条件</span><br><span class="line"># 向后遍历底层叶子链表，将下一个节点加载到内存中，遍历比较，28&lt;47=47，根据磁盘地址从数据文件中获取行记录缓存到结果集中（1次磁盘IO）</span><br><span class="line"># 最后得到两条符合筛选条件，将查询结果集返给客户端</span><br><span class="line"></span><br><span class="line"># 磁盘IO次数：4次索引检索+记录数据检索</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/13/pSoP2Ix.png"></p><h6 id="辅助索引"><a href="#辅助索引" class="headerlink" title="辅助索引"></a>辅助索引</h6><p>在 MyISAM 中,辅助索引和主键索引的结构是一样的，没有任何区别，叶子节点的数据存储的都是行记录的磁盘地址。只是主键索引的键值是唯一的，而辅助索引的键值可以重复；查询数据时，由于辅助索引的键值不唯一，可能存在多个拥有相同的记录，所以即使是等值查询，也需要按照范围查询的方式在辅助索引树中检索数据</p><h5 id="InnoDB索引"><a href="#InnoDB索引" class="headerlink" title="InnoDB索引"></a>InnoDB索引</h5><h6 id="主键索引（聚簇索引）"><a href="#主键索引（聚簇索引）" class="headerlink" title="主键索引（聚簇索引）"></a>主键索引（聚簇索引）</h6><p>每个InnoDB表都有一个聚簇索引 ，聚簇索引使用B+树构建，叶子节点存储的数据是整行记录；当一个表没有创建主键索引时，InnoDB会自动创建一个ROWID字段来构建聚簇索引</p><blockquote><p>1、在表上定义主键PRIMARY KEY，InnoDB将主键索引用作聚簇索引</p><p>2、若表没有定义主键，InnoDB会选择第一个不为NULL的唯一索引列用作聚簇索引</p><p>3、若以上两个都没有，InnoDB 会用一个6 字节长整型的隐式字段 ROWID字段构建聚簇索引。该ROWID字段会在插入新行时自动递增</p></blockquote><p>除聚簇索引外的所有索引都称为辅助索引；辅助索引中的叶子节点存储的数据是该行的主键值，检索时，InnoDB使用此主键值在聚簇索引中搜索行记录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以user_innodb为例，user_innodb的id列为主键，age列为普通索引</span><br><span class="line">CREATE TABLE `user_innodb`</span><br><span class="line">(</span><br><span class="line">  `id`       int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(20) DEFAULT NULL,</span><br><span class="line">  `age`      int(11)     DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  KEY `idx_age` (`age`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/13/pSoFq8f.png"></p><p><img src="https://s1.ax1x.com/2023/02/13/pSoknaR.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 等值查询数据</span><br><span class="line">select * from user_innodb where id = 28;</span><br><span class="line"></span><br><span class="line"># 先在主键树中从根节点开始检索，将根节点加载到内存，比较28&lt;75，走左路（1次磁盘IO）</span><br><span class="line"># 将左子树节点加载到内存中，比较16&lt;28&lt;47，向下检索（1次磁盘IO）</span><br><span class="line"># 检索到叶节点，将节点加载到内存中遍历，比较16&lt;28，18&lt;28，28=28。查找到值等于28的索引项，直接可以获取整行数据。将改记录返回给客户端（1次磁盘IO）</span><br><span class="line"></span><br><span class="line"># 磁盘IO数量：3次</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/13/pSokuI1.png"></p><h6 id="辅助索引-1"><a href="#辅助索引-1" class="headerlink" title="辅助索引"></a>辅助索引</h6><p>除聚簇索引之外的所有索引都称为辅助索引，InnoDB的辅助索引只会存储主键值而非磁盘地址</p><p><img src="https://s1.ax1x.com/2023/02/13/pSokmZ9.png"></p><p>底层叶子节点的按照（age，id）的顺序排序，先按照age从小到大排序，age列相同时按照id列排序；使用辅助索引需要检索两遍索引：首先检索辅助索引获得主键，然后使用主键到主索引中检索记录（该过程称为回表查询）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from t_user_innodb where age=19;</span><br><span class="line"></span><br><span class="line"># 磁盘IO数：辅助索引3次+获取记录回表3次</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/13/pSokMPx.png"></p><h5 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h5><p><code>频繁使用的列、区分度高的列放在前面，频繁使用代表索引利用率高，区分度高代表筛选粒度大,更好地使用覆盖索引优化</code></p><p>表 abc_innodb，id为主键索引，创建了一个联合索引idx_abc(a,b,c)；（遵循最左匹配原则；先比较a，b在a等值时有序，c在ab等值时有序）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `abc_innodb`</span><br><span class="line">(</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `a`  int(11)     DEFAULT NULL,</span><br><span class="line">  `b`  int(11)     DEFAULT NULL,</span><br><span class="line">  `c`  varchar(10) DEFAULT NULL,</span><br><span class="line">  `d`  varchar(10) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  KEY `idx_abc` (`a`, `b`, `c`)</span><br><span class="line">) ENGINE = InnoDB;</span><br><span class="line"></span><br><span class="line">select * from abc_innodb order by a, b, c, id;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/13/pSoEZNR.png"></p><p><img src="https://s1.ax1x.com/2023/02/13/pSoEVE9.png"></p><h5 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h5><p>常用的优化手段，因为在使用附辅助索引时只可以拿到主键值，还需根据主键进行主键索引获取数据；但若如上所示只需abc字段时，则查询到组合索引的叶子节点就可以返回了，不需要回表查询</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul><li>创建索引：<code>create [ unique | fulltext ] index index_name on table_name (index_col_name, ...);</code></li><li>查看索引：<code>show index from table_name;</code></li><li>删除索引：<code>drop index index_name on table_name;</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- name字段为姓名字段，该字段值可能重复，为该字段创建索引</span><br><span class="line">create index idx_user_name on tb_user(name);</span><br><span class="line">-- phone手机号字段的值非空且唯一，为该字段创建唯一索引</span><br><span class="line">create unique index idx_user_phone on tb_user(phone);</span><br><span class="line">-- 为profession，age，status创建联合索引</span><br><span class="line">create index idx_user_pro_age_stat on tb_user(profession,age,status);</span><br><span class="line">-- 为email建立合适的索引提升查询效率</span><br><span class="line">create index idx_user_email on tb_user(email);</span><br><span class="line">-- 删除索引</span><br><span class="line">drop index idx_user_email on ta_user;</span><br></pre></td></tr></table></figure><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行运算操作或使用了函数，索引将失效，如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li><li>字段类型不同，如：<code>explain select * from tb_user where phone = 17799990015;</code>，phone的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效</li><li>联合索引不满足最左匹配原则</li></ol><h4 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h4><p>其中<code>use</code>是建议，实际使用哪个索引MySQL还会自己权衡运行速度去更改，force即无论如何都强制使用该索引</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 使用索引</span><br><span class="line">explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</span><br><span class="line">-- 不使用哪个索引</span><br><span class="line">explain select * from tb_user ignore index(idx_user_pro) where</span><br><span class="line">profession=&quot;软件工程&quot;;</span><br><span class="line">-- 必须使用哪个索引</span><br><span class="line">explain select * from tb_user force index(idx_user_pro) where</span><br><span class="line">profession=&quot;软件工程&quot;;</span><br></pre></td></tr></table></figure><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ul><li>针对数据量大且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>若是字符串类型的字段，字段长度较长，可以针对字段的特点建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，可以更好地确定哪个索引最有效地用于查询</li></ul><h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><h4 id="基础SQL优化"><a href="#基础SQL优化" class="headerlink" title="基础SQL优化"></a>基础SQL优化</h4><ul><li>尽量使用数值替代字符串类型</li><li>索引不适合建在有大量重复数据的字段上</li><li>避免在where子句中使用<code>!=</code>或<code>&lt;&gt;</code>操作符，可能会让索引失效</li><li>用<code>union all</code>或分成两个子句替换<code>or</code>来连接条件</li><li>使用默认值代替<code>null</code></li></ul><h4 id="高级SQL优化"><a href="#高级SQL优化" class="headerlink" title="高级SQL优化"></a>高级SQL优化</h4><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><ul><li>采用批量插入（一次插入的数据不建议超过1000条）</li><li>手动提交事务</li><li>主键顺序插入</li></ul><p>若一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以用MySQL数据库提供的load指令插入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 --local-infile（这行在bash/cmd界面输入）</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1；</span><br><span class="line">select @@local_infile;</span><br><span class="line"># 执行load指令将准备好的数据加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27;</span><br><span class="line">fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><p>避免同时修改或删除过多数据，cpu利用率过高造成锁表操作，从而影响对数据库的访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 反例</span><br><span class="line">delete from student where id &lt; 100000;</span><br><span class="line"></span><br><span class="line">for (User user:list) &#123;</span><br><span class="line">delete from student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 正例</span><br><span class="line"># 分批进行删除，如每次500</span><br><span class="line">for() &#123;</span><br><span class="line">delete student where id &lt; 500;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delete student where id &gt;= 500 and id &lt; 1000;</span><br></pre></td></tr></table></figure><h5 id="先过滤再使用group-by分组"><a href="#先过滤再使用group-by分组" class="headerlink" title="先过滤再使用group by分组"></a>先过滤再使用group by分组</h5><h5 id="排序字段创建索引（where和order-by常出现的字段）"><a href="#排序字段创建索引（where和order-by常出现的字段）" class="headerlink" title="排序字段创建索引（where和order by常出现的字段）"></a>排序字段创建索引（where和order by常出现的字段）</h5><h5 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h5><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ol><li><p>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</p><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul></li><li><p>某表包含字段（id、username、password、status），由于数据量大，需要对以下SQL语句进行优化：</p><p><code>select id,username,password from tb_user where username=&#39;itcast&#39;;</code></p><p><code>解：</code>给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch笔记</title>
      <link href="/2023/02/03/elasticsearch%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/03/elasticsearch%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="检查集群的健康状况"><a href="#检查集群的健康状况" class="headerlink" title="检查集群的健康状况"></a>检查集群的健康状况</h4><ul><li>green：所有primary shard和replica shard都已成功分配，集群100%可用</li><li>yellow：所有primary shard都已成功分配，但至少有一个replica shard缺失，此时集群所有功能都正常使用，数据不会丢失，搜索结果依然完整，但集群的可用性减弱</li><li>red：至少一个primary shard缺失，部分数据不能使用，搜索只能返回部分数据，分配上的写入请求会返回一个异常，为了索引数据的完整性，需尽快修复集群</li></ul><h4 id="查询文档方法"><a href="#查询文档方法" class="headerlink" title="查询文档方法"></a>查询文档方法</h4><ul><li><p>Query String Search（直接在浏览器的URL地址栏输入搜索参数）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.22.133.9301/book_shop/it_book/_search?q=name:Java</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/03/pSsU7B4.png"></p><p>各参数含义：（1）took：检索时间（2）time_out：是否超出规定检索时间（3）_shards：查询的index分散成了多个分片，搜索请求会分发到所有primary shard或对应的replica shard，显示各分片是否查询成功（4）hits：命中文档的情况，total表示总数，max_score：Lucene底层对检索文档相关度的评分，hits：命中文档的详细数据</p></li><li><p>Json格式参数查询</p></li><li><p>过滤检索，如查询name中包含java且price不大于80的商品</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET book_shop/it_book/_search</span><br><span class="line">&#123;</span><br><span class="line">&quot;query&quot;: &#123;</span><br><span class="line">&quot;bool&quot;: &#123;</span><br><span class="line">&quot;must&quot;: &#123;</span><br><span class="line">&quot;match&quot;: &#123;&quot;name&quot;: &quot;Java&quot;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;filter&quot;: &#123;</span><br><span class="line">&quot;range&quot;: &#123;</span><br><span class="line">&quot;price&quot;: &#123;&quot;lte&quot;: 80.0&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>全文检索，查询描述信息desc中包含“Java图书”的文档，只显示name和desc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET book_shop/it_book/_search</span><br><span class="line">&#123;</span><br><span class="line">&quot;query&quot;: &#123;</span><br><span class="line">&quot;match&quot;: &#123;&quot;desc&quot;: &quot;Java图书&quot;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;_source&quot;: [&quot;name&quot;,&quot;desc&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>短语检索（phrase search）</p><p>不对检索串进行分词处理，只有与检索文本完全一致才能作为结果返回</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET book_shop/it_book/_search</span><br><span class="line">&#123;</span><br><span class="line">&quot;query&quot;: &#123;</span><br><span class="line">&quot;match_phrase&quot;: &#123;</span><br><span class="line">&quot;desc&quot;: &quot;Java图书&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;_source&quot;: [&quot;name&quot;,&quot;desc&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>什么是倒排索引：即反向索引，日常通过key找到value，这个是通过value找到key，倒排索引主要由两部分组成：“单词词典”和“倒排文件”</p><ul><li>单词词典：由文档集合中出现的所有单词构成的字符串集合，单词词典内每条索引项记在单词本身一些信息及指向“倒排列表”的指针</li><li>倒排列表：记录出现过某个单词的所有文档的文档列表及单词所在位置信息，每条记录称为一个倒排项，根据倒排列表可知哪些文档包含某个单词</li><li>倒排文件：所有单词的倒排列表顺序存储在磁盘某个文件中，该文件即倒排文件，倒排文件是存储倒排索引的物理文件</li></ul><h4 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h4><ul><li>分析器的组成<ol><li>字符过滤器：如去除html标签，将&amp;替换为and等</li><li>分词器：按照某种规律，如根据空格、逗号等将文本块进行分解</li><li>标记过滤器：修改词（小写化处理等）、去掉词（由某一规则去掉无意义的词，如“a”）、增加词（增加同义词等）</li></ol></li><li>分析器与分词器之间为包含关系</li><li>倒排索引核心原理-normalization：时态、单复数、同义词、大小写转换等</li></ul><h4 id="索引模版"><a href="#索引模版" class="headerlink" title="索引模版"></a>索引模版</h4><p>将已经创建好的某个索引的参数设置和索引映射保存下来，在创建新索引时指定模版名可以重用已定义好的模版中的设置和映射</p><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>默认情况下should是可以不匹配任何一个条件的，可以用minimum_should_match控制至少匹配几个才能作为结果返回；在没有must的情况下，should至少匹配一个才可以返回</p><h4 id="全量替换"><a href="#全量替换" class="headerlink" title="全量替换"></a>全量替换</h4><ul><li>若id不存在则为创建，若id已存在则为全量替换操作</li><li>document是不可变的，若要修改document的内容则进行全量替换，直接对document重新建立索引，替换里面的内容</li><li>es会将老的document标记为deleted，当创建越来越多的document的时候，es会在适当的时机在后台自动删除标记为deleted的document</li><li>document强制创建：PUT /index/type/id?op_type=create，PUT /index/type/id/_create</li><li>document的删除：DELETE /index/type/id，将其标记为deleted，当数据越来越多的时候，在后台自动删除</li></ul><h4 id="悲观锁和乐观锁并发控制方案"><a href="#悲观锁和乐观锁并发控制方案" class="headerlink" title="悲观锁和乐观锁并发控制方案"></a>悲观锁和乐观锁并发控制方案</h4><ul><li>悲观锁即在对数据进行修改时加锁；优点即对应用程序是透明的不需要额外操作，缺点是并发能力很低，同一时间只能有一条线程操作数据</li><li>乐观锁即将拿到的版本号与es版本号进行对比，若相同则修改，不同则重新读取；优点即并发能力高，缺点是较麻烦</li></ul>]]></content>
      
      
      <categories>
          
          <category> es </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆栈future</title>
      <link href="/2023/02/03/%E5%A0%86%E6%A0%88future/"/>
      <url>/2023/02/03/%E5%A0%86%E6%A0%88future/</url>
      
        <content type="html"><![CDATA[<h4 id="mysql事务"><a href="#mysql事务" class="headerlink" title="mysql事务"></a>mysql事务</h4><p>事务是访问和更新数据库的程序执行单元，事务中可能包含一个或多个sql语句，这些语句要么都执行要么都不执行</p><p>Start transaction标识事务开始，commit提交事务，将执行结果写入到数据库；若sql语句执行出现问题会调用rollback，回滚所有已执行成功的sql语句，也可以在事务中直接使用rollback</p><p>ACID特性：原子性、一致性、隔离性、持久性</p><h4 id="Go垃圾回收机制"><a href="#Go垃圾回收机制" class="headerlink" title="Go垃圾回收机制"></a>Go垃圾回收机制</h4><ul><li><p>常见垃圾回收算法：引用计数（Python/php）、标记清除（golang）、分代回收（java）</p></li><li><p>垃圾回收原理：标记出内存中哪些对象在使用和未使用，将未使用的回收</p></li><li><p>内存标记：内存分配有个span数据结构，span维护了一个个内存块，由一个位图allocBits表示每个内存块分配情况，gcmarkBits标记内存块被引用（标记）情况，两者对比可以找出要回收的目标</p><p><img src="https://s1.ax1x.com/2023/02/03/pSsyk1s.png"></p></li><li><p>三色标记法：将在标记队列中等待标记的对象假设为灰色，未标记的记为白色（将被清除），已标记的记为黑色</p></li><li><p>STW即停掉所有goroutine专心做垃圾回收</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>业务问题</title>
      <link href="/2023/02/03/%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/"/>
      <url>/2023/02/03/%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="Cookie、Session与Token"><a href="#Cookie、Session与Token" class="headerlink" title="Cookie、Session与Token"></a>Cookie、Session与Token</h4><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>随着交互式Web应用的兴起，Web需要管理会话；此时为了区分用户分发一个会话标识（session id），即随机字符串；但此时服务器需要保存所有用户的session id，若访问量过多则会造成巨大的开销。</p><p>若用户已经登录了系统，则发送一个特定算法加密的token，里面包含了用户的user id；用户下次访问时只需通过Http header将token传递过来即可</p><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p>指浏览器里能永久存储的一种数据，是浏览器实现的一种数据存储功能</p><p>Cookie由服务器生成，发送给浏览器，浏览器把Cookie以kv形式保存在某个目录下的文本文件内，下一次请求同一网站时会把该Cookie发送给服务器，每个域中的Cookie数量是有限的</p><h5 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h5><p>即会话，区分客户端的“身份标识”；对于浏览器客户端默认用Cookie的方式保存</p><p>服务器使用Session将用户信息临时保存在服务器上，用户离开网站后Session会被销毁，该存储方式相对Cookie更安全，但Session有一个缺陷：若Web服务器做了负载均衡，则下一个操作请求到了另一台服务器的时候Session会丢失</p><h5 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h5><p>由特定算法和唯一密钥生成的签名和数据一起作为Token</p><h5 id="分布式Session（Session共享）"><a href="#分布式Session（Session共享）" class="headerlink" title="分布式Session（Session共享）"></a>分布式Session（Session共享）</h5><p>将Session存放到第三方，客户端和服务端通信时去第三方存取Session信息；</p><p>redis常作为第三方，主要由于：</p><ol><li>读写更快，其直接操作内存数据，而Cookie和Session都是以文件形式存储</li><li>更好设置过期时间</li><li>更好的分布式同步，设置redis主从同步，可快速同步Session到各台web服务器，比文件存储更加快速</li></ol><h4 id="单点登录原理及实现方式"><a href="#单点登录原理及实现方式" class="headerlink" title="单点登录原理及实现方式"></a>单点登录原理及实现方式</h4><p>单点登录（Single Sign On）SSO，即在同一账号平台下的多个应用系统中，用户只需登录一次即可访问所有相互信任的系统</p><h5 id="单点登录原理"><a href="#单点登录原理" class="headerlink" title="单点登录原理"></a>单点登录原理</h5><p>SSO需要一个独立的认证中心，认证中心验证用户的用户名和密码正确，创建全局会话和token，token作为参数发送给各个子系统，子系统拿到token即得到授权，返回确认信息，创建局部会话，局部会话登录方式与单系统登录方式相同</p><p>用户与SSO建立的会话为全局会话，与各个子系统建立的会话为局部会话：</p><ol><li>局部会话存在，全局会话一定存在</li><li>全局会话存在，局部会话不一定存在</li><li>全局会话销毁，局部会话必须销毁</li></ol><p><img src="https://img-blog.csdnimg.cn/316407c5be7d4779a23a54fbaeb5fa69.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Y-q5qmZ5a2QMA==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h5 id="单点登录实现方式"><a href="#单点登录实现方式" class="headerlink" title="单点登录实现方式"></a>单点登录实现方式</h5><p>一般包括：Cookies、session同步、分布式Session</p><h6 id="基于Cookie-Redis的单点登录"><a href="#基于Cookie-Redis的单点登录" class="headerlink" title="基于Cookie+Redis的单点登录"></a>基于Cookie+Redis的单点登录</h6><p>用cookie作为媒介存放用户凭证，用户登录系统后返回一个加密的cookie，当用户访问子应用的时候带上该cookie，校验通过后即可登录</p><p>redis：<code>key</code>：生成唯一随机值（ip、用户id等），<code>value</code>：用户数据</p><p>cookie：将redis中生成的key值放到cookie里</p><p>Cookie一般以域名为分割的，即a.xxx.com和b.xxx.com的Cookie不能互相访问，但是子域名可以访问上级域名的Cookie，即a.xxx.com和b.xxx.com可以访问xxx.com下的Cookie，故能将顶级域名的Cookie作为OpenId的载体</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8b34f12a8b8b34bfefe7c22a51d10064.png"></p><p>此方法存在安全性问题</p><h6 id="分布式session方式实现单点登录"><a href="#分布式session方式实现单点登录" class="headerlink" title="分布式session方式实现单点登录"></a>分布式session方式实现单点登录</h6><ol><li>用户首次登录，将会话信息（用户Id和用户信息），如以用户Id为Key，写入分布式Session</li><li>用户再次登录时获取分布式Session，是否有会话信息，若没有则跳到登录页</li><li>一般采用Cache中间件实现如Redis，若分布式Session宕机后可以从持久化存储中加载会话信息</li><li>存入会话时可以设置会话保持时间</li></ol><h6 id="通过页面重定向方式"><a href="#通过页面重定向方式" class="headerlink" title="通过页面重定向方式"></a>通过页面重定向方式</h6><p>通过父应用和子应用来回重定向中进行通信，实现信息的安全传递，父应用提供一个GET方式的登录接口，用户通过子应用重定向连接方式访问该接口，若应用还未登录则返回一个登录页面，用户输入账号密码进行登录；若用户已登录，则生成加密的token，且重定向到子应用提供验证token的接口，解密和校验后，子应用登录当前用户</p><p>此方法解决的安全性问题和跨域问题，但不方便</p><h6 id="使用token实现"><a href="#使用token实现" class="headerlink" title="使用token实现"></a>使用token实现</h6><ol><li><p>在项目某个模块登录后，按照规则生成字符串，将登录之后用户包含到生成字符串中，把字符串返回</p><ol><li>可以把字符串通过cookie返回</li><li>把字符串通过地址栏返回</li></ol></li><li><p>再去访问项目其它模块，每次访问在地址栏带着生成的字符串，在访问模块内获取地址字符串，根据字符串获取用户信息，若能获取到就可以登录</p><p><img src="https://img-blog.csdnimg.cn/724392568bd544de9dd0ad456e1cf83a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATGl16aOO,size_20,color_FFFFFF,t_70,g_se,x_16"></p></li></ol><h5 id="联通云SSO-Postmassage单点登录"><a href="#联通云SSO-Postmassage单点登录" class="headerlink" title="联通云SSO-Postmassage单点登录"></a>联通云SSO-Postmassage单点登录</h5><p><img src="https://s1.ax1x.com/2023/02/03/pSsty28.png"></p><p><strong>交互流程</strong></p><ol><li>用户从云径门户登录请求IAM登录认证，登陆成功后前端缓存token相关数据并保存在浏览器的缓存中</li><li>点击第三方系统入口时，云径门户前端以POSTMessage等方式发送token相关数据，第三方获取并保存，反馈云径前端已成功接收</li><li>用户对第三方页面操作时，第三方前端将token相关数据传给后端并校验本地会话是否过期，若过期就调用IAM进行认证</li><li>token认证通过，IAM返回用户信息，其后端缓存token，有效期设置10分钟</li><li>token认证失败，第三方后端返回其前端认证失败状态，前端弹出登录失效请重新登录提示，用户点击后需通过postMessage通知到云径前端，云径前端跳转到登录页面。通知信息包括 回调地址、系统标识</li><li>登出操作在云径门户进行，因对接系统缓存有效期为10分钟，10分钟内会话不一致可以接受</li></ol><p><strong>SSO登录认证API接口</strong></p><p>HTTP头定义</p><table><thead><tr><th>参数名称</th><th>数据类型</th><th>参数描述</th></tr></thead><tbody><tr><td>Content-Type</td><td>String</td><td>application/json</td></tr><tr><td>ACCESS_TOKEN</td><td>String</td><td>token</td></tr><tr><td>APP_KEY</td><td>String</td><td>接入服务标识</td></tr><tr><td>SIGN</td><td>String</td><td>签名</td></tr></tbody></table><p><strong>注意项</strong></p><ul><li><p>企方将URL提供给联通云前端研发，联通云用iframe装载或跳转接入产品控制台页面用POSTMessage发送消息给接入方</p></li><li><p>接入产品控制台前端接受消息Sample如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">window.addEventListener(<span class="string">&#x27;message&#x27;</span>,function (e: any) &#123;</span><br><span class="line">    <span class="comment">//接入方需要的数据如token等存放在data中</span></span><br><span class="line">    <span class="type">const</span> <span class="variable">params</span> <span class="operator">=</span> e.data;</span><br><span class="line">    <span class="comment">//WOCLOUD代表联通云的发送标识</span></span><br><span class="line">    <span class="keyword">if</span> (params.linkSource == <span class="string">&quot;WOCLOUD&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">//通知联通云message已经收到，联通云收到后，不再发送message</span></span><br><span class="line">        e.source.postMessage(&#123;</span><br><span class="line">            status: <span class="number">200</span>,</span><br><span class="line">            data: &#123;&#125;</span><br><span class="line">        &#125;,e.origin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接入方逻辑代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>token失效处理示例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">iframe.<span class="title function_">postMessage</span>(&#123;<span class="comment">//发送POSTMessage</span></span><br><span class="line">    <span class="attr">token</span>:<span class="string">&quot;token&quot;</span>,<span class="comment">//token值</span></span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;product page url&quot;</span>,<span class="comment">//用户当前的路由</span></span><br><span class="line">    linkSource：<span class="string">&quot;ECS&quot;</span><span class="comment">//系统标识</span></span><br><span class="line">&#125;,<span class="string">&quot;console.cucloud.cn/console/home&quot;</span>);<span class="comment">//接收POSTMessage窗口</span></span><br></pre></td></tr></table></figure></li><li><p>处理实例</p><p><code>loginbymessage.tpl</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>,msgCB,<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    msgCB = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> params = e.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (params.<span class="property">linkSource</span> == <span class="string">&quot;WOCLOUD&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;message&quot;</span>,msgCB,<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">            e.<span class="property">source</span>.<span class="title function_">postMessage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">status</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,e.<span class="property">origin</span>);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;Ajax.php?module=ajax_postmessage&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: e.<span class="property">data</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">async</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> object = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span>+data+<span class="string">&quot;)&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(object.<span class="property">pass</span> == <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=object.<span class="property">page</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;认证失败&#x27;</span>);&#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ajax_postmessage.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//记录云账号，区分联通云和合营云</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;linkSource&#x27;</span>] == <span class="string">&#x27;WOCLOUD&#x27;</span>)   <span class="comment">//联通云</span></span><br><span class="line">    <span class="variable">$source_id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;linkSource&#x27;</span>] == <span class="string">&#x27;WOCLOUD-HYY&#x27;</span>)&#123;   <span class="comment">//合营云</span></span><br><span class="line">    <span class="variable">$source_id</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//创建新cookie</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Set-Cookie: apiToken=&#x27;</span> . <span class="variable">$_REQUEST</span>[<span class="string">&#x27;ApiToken&#x27;</span>] . <span class="string">&#x27;;Max-Age=86400; SameSite=None; Secure&#x27;</span>,<span class="literal">false</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Set-Cookie: regionId=&#x27;</span> . <span class="variable">$_REQUEST</span>[<span class="string">&#x27;regionId&#x27;</span>] . <span class="string">&#x27;;Max-Age=86400; SameSite=None; Secure&#x27;</span>,<span class="literal">false</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Set-Cookie: uid=&#x27;</span> . <span class="variable">$_REQUEST</span>[<span class="string">&#x27;uid&#x27;</span>] . <span class="string">&#x27;;Max-Age=86400; SameSite=None; Secure&#x27;</span>,<span class="literal">false</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$biz_id</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;loginUserId&#x27;</span>];</span><br><span class="line"><span class="variable">$loginname</span> = <span class="title function_ invoke__">fn_utf82gbk</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;loginUserName&#x27;</span>]);</span><br><span class="line"><span class="variable">$token</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//联通白名单验证</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$bizchannel</span>-&gt;<span class="title function_ invoke__">checktoken</span>(<span class="variable">$token</span>))&#123;<span class="comment">//认证成功</span></span><br><span class="line">        <span class="comment">//用户账号管理</span></span><br><span class="line">        <span class="comment">//保存登录状态</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//配置samesite</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Set-Cookie:&#x27;</span>. IAC_LOGINSESSION_COOKIE_NAME . <span class="string">&#x27;=&#x27;</span> . <span class="variable">$token</span> . <span class="string">&#x27;;Max-Age=86400; SameSite=None; Secure&#x27;</span>,<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&#x27;pass&#x27;</span>=&gt;<span class="number">1</span>, <span class="string">&#x27;page&#x27;</span>=&gt;<span class="string">&#x27;/wocloud.php&#x27;</span>,<span class="string">&#x27;can&#x27;</span>=&gt;<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$_REQUEST</span>))));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>wocloud.php</code></p><p>来源检查，认证身份，认证成功跳转至网站主办者页</p><h6 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h6><p>即iframe标签，是框架的一种形式</p><h6 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h6><p>允许来自一个文档的脚本可以传递文本消息到另一个文档里的脚本，而不用管是否跨域，这项技术称为“跨文档消息传递”</p><p>postMessage可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>页面与嵌套的iframe消息传递</li><li>多窗口之间消息传递</li></ul><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">otherWindow.postMessage(message,targetOrigin,[transfer]);</span><br></pre></td></tr></table></figure><ol><li>otherWindow：其它窗口的一个引用，如iframe的contentWindow属性、执行window.open返回的窗口对象、命名过或数值索引的window.frames</li><li>message：要发送的数据，它将会被结构化克隆算法序列化（部分低版本浏览器只支持字符串，故发送数据最好用JSON.stringify()序列化）</li><li>targetOrigin：通过targetOrigin属性指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或一个URI（若要指定和当前窗口同源的话可设置为”/“）。在发送的时候若目标窗口的协议、主机地址或端口号这三者任意一项不匹配targetOrigin提供的值，则消息不会发送</li></ol><p><strong>接收消息</strong></p><p>若指定的源匹配的话，则当调用postMessage()方法时，在目标窗口Window对象上就会触发一个message事件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>,<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> origin = event.<span class="property">origin</span>;</span><br><span class="line"><span class="keyword">if</span> (origin !== <span class="string">&quot;http://example.org:8080&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>event的属性有：</p><ul><li>data：从其他window传递过来的数据副本</li><li>origin：调用postMessage时消息发送窗口的origin，如：“<a href="http://example.org:8080”">http://example.org:8080”</a></li><li>source：对发送消息的窗口对象的引用，可以使用其在具有不同origin的两个窗口之间建立双向数据通信</li></ul><h4 id="双因素认证"><a href="#双因素认证" class="headerlink" title="双因素认证"></a>双因素认证</h4><p>一般来说，三种不同类型的证据可以证明一个人的身份</p><ul><li><strong>秘密信息</strong>：只有该用户知道、其他人不知道的某种信息，如密码</li><li><strong>个人物品</strong>：该用户的私人物品，如身份证、钥匙、手机等</li><li><strong>生理特征</strong>：该用户的遗传特征，如指纹、相貌、虹膜等</li></ul><p>这些证据称为三种“因素”，因素越多，证明力就越强；双因素认证即同时需要两个因素的证据</p><h5 id="双因素认证方案"><a href="#双因素认证方案" class="headerlink" title="双因素认证方案"></a>双因素认证方案</h5><p>密码+手机是常见的双因素认证方案；即提供密码的同时还要提供短信验证码；但是短信也是不安全的，故密码+短信验证不是安全的双因素认证</p><h6 id="TOTP（Time-based-One-time-Password，基于时间的一次性密码）"><a href="#TOTP（Time-based-One-time-Password，基于时间的一次性密码）" class="headerlink" title="TOTP（Time-based One-time Password，基于时间的一次性密码）"></a>TOTP（Time-based One-time Password，基于时间的一次性密码）</h6><p><strong>主要步骤</strong></p><ol><li>用户开启双因素认证后，服务器生成一个密钥</li><li>服务器提示用户扫码（或其它方式），将密钥保存到用户的手机；此时服务器和用户手机都有了同一把密钥（密钥只与手机绑定）</li><li>用户登录时，手机客户端使用该密钥和当前时间戳生成一个哈希，有效期30s，用户在有效期内将哈希提交给服务器</li><li>服务器也是用密钥和当前时间戳生成一个哈希与用户的进行比对</li></ol><p><strong>如何保证30s内服务器和手机生成相同哈希</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TC = floor(unixtime(now)-unixtime(T0) / TS)</span><br></pre></td></tr></table></figure><p>TC 表示一个时间计数器，<code>unixtime(now)</code>是当前 Unix 时间戳，<code>unixtime(T0)</code>是约定的起始时间点的时间戳，默认是<code>0</code>，也就是1970年1月1日。TS 则是哈希有效期的时间长度，默认30秒。因此，就变成下面的形式。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TC = floor(unixtime(now) / 30)</span><br><span class="line"></span><br><span class="line">#此时可以计算出哈希</span><br><span class="line">TOTP = HASH(SecretKey,TC)</span><br></pre></td></tr></table></figure><p><strong>TOTP的实现</strong>（JavaScript）</p><ol><li><p>安装该模块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save 2fa</span><br></pre></td></tr></table></figure></li><li><p>生成一个32位字符的密钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var tfa = require(&#x27;2fa&#x27;);</span><br><span class="line">tfa.generateKey(32,function(err,key)&#123;console.log(key);&#125;)</span><br></pre></td></tr></table></figure></li><li><p>生成哈希</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var tc = Math.floor(Date.now() / 1000 / 30);</span><br><span class="line">var totp = tfa.generateCode(key,tc);</span><br><span class="line">console.log(totp);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>企业总结</title>
      <link href="/2023/02/03/%E4%BC%81%E4%B8%9A%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/03/%E4%BC%81%E4%B8%9A%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="信息安全管理系统"><a href="#信息安全管理系统" class="headerlink" title="信息安全管理系统"></a>信息安全管理系统</h4><p>IDC、云计算、CDN经营者建设的具有基础数据管理、访问日志管理、信息安全管理等功能的安全管理系统，以满足经营者和电信管理部门的信息安全管理需求</p><p>企业建设统一的ISMS（信息安全管理体系，Information Security Management System），并与电信管理部门建设的安全监管系统（SMMS）通过信息安全管理接口（ISMI）进行通信，实现电信管理部门的监管需求</p><p>系统主要包括：CU（控制平台）、EU（执行系统）和DU（日志系统）；CU与工信部/省管局SMMS系统对接实现基础数据的上报，系统接收信息安全指令后下发EU执行，将EU执行结果上报SMMS；EU实现异常IP、违法违规网站监测、违法信息的监测发现和过滤封堵处置（TCP/UDP）、访问日志的合成与上报等功能</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c6e2dfbb39146c1c1ed4d7c6c77b0537.png"></p><h4 id="基线核查"><a href="#基线核查" class="headerlink" title="基线核查"></a>基线核查</h4><p>基线指配置和管理系统的详细描述或最低安全要求，包括服务和应用程序设置、操作系统组件配置、权限权利分配、管理规则等</p><p>服务器安全基线指为满足安全规范要求，服务器安全配置必须达到的标准，一般通过检查各安全配置参数是否符合标准度量，主要包括账号配置安全、口令配置安全、授权配置、日志配置、IP通信配置等方面内容，直接反映了系统自身的安全脆弱性</p><p>安全基线的意义在于通过在系统生命周期不同阶段对目标系统展开各类安全检查，找出不符合基线定义的安全配置项并选择和实施安全措施控制安全风险，并通过对历史数据的分析获得系统安全状态和变化趋势</p><h5 id="基线核查的内容"><a href="#基线核查的内容" class="headerlink" title="基线核查的内容"></a>基线核查的内容</h5><p>主要包括以下内容：</p><ul><li>主机安全检查（Windows、Linux）</li><li>数据安全检查（Oracle、Redis、MySQL等）</li><li>中间件安全检查（Apache、Weblogic、Tomcat等）</li><li>网络与安全设备检查（堡垒机、防火墙、路由器等）</li></ul><h4 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h4><p>和防火墙、入侵检测系统互相配合，能够有效提高网络的安全性，通过对网络的扫描，网络管理员能了解网络的安全设置和运行的应用服务，及时发现安全漏洞，评估网络风险等级；防火墙和网络监视系统是被动的防御手段，安全扫描是主动的防范措施，有效避免黑客的攻击行为</p><h5 id="漏扫技术原理"><a href="#漏扫技术原理" class="headerlink" title="漏扫技术原理"></a>漏扫技术原理</h5><p>漏扫技术建立在端口扫描技术之上，从对黑客攻击行为的分析和收集的漏洞来看，大多数都是针对某个特定的端口</p><p>漏扫原理是通过远程检测目标主机TCP/IP不同端口的服务，记录目标的回答，搜集很多目标主机的各种信息，获得目标主机TCP/IP端口和对应的网络访问服务的相关信息后，与漏扫系统的漏洞库匹配，若满足条件则视为漏洞存在；通过模拟黑客的进攻手法对目标主机系统进行安全性的安全漏洞扫描，如测试弱势口令等</p><h5 id="漏扫的三个阶段"><a href="#漏扫的三个阶段" class="headerlink" title="漏扫的三个阶段"></a>漏扫的三个阶段</h5><ul><li>发现目标主机或网络</li><li>搜集目标信息，包括操作系统类型、运行的服务及服务软件的版本等。若目标是网络，还可以进一步发现该网络的拓扑结构、路由设备及各主机的信息</li><li>根据搜集的信息判断或进一步测试系统是否存在安全漏洞</li></ul><h5 id="计算机网络漏洞产生的原因"><a href="#计算机网络漏洞产生的原因" class="headerlink" title="计算机网络漏洞产生的原因"></a>计算机网络漏洞产生的原因</h5><p>主要是系统或应用程序的不合格编写引起的，用户的配置策略也有可能产生漏洞</p><p>网络的漏洞主要是协议漏洞，设计者在设计协议时默认协议所应用的环境为安全的网络空间，这就造成了某些网络协议本身并不安全，然后基于此种协议的网络服务的安全性也得不到保障</p><p>主机系统中的漏洞一般叫作系统漏洞，其中又分为操作系统漏洞和应用软件漏洞</p><h4 id="ICP备案、IP备案、域名备案区别与联系"><a href="#ICP备案、IP备案、域名备案区别与联系" class="headerlink" title="ICP备案、IP备案、域名备案区别与联系"></a>ICP备案、IP备案、域名备案区别与联系</h4><p>ICP备案即网站备案；由网站所有人或机构向网站接入商提交备案信息；其目的是防止在网上从事非法的网站经营活动，打击不良互联网信息的传播</p><p>IP备案由接入商准备，其服务器有独立的ip，需将这些ip报到工信部信息产业部，才能对使用该ip的客户提供的备案信息进行接入确认；若以前备案过且有了新的域名，则只需由接入商将新域名加到备案信息中的域名列表中审核通过即可；IP备案即域名备案，都是为网站域名申请ICP备案，最终目的是给网站备案域名；而网站备案和域名备案在本质上也没有区别</p><h5 id="新增备案、新增网站、新增接入"><a href="#新增备案、新增网站、新增接入" class="headerlink" title="新增备案、新增网站、新增接入"></a>新增备案、新增网站、新增接入</h5><h6 id="新增备案"><a href="#新增备案" class="headerlink" title="新增备案"></a>新增备案</h6><p>主体证件及域名均未备案</p><h6 id="新增网站"><a href="#新增网站" class="headerlink" title="新增网站"></a>新增网站</h6><p>主体证件存在备案号，域名未备案</p><h6 id="新增接入"><a href="#新增接入" class="headerlink" title="新增接入"></a>新增接入</h6><p>主体证件及域名均在其他接入商已备案</p><h4 id="IDC、ISP、ICP概念及关系"><a href="#IDC、ISP、ICP概念及关系" class="headerlink" title="IDC、ISP、ICP概念及关系"></a>IDC、ISP、ICP概念及关系</h4><h5 id="IDC"><a href="#IDC" class="headerlink" title="IDC"></a>IDC</h5><p>互联网数据中心，指拥有完善设备（包括高速互联网接入带宽、高性能局域网络、安全可靠的机房环境等）、专业化管理、应用级服务平台。在此平台基础上IDC服务商为企业、ISP、ICP、ASP等客户提供互联网基础平台及各种增值服务</p><h5 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h5><p>互联网服务提供商，又称IAP，如中国电信、中国联通等互联网运营单位及其在各地的分支机构和下属的组建局域网的专线单位。中国电信（China Telecom）和中国网通（China Net Com）是中国目前最大的ISP</p><h5 id="ISP和IDC的关系"><a href="#ISP和IDC的关系" class="headerlink" title="ISP和IDC的关系"></a>ISP和IDC的关系</h5><p>IDC既然是互联网数据中心，必然是要有比较丰富的互联网带宽资源，这种有丰富互联网带宽资源的机房基本都是由运营商建立的</p><h5 id="ICP"><a href="#ICP" class="headerlink" title="ICP"></a>ICP</h5><p>互联网内容提供商，在互联网上发布合法的页面内容供用户浏览，从而谋利的合法企业或机构</p><h4 id="B-S与C-S架构"><a href="#B-S与C-S架构" class="headerlink" title="B/S与C/S架构"></a>B/S与C/S架构</h4><h5 id="什么是C-S架构"><a href="#什么是C-S架构" class="headerlink" title="什么是C/S架构"></a>什么是C/S架构</h5><p>主要用于局域网内，也叫客户机/服务器模式；</p><p><strong>第一层</strong>：在客户机系统上结合了界面显示与业务逻辑，即用户表示层</p><p><strong>第二层</strong>：通过网络结合了数据库服务器，即数据库层</p><p>C/S架构特点：用户需要使用时需要下载相应客户端</p><h5 id="什么是B-S架构"><a href="#什么是B-S架构" class="headerlink" title="什么是B/S架构"></a>什么是B/S架构</h5><p>即浏览器/服务器结构；B/S有三层，分别为：</p><p><strong>表现层</strong>：主要完成用户和后台交互及最终查询结果的输出功能</p><p><strong>逻辑层</strong>：主要利用服务器完后客户端的应用逻辑功能</p><p><strong>数据层</strong>：主要接收客户端请求后独立进行各种运算</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker笔记</title>
      <link href="/2023/02/03/docker%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/03/docker%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="Docker存在意义"><a href="#Docker存在意义" class="headerlink" title="Docker存在意义"></a>Docker存在意义</h3><h4 id="docker作用"><a href="#docker作用" class="headerlink" title="docker作用"></a>docker作用</h4><h5 id="虚拟机技术与容器化技术"><a href="#虚拟机技术与容器化技术" class="headerlink" title="虚拟机技术与容器化技术"></a>虚拟机技术与容器化技术</h5><ul><li>虚拟机技术<ol><li>资源占用十分多</li><li>荣誉步骤多</li><li>启动很慢</li></ol></li><li>容器化技术<ol><li>直接运行在宿主机中，容器自身无内核，也没有虚拟出硬件，所以轻便</li><li>每个容器内有自己的文件系统，互不影响</li></ol></li></ul><h5 id="DevOps（开发、运维）"><a href="#DevOps（开发、运维）" class="headerlink" title="DevOps（开发、运维）"></a>DevOps（开发、运维）</h5><ul><li><p>应用更快速的交付和部署</p><ul><li>传统：帮助文档安装程序</li><li>Docker：打包镜像发布测试一键运行</li></ul></li><li><p>更便捷的升级和扩缩容</p></li><li><p>更简单的系统运维</p><p>容器化后，开发和测试环境高度一致</p></li><li><p>更有效的计算资源利用</p></li></ul><h4 id="为什么docker比vm快"><a href="#为什么docker比vm快" class="headerlink" title="为什么docker比vm快"></a>为什么docker比vm快</h4><ol><li>docker抽象层比虚拟机少，无需Hypervisor实现硬件资源虚拟化，运行在docker上的程序使用实际物理机的硬件资源，故docker在效率上更有优势</li><li>docker利用的是宿主机的内核，而不需要Guest OS</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNTEwNDExNzMyOS5wbmc?x-oss-process=image/format,png"></p><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><h5 id="镜像（image）"><a href="#镜像（image）" class="headerlink" title="镜像（image）"></a>镜像（image）</h5><p>镜像相当于一个目标，通过其创建容器服务</p><h5 id="容器（container）"><a href="#容器（container）" class="headerlink" title="容器（container）"></a>容器（container）</h5><p>镜像创建的单个应用</p><h5 id="仓库（repository）"><a href="#仓库（repository）" class="headerlink" title="仓库（repository）"></a>仓库（repository）</h5><p>仓库是存放镜像的地方，仓库分为公有仓库和私有仓库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1.卸载旧版本</span><br><span class="line">yum install docker \</span><br><span class="line">  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line">#2.需要的安装包</span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">#3.设置镜像的仓库</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">#更新yum软件包索引</span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line">#4.安装docker相关的docker-ce社区版ee是企业版</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">#5.启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">#6.使用docker version查看是否安装成功</span><br><span class="line">docker version </span><br><span class="line"></span><br><span class="line">#7.测试</span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">#8.查看已下载的镜像</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="docker卸载"><a href="#docker卸载" class="headerlink" title="docker卸载"></a>docker卸载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1.卸载依赖</span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">#2.删除资源</span><br><span class="line">yum -rf /var/lib/docker//docker默认工作路径</span><br></pre></td></tr></table></figure><h3 id="阿里镜像加速"><a href="#阿里镜像加速" class="headerlink" title="阿里镜像加速"></a>阿里镜像加速</h3><h4 id="登录阿里云找到容器镜像服务"><a href="#登录阿里云找到容器镜像服务" class="headerlink" title="登录阿里云找到容器镜像服务"></a>登录阿里云找到容器镜像服务</h4><p><img src="https://s1.ax1x.com/2023/02/03/pSsYlp8.png"></p><h4 id="找到镜像加速器"><a href="#找到镜像加速器" class="headerlink" title="找到镜像加速器"></a>找到镜像加速器</h4><p><img src="https://s1.ax1x.com/2023/02/03/pSsYMff.png"></p><h4 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1.创建一个目录</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">#2.编写配置文件</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://t2wwyxhb.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">#3.重启服务</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h3><ol><li><p>帮助命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker version#显示docker的版本信息</span><br><span class="line">docker info#显示docker系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help   #帮助命令</span><br></pre></td></tr></table></figure></li><li><p>镜像命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images#查看所有本地主机上的镜像，可以使用docker image ls代替</span><br><span class="line">docker search#搜索镜像</span><br><span class="line">docker pull#下载镜像docker image pull</span><br><span class="line">docker rmi#删除镜像docker image rm</span><br><span class="line"></span><br><span class="line">docker search mysql --filter=STARS=3000#搜索收藏数量大于3000的mysql</span><br><span class="line"></span><br><span class="line">docker pull tomcat:8#若不写tag，默认是latest</span><br><span class="line"></span><br><span class="line">docker rmi -f 镜像id#删除指定id的镜像</span><br><span class="line">docker rmi -f $(docker images -aq)#删除全部镜像</span><br></pre></td></tr></table></figure></li><li><p>容器命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run 镜像id#新建容器并启动</span><br><span class="line">docker ps#列出所有运行的容器</span><br><span class="line">docker rm 容器id#删除指定容器</span><br><span class="line">docker start 容器id#重启容器</span><br><span class="line">docker stop容器id#停止当前正在运行的容器</span><br><span class="line">docker kill 容器id#强制停止当前容器</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#新建容器并启动</span><br><span class="line">docker run [可选参数] image | docker container run [可选参数] image</span><br><span class="line">#参数说明</span><br><span class="line">--name=&quot;Name&quot;#容器名字 tomcat1 tomcat2用于区分容器</span><br><span class="line">-d#后台方式运行</span><br><span class="line">-it#使用交互方式运行，进入容器查看内容</span><br><span class="line">-p#指定容器的端口 -p 8080(宿主机):8080(容器)</span><br><span class="line">-P(大写)#随机指定端口</span><br><span class="line"></span><br><span class="line">#测试，启动并进入容器</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@241b5abce65e /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@241b5abce65e /]# exit #从容器退回主机</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#列出所有运行的容器</span><br><span class="line">docker ps 命令#列出当前正在运行的容器</span><br><span class="line">-a，--all#列出当前正在运行+历史运行过的容器</span><br><span class="line">-n=?，--last int#列出最近创建的?个容器</span><br><span class="line">-q，--quiet#只列出容器的编号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#退出容器</span><br><span class="line">exit#容器直接退出</span><br><span class="line">ctrl +P +Q#容器不停止退出</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除容器</span><br><span class="line">docker rm 容器id#删除指定容器，强制删除正在运行的容器-rf</span><br><span class="line">docker rm -f $(docker ps -aq)#删除所有的容器</span><br><span class="line">docker ps -a -q | xargs docker rm#删除所有的容器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启动和停止容器的操作</span><br><span class="line">docker start 容器id#启动容器</span><br><span class="line">docker restart 容器id#重启容器</span><br><span class="line">docker stop 容器id#停止当前正在运行的容器</span><br><span class="line">docker kill 容器id#强制停止当前容器</span><br></pre></td></tr></table></figure></li><li><p>其它常用命令</p><p><strong>后台启动命令</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d centos</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">CONTAINER ID      IMAGE       COMMAND    CREATED     STATUS   PORTS    NAMES</span><br><span class="line"></span><br><span class="line">#发现centos停止了；常见的陷阱，若没有前台进程时，docker发现没有应用就会自动停止</span><br><span class="line">#nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs</span><br><span class="line">#显示日志</span><br><span class="line">-tf#显示日志信息（一直更新）</span><br><span class="line">--tail number #需要显示日志条数</span><br><span class="line">docker logs -t --tail n 容器id#查看n行日志</span><br><span class="line">docker logs -ft容器id#跟着日志</span><br></pre></td></tr></table></figure><p><strong>查看容器中进程信息ps</strong></p><p><strong>查看镜像的元数据</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#命令docker top 容器id</span><br><span class="line">#命令docker inspect容器id</span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><p>docker exec -it 容器id bashshell            #进入容器后开启一个新的终端，可以在里面操作（常用）</p><p>docker attach 容器id                                #进入容器正在执行的终端</p><p><strong>从容器拷贝到主机上</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 容器id:容器内路径主机目的路径</span><br><span class="line"></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker ps</span><br><span class="line">CONTAINER ID     IMAGE    COMMAND     CREATED         STATUS       PORTS      NAMES</span><br><span class="line">56a5583b25b4     centos   &quot;/bin/bash&quot; 7seconds ago    Up 6 seconds      </span><br><span class="line"></span><br><span class="line">#1. 进入docker容器内部</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker exec -it 56a5583b25b4 /bin/bash</span><br><span class="line">[root@55321bcae33d /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line">#新建一个文件</span><br><span class="line">[root@55321bcae33d /]# echo &quot;hello&quot; &gt; java.java</span><br><span class="line">[root@55321bcae33d /]# cat hello.java </span><br><span class="line">hello</span><br><span class="line">[root@55321bcae33d /]# exit</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">#hello.java拷贝到home文件加下</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z /]# docker cp 56a5583b25b4:/hello.java /home </span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z /]# cd /home</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z home]# ls -l#可以看见java.java存在</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root    0 May 19 22:09 haust.java</span><br><span class="line">-rw-r--r-- 1 root root    6 May 22 11:12 java.java</span><br><span class="line">drwx------ 3 www  www  4096 May  8 12:14 www</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNDIxNDMxMzk2Mi5wbmc?x-oss-process=image/format,png"></p></li></ol><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><p>如果数据都在容器中，那么容器删除数据就会丢失；此时容器之间需要有一个数据共享的技术，Docker中产生的数据同步到本地；<strong>容器的持久化和同步操作，容器间实现数据共享</strong></p><p>卷技术：目录的挂载，将容器内的目录挂载到Linux上面</p><h4 id="方式一：直接使用命令挂载-v"><a href="#方式一：直接使用命令挂载-v" class="headerlink" title="方式一：直接使用命令挂载-v"></a>方式一：直接使用命令挂载-v</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录  -p 主机端口:容器内端口</span><br><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNTE5MTY0Nzk3MC5wbmc?x-oss-process=image/format,png"></p><p><strong>测试文件的同步</strong>（停止容器，在宿主机中修改文件，启动容器，数据依然同步）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNTE5MTcxODQ3MC5wbmc?x-oss-process=image/format,png"></p><h5 id="安装MySQL挂载连接测试"><a href="#安装MySQL挂载连接测试" class="headerlink" title="安装MySQL挂载连接测试"></a>安装MySQL挂载连接测试</h5><p><strong>思考：MySQL的数据持久化的问题</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#获取mysql镜像</span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line">#启动mysql并做数据挂载</span><br><span class="line">-d 后台运行</span><br><span class="line">-p 端口映射</span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置</span><br><span class="line">--name 容器名字</span><br><span class="line"></span><br><span class="line">docker run -d -p 主机端口:容器内端口 -v 主机配置文件路径:/etc/mysql/conf.d -v 主机数据文件路径:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw --name 容器名字 mysql:tag</span><br><span class="line"></span><br><span class="line">#此时在本地新建数据库时，容器也会创建对应的数据库；若将容器内mysql删除，挂载到本地的数据卷依旧没有丢失，实现了容器数据持久化功能</span><br></pre></td></tr></table></figure><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 匿名挂载（在-v中只写了容器内的路径，没有写容器外的路径）</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"># 查看所有的volume(卷)的情况</span><br><span class="line">docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME # 容器内的卷名(匿名卷挂载)</span><br><span class="line">local               21159a8518abd468728cdbe8594a75b204a10c26be6c36090cde1ee88965f0d0</span><br><span class="line">local               b17f52d38f528893dd5720899f555caf22b31bf50b0680e7c6d5431dbda2802c</span><br><span class="line"></span><br><span class="line"># 具名挂载 -P:表示随机映射端口</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line"># 查看所有的volume(卷)的情况</span><br><span class="line">$ docker volume ls                  </span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               21159a8518abd468728cdbe8594a75b204a10c26be6c36090cde1ee88965f0d0</span><br><span class="line">local               b17f52d38f528893dd5720899f555caf22b31bf50b0680e7c6d5431dbda2802c</span><br><span class="line">local               juming-nginx #多了一个名字</span><br></pre></td></tr></table></figure><p>所有的docker容器内的卷，未指定目录时都是在**/var/lib/docker/volumes/自定义的卷名/_data**下</p><p><strong>如果指定了目录，docker volume ls 是查看不到的</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjExNDIzMTQzNS5wbmc?x-oss-process=image/format,png"></p><h4 id="区分三种挂载方式"><a href="#区分三种挂载方式" class="headerlink" title="区分三种挂载方式"></a>区分三种挂载方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 三种挂载： 匿名挂载、具名挂载、指定路径挂载</span><br><span class="line">-v 容器内路径#匿名挂载</span><br><span class="line">-v 卷名：容器内路径  #具名挂载</span><br><span class="line">-v /宿主机路径：容器内路径 #指定路径挂载 docker volume ls 是查看不到的</span><br></pre></td></tr></table></figure><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 通过 -v 容器内路径： ro rw 改变读写权限</span><br><span class="line">ro #readonly 只读rw #readwrite 可读可写</span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx</span><br><span class="line"></span><br><span class="line"># ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p><strong>Dockerfile 就是用来构建docker镜像的构建文件</strong></p><p>镜像是一层一层的，脚本是一个个的命令，每个命令都是一层</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文件中的内容： 指令(大写) + 参数</span><br><span class="line">$ vim dockerfile1</span><br><span class="line">    FROM centos # 当前镜像是以centos为基础的</span><br><span class="line"></span><br><span class="line">    VOLUME [&quot;volume01&quot;,&quot;volume02&quot;] # 挂载卷的卷目录列表(多个目录)</span><br><span class="line"></span><br><span class="line">    CMD echo &quot;-----end-----&quot;# 输出一下用于测试</span><br><span class="line">    CMD /bin/bash# 默认走bash控制台</span><br><span class="line">    </span><br><span class="line">$ docker build -f dockerfile1 -t dockerfiletest/centos .</span><br><span class="line"># -f 代表当前文件的地址（这里是当前目录下的dockerfile1）</span><br><span class="line"># -t 代表target，指目标目录（dockerfiletest镜像名前不能加斜杠&#x27;/&#x27;）</span><br><span class="line"># .表示生成在当前目录下</span><br></pre></td></tr></table></figure><h4 id="容器间的数据同步"><a href="#容器间的数据同步" class="headerlink" title="容器间的数据同步"></a>容器间的数据同步</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建docker01</span><br><span class="line">docker run -it --name docker01 dockerfiletest/centos</span><br><span class="line"># 查看docker01的内容</span><br><span class="line">ls</span><br><span class="line">bin  home   lost+foundopt   run   sys  var</span><br><span class="line">dev  lib    mediaproc  sbin  tmp  volume01</span><br><span class="line">etc  lib64  mntroot  srv   usr  volume02</span><br><span class="line"># 不关闭该容器退出</span><br><span class="line">ctrl + Q + P</span><br><span class="line"></span><br><span class="line"># 创建docker02：并让docker02继承docker01</span><br><span class="line">docker run -it --name docker02 --volumes-from docker01 dockerfiletest/centos</span><br><span class="line"># 查看docker02内容</span><br><span class="line">ls</span><br><span class="line">bin  home   lost+foundopt   run   sys  var</span><br><span class="line">dev  lib    mediaproc  sbin  tmp  volume01</span><br><span class="line">etc  lib64  mntroot  srv   usr  volume02</span><br><span class="line"></span><br><span class="line">#在docker01的volume01下创建docker01.txt；在docker02中查看文件已同步</span><br><span class="line"></span><br><span class="line"># 新建一个docker03同样继承docker01，发现volume01卷下也有docker01.txt</span><br><span class="line">docker run -it --name docker03 --volumes-from docker01 dockerfiletest/centos</span><br><span class="line"></span><br><span class="line"># 删除docker01，发现docker02和docker03中没有删除</span><br></pre></td></tr></table></figure><h5 id="实现多个mysql的数据共享"><a href="#实现多个mysql的数据共享" class="headerlink" title="实现多个mysql的数据共享"></a>实现多个mysql的数据共享</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line">docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=root --name mysql02 --volumes-from mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line"># 这个时候可以实现两个容器数据同步</span><br></pre></td></tr></table></figure><p><strong>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止；一旦持久化到了本地，此时本地的数据是不会删除的</strong></p><h4 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h4><h5 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h5><ol><li>每个保留关键字（指令）都必须是大写字母</li><li>执行顺序从上到下</li><li>#表示注释</li><li>每个指令都会创建提交一个新的镜像层，并提交</li></ol><h5 id="DockerFile指令"><a href="#DockerFile指令" class="headerlink" title="DockerFile指令"></a>DockerFile指令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM#from：基础镜像，一切从这里开始构建</span><br><span class="line">MAINTAINER#maintainer：镜像作者，姓名+邮箱</span><br><span class="line">RUN#run：镜像构建时需要运行的命令</span><br><span class="line">ADD#add：步骤，tomcat镜像，这个tomcat压缩包！添加内容 添加同目录</span><br><span class="line">WORKDIR#workdir：镜像的工作目录</span><br><span class="line">VOLUME#volume：挂载的目录</span><br><span class="line">EXPOSE#expose：保留端口配置</span><br><span class="line">CMD#cmd：指定该容器启动时要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT#entrypoint：指定容器启动时运行命令，可以追加命令</span><br><span class="line">ONBUILD#onbuild：构建被继承DockerFile时运行onbuild</span><br><span class="line">COPY#copy：类似ADD，将文件拷贝到镜像中</span><br><span class="line">ENV#env：构建时设置环境变量</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/02/03/pSsY11S.png"></p><h5 id="镜像发布"><a href="#镜像发布" class="headerlink" title="镜像发布"></a>镜像发布</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE3MTE1NTY2Ny5wbmc?x-oss-process=image/format,png"></p><h3 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h3><h4 id="理解Docker-0"><a href="#理解Docker-0" class="headerlink" title="理解Docker 0"></a>理解Docker 0</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNTIyMzIzNjc3Mi5wbmc?x-oss-process=image/format,png"></p><h5 id="docker如何处理容器网络访问"><a href="#docker如何处理容器网络访问" class="headerlink" title="docker如何处理容器网络访问"></a>docker如何处理容器网络访问</h5><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="连接docker中的mysql"><a href="#连接docker中的mysql" class="headerlink" title="连接docker中的mysql"></a>连接docker中的mysql</h3><h4 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h4><h5 id="Docker下载mysql"><a href="#Docker下载mysql" class="headerlink" title="Docker下载mysql"></a>Docker下载mysql</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><h5 id="启动mysql实例"><a href="#启动mysql实例" class="headerlink" title="启动mysql实例"></a>启动mysql实例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mysql_Docker -p 13306:3306 -v /mydata/mysql/log:/var/log/mysql -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -e MYSQL_ROOT_PASSWARD=root -d mysql</span><br><span class="line"></span><br><span class="line"># --name为mysql的实例设置别名-p 13306对外暴露的端口，3306内部端口</span><br><span class="line"># -e MYSQL_ROOT_PASSWORD 初始化设置mysql登录密码 -d 表示后台运行</span><br><span class="line"># 最后的mysql是镜像名称-v为挂载（etc为配置文件，log为日志文件，lib为配置文件，将mysql容器内部文件挂载到linux中，每次变动都会在linux显示，而不用进入到容器内部查看）</span><br></pre></td></tr></table></figure><h5 id="进入容器内部-mysql-Docker为容器名字"><a href="#进入容器内部-mysql-Docker为容器名字" class="headerlink" title="进入容器内部(mysql_Docker为容器名字)"></a>进入容器内部(mysql_Docker为容器名字)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql_Docker bash</span><br></pre></td></tr></table></figure><h5 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p root</span><br></pre></td></tr></table></figure><h5 id="创建用户授予权限"><a href="#创建用户授予权限" class="headerlink" title="创建用户授予权限"></a>创建用户授予权限</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user test@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">grant all on *.* to test@&#x27;%&#x27;;</span><br><span class="line">flush privileges;#刷新权限</span><br></pre></td></tr></table></figure><h5 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld.service#开启防火墙</span><br><span class="line">firewall-cmd --list-ports#查看开启的端口号</span><br><span class="line">firewall-cmd --zone=public --add-port=13306/tcp --permanent</span><br><span class="line">#永久开启一个端口号</span><br><span class="line">firewall-cmd --reload#重启防火墙</span><br><span class="line">firewall-cmd --list-ports#再次查看端口号是否开启</span><br></pre></td></tr></table></figure><h5 id="本地可以使用docker地址加暴露ip连接mysql"><a href="#本地可以使用docker地址加暴露ip连接mysql" class="headerlink" title="本地可以使用docker地址加暴露ip连接mysql"></a>本地可以使用docker地址加暴露ip连接mysql</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip addr#查看虚拟机ip地址，使用工具连接ip加端口</span><br></pre></td></tr></table></figure><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="docker启动mysql失败"><a href="#docker启动mysql失败" class="headerlink" title="docker启动mysql失败"></a>docker启动mysql失败</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@ecs-kc1-small-1-linux:~# docker run -p 3306:3306 mysql:8-oracle</span><br><span class="line">2022-03-05 13:40:49+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.28-1.el8 started.</span><br><span class="line">2022-03-05 13:40:50+00:00 [Note] [Entrypoint]: Switching to dedicated user &#x27;mysql&#x27;</span><br><span class="line">2022-03-05 13:40:50+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.28-1.el8 started.</span><br><span class="line">2022-03-05 13:40:50+00:00 [ERROR] [Entrypoint]: Database is uninitialized and password option is not specified</span><br><span class="line">    You need to specify one of the following:</span><br><span class="line">    - MYSQL_ROOT_PASSWORD</span><br><span class="line">    - MYSQL_ALLOW_EMPTY_PASSWORD</span><br><span class="line">    - MYSQL_RANDOM_ROOT_PASSWORD</span><br></pre></td></tr></table></figure><p><strong>此问题的原因是启动命令中缺少密码，由于使用的是Linux的root用户，因此将启动命令修改为如下所示：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -d -it -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br></pre></td></tr></table></figure><h3 id="连接docker中的elasticsearch7-6-2"><a href="#连接docker中的elasticsearch7-6-2" class="headerlink" title="连接docker中的elasticsearch7.6.2"></a>连接docker中的elasticsearch7.6.2</h3><h4 id="主要步骤-1"><a href="#主要步骤-1" class="headerlink" title="主要步骤"></a>主要步骤</h4><h5 id="docker下载相关镜像"><a href="#docker下载相关镜像" class="headerlink" title="docker下载相关镜像"></a>docker下载相关镜像</h5><p><code>docker pull elasticsearch:7.6.2</code></p><h5 id="创建持久化文件"><a href="#创建持久化文件" class="headerlink" title="创建持久化文件"></a>创建持久化文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /mydata/elasticsearch/config</span><br><span class="line">mkdir -p /mydata/elasticsearch/data</span><br></pre></td></tr></table></figure><h5 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h5><p><code>echo &quot;http.host: 0.0.0.0&quot; &gt;&gt; /mydata/elasticsearch/config/elasticsearch.yml</code></p><h5 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xms84m -Xmx512m&quot; \</span><br><span class="line">-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-d elasticsearch:7.6.2</span><br><span class="line"></span><br><span class="line"># -p:端口映射</span><br><span class="line"># -e discovery.type=single-node 单点模式启动</span><br><span class="line"># -e ES_JAVA_OPTS=&quot;-Xms84m -Xmx512m&quot;：设置启动占用的内存范围（实验环境启动后可能因为云服务器内存过小而占满）</span><br><span class="line"># -v 目录挂载</span><br><span class="line"># -d 后台运行</span><br></pre></td></tr></table></figure><h5 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h5><h6 id="下载同版本镜像"><a href="#下载同版本镜像" class="headerlink" title="下载同版本镜像"></a>下载同版本镜像</h6><p><code>docker pull kibana:7.6.2</code></p><h6 id="初始化配置-1"><a href="#初始化配置-1" class="headerlink" title="初始化配置"></a>初始化配置</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /mydata/kibana</span><br><span class="line">touch /mydata/kibana/kibana.yml</span><br><span class="line">vim /mydata/kibana/kibana.yml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> <span class="string">http://你的ip:9200</span></span><br></pre></td></tr></table></figure><h6 id="启动kibana"><a href="#启动kibana" class="headerlink" title="启动kibana"></a>启动kibana</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name kibana -v /mydata/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml -p 5601:5601 -d kibana:7.6.2 </span><br></pre></td></tr></table></figure><h4 id="常见问题-1"><a href="#常见问题-1" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="文件权限问题"><a href="#文件权限问题" class="headerlink" title="文件权限问题"></a>文件权限问题</h5><p>elasticsearch启动后使用docker ps查看发现未正常启动，查看启动日志</p><p><code>docker logs elasticsearch</code></p><p><img src="https://upload-images.jianshu.io/upload_images/23507229-dbe6ad70a59f98cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>发现是文件拒绝访问异常,为该文件夹设置所有用户都有读写执行权限</p><p><code>chmod -R 777 /mydata/elasticsearch/</code></p><p>重新启动elasticsearch</p><p><code>docker restart elasticsearch</code></p><h5 id="jdk版本过低"><a href="#jdk版本过低" class="headerlink" title="jdk版本过低"></a>jdk版本过低</h5><p>启动日志中也有可能报以下错误：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.</span><br></pre></td></tr></table></figure><p>原因是jdk版本过低，需要将jdk升级到9.0以上；去镜像网站下载jdk(这里是去华为云下载的)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line">wget https://repo.huaweicloud.com/java/jdk/9.0.1+11/jdk-9.0.1_linux-x64_bin.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar -zxvf tar -zxvf jdk-9.0.1_linux-x64_bin.tar.gz </span><br><span class="line"></span><br><span class="line"># 配置JAVA_HOME</span><br><span class="line">vim /etc/profile</span><br><span class="line"># 内容如下</span><br><span class="line">export JAVA_HOME=/usr/local/jdk-9.0.1</span><br><span class="line">export JRE_HOME=/usr/local/jdk-9.0.1/jre</span><br><span class="line">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line"></span><br><span class="line"># 删除原jdk环境</span><br><span class="line"># 此时执行java-version可能显示的还是jdk1.8</span><br><span class="line"># 执行which java，会输出一个目录，删除之</span><br><span class="line"># 执行which javac，也会输出一个目录，删除之</span><br><span class="line"># 执行 ln -s $JAVA_HOME/bin/java /usr/bin/java</span><br><span class="line"># 执行 ln -s $JAVA_HOME/bin/javac /usr/bin/javac</span><br><span class="line"># 执行 source /etc/profile再次查看java版本即可</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux笔记</title>
      <link href="/2023/02/03/linux%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/03/linux%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p><code>[Ctrl]-d</code>：可以用于取代exit的输入</p><h3 id="虚拟机目录"><a href="#虚拟机目录" class="headerlink" title="虚拟机目录"></a>虚拟机目录</h3><h4 id="目录含义"><a href="#目录含义" class="headerlink" title="目录含义"></a>目录含义</h4><p><code>/bin</code>：存放经常使用的命令</p><p><code>/home</code>：存放普通用户的主目录，一般该目录名是以用户的账号命名</p><p><code>/root</code>：该目录为系统管理员，也称作超级权限者的用户主目录</p><p><code>/boot</code>：Linux启动相关文件</p><p><code>/lib</code>：系统开机所需最基本的动态连接共享库，作用类似Windows里的DLL文件</p><p><code>/lost+found</code>：一般情况下是空的，当系统非法关机后存放了一些文件</p><p><code>/etc</code>：系统管理所需配置和子文件目录</p><p><code>/user</code>：用户应用程序和文件</p><p><code>/proc</code>：虚拟目录，系统内存映射，访问这个目录获取系统信息</p><p><code>/srv</code>：存放服务启动后所需数据</p><p><code>/sys</code>：该目录安装了2.6内核新出现的文件系统</p><p><code>/tmp</code>：存放临时文件</p><p><code>/mnt</code>：存放挂载文件</p><p><code>/opt</code>：给主机额外安装软件的目录，即软件存放目录</p><p><code>/user/local</code>：软件安装后的目标目录，一般是编译源码的方式安装的程序</p><h4 id="颜色含义"><a href="#颜色含义" class="headerlink" title="颜色含义"></a>颜色含义</h4><p>蓝色表示目录，白色表示文件，红色表示压缩文件，绿色表示可执行权限</p><h3 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h3><h4 id="四种模式"><a href="#四种模式" class="headerlink" title="四种模式"></a>四种模式</h4><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><p>使用Vim编辑器时默认处于命令模式，该模式下可以移动光标位置，可以通过快捷键对文件内容进行复制、粘贴、删除等操作</p><h5 id="编辑模式或输入模式"><a href="#编辑模式或输入模式" class="headerlink" title="编辑模式或输入模式"></a>编辑模式或输入模式</h5><p>在命令模式下输入小写字母a或i即可进入编辑模式</p><h5 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h5><p>在命令模式下输入：即可进入末行模式，可以在末行输入命令对文件进行查找、替换、保存、退出等操作</p><h5 id="可视化模式"><a href="#可视化模式" class="headerlink" title="可视化模式"></a>可视化模式</h5><p>可以做一些列选操作（通过方向键选择某些列的内容，类似Windows鼠标刷黑）</p><h4 id="四种模式的关系"><a href="#四种模式的关系" class="headerlink" title="四种模式的关系"></a>四种模式的关系</h4><p><img src="https://s1.ax1x.com/2023/02/03/pSsnXVS.png"></p><h4 id="各模式下的相关操作"><a href="#各模式下的相关操作" class="headerlink" title="各模式下的相关操作"></a>各模式下的相关操作</h4><h5 id="命令模式-1"><a href="#命令模式-1" class="headerlink" title="命令模式"></a>命令模式</h5><h6 id="如何进入命令模式"><a href="#如何进入命令模式" class="headerlink" title="如何进入命令模式"></a>如何进入命令模式</h6><p>当使用vim命令直接打开某个文件时，默认进入的就是命令模式；若处于其它模式时连续按两次Esc键也可以返回命令模式</p><h6 id="命令模式下能做什么"><a href="#命令模式下能做什么" class="headerlink" title="命令模式下能做什么"></a>命令模式下能做什么</h6><p>移动光标、复制粘贴、剪切粘贴删除、撤销与恢复</p><h6 id="移动光标到首行或末行"><a href="#移动光标到首行或末行" class="headerlink" title="移动光标到首行或末行"></a>移动光标到首行或末行</h6><p>移动光标到首行 =&gt; gg</p><p>移动光标到末行 =&gt; G</p><h6 id="翻屏"><a href="#翻屏" class="headerlink" title="翻屏"></a>翻屏</h6><p>向上翻屏：<code>ctrl + b（before）或 PgUp</code></p><p>向下翻屏：<code>ctrl + f（after）或 PgDn</code></p><p>向上翻半屏：<code>ctrl + u（up）</code></p><p>向下翻半屏：<code>ctrl + d（down）</code></p><h6 id="快速定位光标到指定行"><a href="#快速定位光标到指定行" class="headerlink" title="快速定位光标到指定行"></a>快速定位光标到指定行</h6><p>行号 + G，如150G代表快速移动光标到第150行</p><h6 id="复制-粘贴"><a href="#复制-粘贴" class="headerlink" title="复制/粘贴"></a>复制/粘贴</h6><p>复制当前行（光标所在那一行）    按键：yy    </p><p>从当前行开始复制指定行数，如复制5行，5yy</p><p>粘贴：在想要粘贴的地方按下p【将粘贴光标所在行的下一行】，如果想粘贴光标所在行之前可以使用P键</p><h6 id="剪切-删除"><a href="#剪切-删除" class="headerlink" title="剪切/删除"></a>剪切/删除</h6><p>在Vim中，剪切和删除都是<code>dd</code>，若未用p进行粘贴就是删除；粘贴了就是剪切</p><p>剪切/删除光标所在当前行之后的内容，但是删除之后下一行不上移按键：D（删除之后当前行会变成空白行）</p><h6 id="撤销-恢复"><a href="#撤销-恢复" class="headerlink" title="撤销/恢复"></a>撤销/恢复</h6><p>撤销：u（undo）</p><p>恢复：ctrl + r恢复（取消）之前的撤销操作【重做，redo】</p><h5 id="末行模式-1"><a href="#末行模式-1" class="headerlink" title="末行模式"></a>末行模式</h5><h6 id="如何进入末行模式"><a href="#如何进入末行模式" class="headerlink" title="如何进入末行模式"></a>如何进入末行模式</h6><p>进入末行模式的方法只有一个，在命令模式下使用<code>:</code>或<code>/</code>的方式进入</p><h6 id="末行模式下能做什么"><a href="#末行模式下能做什么" class="headerlink" title="末行模式下能做什么"></a>末行模式下能做什么</h6><p>文件保存、退出、查找与替换、显示行号、paste模式等</p><h6 id="查找-搜索"><a href="#查找-搜索" class="headerlink" title="查找/搜索"></a>查找/搜索</h6><p>在命令模式下输入<code>/</code>，进入末行模式后输入要查找或搜索的关键词</p><p>若在一个文件中存在多个满足条件的结果。在搜索结果中切换上/下一个结果：N/n（大写N代表上一个结果，小写n代表next）</p><p>若不需要高亮，则在末行模式输入<code>:noh</code>【no highlight】</p><h6 id="文件内容的替换"><a href="#文件内容的替换" class="headerlink" title="文件内容的替换"></a>文件内容的替换</h6><p>第一步：首先进入末行模式</p><p>第二步：根据需求替换内容</p><p>只替换光标所在行第一个满足的结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:s/要替换的关键词/替换后的关键词+回车</span><br></pre></td></tr></table></figure><p>替换光标所在行所有满足条件的结果（替换多次，只能替换一行）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:s/要替换的关键词/替换后的关键词/gg=global全局替换</span><br></pre></td></tr></table></figure><p>针对整个文档中的所有行进行替换，只替换每一行中满足条件的第一个结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:%s/要替换的关键词/替换后的关键词</span><br></pre></td></tr></table></figure><p>针对整个文档中的所有关键词进行替换（只要满足条件就进行替换操作）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:%s/要替换的关键词/替换后的关键词/g</span><br></pre></td></tr></table></figure><h6 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:set nu</span><br><span class="line">【nu = number】，行号</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">取消行号 =&gt; :set nonu</span><br></pre></td></tr></table></figure><h6 id="set-paste模式"><a href="#set-paste模式" class="headerlink" title="set paste模式"></a>set paste模式</h6><p>为什么要使用paste模式？</p><p>在终端Vim中粘贴代码时会发现插入的代码有多余的缩进，且逐行累加。原因是终端把粘贴的文本存入键盘缓存（Keyboard Buffer）中，Vim则把这些内容作为用户的键盘输入来处理。导致在遇到换行符的时候，如果Vim开启了自动缩进，就会默认的把上一行缩进插入到下一行的开头，最终使代码变乱。</p><p>在粘贴数据之前开启paste模式：<code>:set paste</code></p><p>在粘贴完毕后关闭paste模式：<code>:set nopaste</code></p><h5 id="可视化模式-1"><a href="#可视化模式-1" class="headerlink" title="可视化模式"></a>可视化模式</h5><h6 id="如何进入可视化模式"><a href="#如何进入可视化模式" class="headerlink" title="如何进入可视化模式"></a>如何进入可视化模式</h6><p>在命令模式中，按<code>ctrl+v（可视块）</code>或<code>ctrl+V（可视行）</code>或<code>v（可视）</code>，然后根据方向键选择需要复制的区块，按下<code>y</code>进行复制，最后按下<code>p</code>粘贴</p><p>退出可视模式按下<code>Esc</code></p><h4 id="Vim实用功能"><a href="#Vim实用功能" class="headerlink" title="Vim实用功能"></a>Vim实用功能</h4><h5 id="代码着色"><a href="#代码着色" class="headerlink" title="代码着色"></a>代码着色</h5><p>通过<code>:syntax on</code>或<code>:syntax off</code> 开启或关闭代码着色功能</p><h5 id="异常退出解决方案"><a href="#异常退出解决方案" class="headerlink" title="异常退出解决方案"></a>异常退出解决方案</h5><p>突然关闭终端或断电下退出的情况为异常退出，文件一般为<code>.文件名称.swp</code></p><p>解决办法：将交换文件直接删除</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">添加用户：useradd 用户名</span><br><span class="line">给用户指定密码：passwd 用户名</span><br><span class="line">删除用户（保留家目录）：userdel 用户名</span><br><span class="line">删除用户（删除所有目录）：userdel -r 用户名</span><br><span class="line">查询用户信息：id 用户名</span><br><span class="line">查看当前登录用户：who am i</span><br></pre></td></tr></table></figure><h3 id="CentOS7找回root密码"><a href="#CentOS7找回root密码" class="headerlink" title="CentOS7找回root密码"></a>CentOS7找回root密码</h3><ol><li>启动系统，进入开机页面，按<code>e</code>键进入编辑页面</li><li>光标向下移动，找到“Linux16”开头的行数，行末输入<code>init=/bin/sh</code>，接着按<code>ctrl+x</code>进入单用户模式</li><li>在光标闪烁位置输入：mount -o remount,rw /，完成后回车</li><li>接着输入passwd，完成后回车，输入密码后回车，再次输入密码，修改成功后会显示passwd…</li><li>接着在光标位置输入：touch / .autorelabel，完成后回车，等待系统重启，新密码生效</li></ol><h3 id="开关机问题"><a href="#开关机问题" class="headerlink" title="开关机问题"></a>开关机问题</h3><p><code>sync</code>：将内存中尚未更新的数据写入硬盘中；目前的shutdown/reboot/halt等指令均在关机前进行了sync</p><p><code>shutdown</code>：只有root拥有该权限</p><table><thead><tr><th>选项与参数</th><th>说明</th></tr></thead><tbody><tr><td>-t sec</td><td>-t后面加秒数，即几秒后关机</td></tr><tr><td>-k</td><td>不是真的关机，只是发送警告讯息</td></tr><tr><td>-r</td><td>在系统服务停掉后重新启动（常用）</td></tr><tr><td>-h</td><td>在系统服务停掉后立即关机</td></tr><tr><td>-n</td><td>不经过init程序，直接以shutdown功能关机</td></tr><tr><td>-f</td><td>关机并开机后，强制略过fsck的磁盘检查</td></tr><tr><td>-c</td><td>取消已经在进行的shutdown指令内容</td></tr></tbody></table><p><code>忘记root密码</code>：</p><ol><li><p>启动虚拟机并按e进入下列页面</p><p><img src="https://img-blog.csdnimg.cn/4426447226b8445b8df7c8e3ee63a1fb.png"></p></li><li><p>用键盘上下移动光标，到linuix…UTF-8后面加上rd.break,按下Ctrl+x</p><p><img src="https://img-blog.csdnimg.cn/f6ca6a8701094d31a4f55380a88f9b63.png"></p></li><li><p>接下来进入switch_root页面里，输入</p><p># mount -o remount,rw /sysroot</p><p># chroot /sysroot</p></li><li><p>之后就会进入sh-4.2#的页面输入passwd，输入你的新密码（直接输入就行了，不显示字符）</p><p><img src="https://img-blog.csdnimg.cn/181e7534a8804eb4b9acb5fdf0897941.png"></p></li><li><p>输入touch / .autorelabel</p><p>输入exit回到switch_root页面</p><p>再次输入exit</p></li></ol><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h3><h4 id="使用者与群组"><a href="#使用者与群组" class="headerlink" title="使用者与群组"></a>使用者与群组</h4><h5 id="所有者（User）"><a href="#所有者（User）" class="headerlink" title="所有者（User）"></a>所有者（User）</h5><p>可以对所属档案设定权限</p><h5 id="群组（Group）"><a href="#群组（Group）" class="headerlink" title="群组（Group）"></a>群组（Group）</h5><p>方便组内成员互相修改对方的数据，隔绝组外成员</p><h5 id="其他人（Others）"><a href="#其他人（Others）" class="headerlink" title="其他人（Others）"></a>其他人（Others）</h5><p>不属于文件所有者或文件所属群组的用户</p><h5 id="查看文件属性"><a href="#查看文件属性" class="headerlink" title="查看文件属性"></a>查看文件属性</h5><p><code>ls [-al]</code>显示文件名及相关属性</p><p><img src="https://s1.ax1x.com/2023/02/03/pSsnqDf.png"></p><p><img src="https://s1.ax1x.com/2023/02/03/pSsn7vt.png"></p><ul><li>第一个字符代表文件类型[目录、档案或链接文件等]<ul><li>当为[d]则是目录</li><li>当为[-]则是档案</li><li>若为[|]则表示为连结档（link file）</li><li>若是[b]则表示为装置文件内的可供储存的接口设备（可随机存取装置）</li><li>若是[c]则表示为装置文件内的串行端口设备，例如键盘、鼠标（一次性读取装置）</li></ul></li></ul><h3 id="文件目录指令"><a href="#文件目录指令" class="headerlink" title="文件目录指令"></a>文件目录指令</h3><h4 id="less指令"><a href="#less指令" class="headerlink" title="less指令"></a>less指令</h4><p>显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率</p><p>分屏查看文件内容：less 要查看的文件</p><h4 id="指令-gt-和指令-gt-gt"><a href="#指令-gt-和指令-gt-gt" class="headerlink" title="指令&gt;和指令&gt;&gt;"></a>指令&gt;和指令&gt;&gt;</h4><p>输出重定向（覆盖）&gt;，追加&gt;&gt;</p><p>将列表内容覆盖写入文件：ls -l &gt; 文件</p><p>将列表内容追加写入文件：ls -al &gt;&gt; 文件</p><p>将文件1内容覆盖到文件2：cat 文件1 &gt; 文件2</p><p>将内容追加到文件：echo 内容 &gt;&gt; 文件</p><h4 id="ln指令"><a href="#ln指令" class="headerlink" title="ln指令"></a>ln指令</h4><p>给源文件创建一个链接：ln -s [源文件或目录] [链接名]</p><h4 id="history指令"><a href="#history指令" class="headerlink" title="history指令"></a>history指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看所有历史命令：history查看最近5条命令：history 5</span><br><span class="line">执行历史编号为5的命令：!5</span><br></pre></td></tr></table></figure><h3 id="日期指令"><a href="#日期指令" class="headerlink" title="日期指令"></a>日期指令</h3><p>指定格式显示年月日时分秒：<code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code></p><p>设置日期：date -s 字符串日期</p><p>查看日历：cal 【选项】，不指定选项，默认当前月日历</p><h3 id="查找指令"><a href="#查找指令" class="headerlink" title="查找指令"></a>查找指令</h3><h4 id="find指令"><a href="#find指令" class="headerlink" title="find指令"></a>find指令</h4><p>find从指定目录向下递归遍历各个子目录，将满足条件的文件或目录显示在终端</p><p><strong>常用选项：</strong></p><p>-name查找指定文件<code>find . -name startup.sh</code></p><p>使用正则表达式通配符查找匹配的文件<code>find . -name *.sh</code></p><p>-type查找指定类型的文件<code>find ./webapps/ -type d</code></p><p>查找最近修改过的文件（最近2天内有更新的文件）<code>find ./logs -mtime -2</code></p><p>查找指定目录深度下的文件<code>find /var/log/ -mindepth 2 -name *.log</code></p><p>根据inode删除文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先通过ls -li查找inodell -i</span><br><span class="line">然后通过find -inum inode号 -delete指定文件</span><br><span class="line">（此方法对于删除上传到服务器后文件名乱码的文件非常有用）</span><br><span class="line">find -inum 2663645 -delete</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021040115050495.png"></p><p>清除查找到的超过指定时间的日志文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@test1 apache-tomcat-9.0.44]# find ./logs/ -mtime +5 -ok rm &#123;&#125; ;</span><br><span class="line">&lt; rm … ./logs/catalina.2021-03-26.log &gt; ? y</span><br><span class="line">&lt; rm … ./logs/localhost.2021-03-26.log &gt; ? y</span><br><span class="line">&lt; rm … ./logs/manager.2021-03-26.log &gt; ? y</span><br><span class="line">&lt; rm … ./logs/host-manager.2021-03-26.log &gt; ? y</span><br><span class="line">&lt; rm … ./logs/localhost_access_log.2021-03-26.txt &gt; ? y</span><br></pre></td></tr></table></figure><p>查找当前目录下具有指定权限的文件并获取完整路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用perm参数查找指定权限的文件</span><br><span class="line">find /home/wuhs/apache-tomcat-9.0.44/bin -type f -perm 750 </span><br><span class="line">-exec ls -l &#123;&#125; \;</span><br><span class="line">-rwxr-x— 1 wuhs wuhs 25294 Mar 5 05:52 /home/wuhs/apache-tomcat-9.0.44/bin/catalina.sh</span><br><span class="line">-rwxr-x— 1 wuhs wuhs 1997 Mar 5 05:52 /home/wuhs/apache-tomcat-9.0.44/bin/ciphers.sh</span><br><span class="line">-rwxr-x— 1 wuhs wuhs 1922 Mar 5 05:52 /home/wuhs/apache-tomcat-9.0.44/bin/configtest.sh</span><br><span class="line">-rwxr-x— 1 wuhs wuhs 9100 Mar 5 05:52 /home/wuhs/apache-tomcat-9.0.44/bin/daemon.sh</span><br><span class="line">-rwxr-x— 1 wuhs wuhs 1965 Mar 5 05:52 /home/wuhs/apache-tomcat-9.0.44/bin/digest.sh</span><br><span class="line">-rwxr-x— 1 wuhs wuhs 3382 Mar 5 05:52 /home/wuhs/apache-tomcat-9.0.44/bin/makebase.sh</span><br><span class="line">-rwxr-x— 1 wuhs wuhs 3708 Mar 5 05:52 /home/wuhs/apache-tomcat-9.0.44/bin/setclasspath.sh</span><br><span class="line">-rwxr-x— 1 wuhs wuhs 1902 Mar 5 05:52 /home/wuhs/apache-tomcat-9.0.44/bin/shutdown.sh</span><br><span class="line">-rwxr-x— 1 wuhs wuhs 1904 Mar 5 05:52 /home/wuhs/apache-tomcat-9.0.44/bin/startup.sh</span><br><span class="line">-rwxr-x— 1 wuhs wuhs 5540 Mar 5 05:52 /home/wuhs/apache-tomcat-9.0.44/bin/tool-wrapper.sh</span><br><span class="line">-rwxr-x— 1 wuhs wuhs 1908 Mar 5 05:52 /home/wuhs/apache-tomcat-9.0.44/bin/version.sh</span><br></pre></td></tr></table></figure><p>查找指定用户的文件<code>find ./webapps/ -user wuhs -type f -print</code></p><p>查找指定大小的文件<code>find . -size +1M -type f</code></p><h5 id="使用语法及参数说明"><a href="#使用语法及参数说明" class="headerlink" title="使用语法及参数说明"></a>使用语法及参数说明</h5><h6 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find [路径] [表达式选项] [行动]</span><br></pre></td></tr></table></figure><h6 id="常用表达式选项参数说明"><a href="#常用表达式选项参数说明" class="headerlink" title="常用表达式选项参数说明"></a>常用表达式选项参数说明</h6><table><thead><tr><th>选项</th><th>参数说明</th></tr></thead><tbody><tr><td>-mount，-xdev</td><td>只检查和指定目录在同一文件系统下的文件</td></tr><tr><td>-(a/c)min n</td><td>在过去n分钟内被(读取/修改)过</td></tr><tr><td>-(a/c)newer file</td><td>比文件file更晚被(读取/修改)过的文件</td></tr><tr><td>-(a/c)time n</td><td>在过去n天内被(读取/修改)过的文件</td></tr><tr><td>-empty</td><td>空的文件-gid n or -group name</td></tr><tr><td>-ipath p，-path p</td><td>路径名称符合p的文件，ipath会忽略大小写</td></tr><tr><td>-name name，-iname name</td><td>文件名称符合name的文件，iname会忽略大小写</td></tr><tr><td>-size n</td><td>文件大小是n单位，b代表512位元组的区块，c表示字元数，k 表示 kilo bytes，w 是二个位元组</td></tr><tr><td>-type b/d/c/p/l/f</td><td>块设备、目录、字符设备、管道、符号链接、普通文件</td></tr><tr><td>-perm</td><td>按执行权限查找</td></tr><tr><td>-user username</td><td>按文件属主查找</td></tr><tr><td>-group groupname</td><td>按组来查找</td></tr><tr><td>-depth</td><td>指定查找目录深度</td></tr><tr><td>-follow</td><td>若遇到符号链接文件，就跟踪链接所指的文件</td></tr><tr><td>-prune</td><td>忽略某个目录</td></tr><tr><td>-maxdepth</td><td>指定查找目录最大深度</td></tr><tr><td>-mindepth</td><td>指定查找目录最小深度</td></tr><tr><td>-version</td><td>查看版本</td></tr><tr><td>-help</td><td>获取帮助</td></tr></tbody></table><h6 id="常用行动参数说明"><a href="#常用行动参数说明" class="headerlink" title="常用行动参数说明"></a>常用行动参数说明</h6><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-delete</td><td>删除查找到的文件</td></tr><tr><td>-exec command</td><td>对查找的文件执行command命令</td></tr><tr><td>-ok command</td><td>执行命令前需要进行确认</td></tr><tr><td>-printf</td><td>格式化输出</td></tr></tbody></table><h6 id="多条件组合参数"><a href="#多条件组合参数" class="headerlink" title="多条件组合参数"></a>多条件组合参数</h6><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-o</td><td>或者</td></tr><tr><td>-a</td><td>而且</td></tr><tr><td>-not</td><td>相反</td></tr></tbody></table><h4 id="locate指令"><a href="#locate指令" class="headerlink" title="locate指令"></a>locate指令</h4><p>快速查找指定文件的路径：locate 文件</p><p>由于该指令是基于数据库查询，第一次使用必须用updatedb指令创建数据库</p><h5 id="locate特点"><a href="#locate特点" class="headerlink" title="locate特点"></a>locate特点</h5><ol><li>locate是基于数据库的查询，速度很快，但不是实时的查询</li><li>locate是模糊查询</li><li>需要对文件的目录有rx的权限</li></ol><h5 id="locate语法"><a href="#locate语法" class="headerlink" title="locate语法"></a>locate语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-b --basename 仅匹配路径名的基本名称 </span><br><span class="line">-c --count只输出找到的数量</span><br><span class="line">-d --database DBPATH使用DBPATH指定的数据库，而不是默认数据库 /var/lib/mlocate/mlocate.db</span><br><span class="line">-e --existing仅打印当前现有文件的条目</span><br><span class="line">-1安全模式，使用者不会看到权限无法看到的档案，会使速度减慢，因为locate必须至实际的档案系统中取得档案的权限资料</span><br><span class="line">-0 --null在输出上带有NULL的单独条目</span><br><span class="line">-S --statistics不搜索条目，打印有关每个数据库的统计信息</span><br><span class="line">-q安静模式，不显示任何错误讯息</span><br><span class="line">-P --nofollow，-H检查文件存在时不要遵循尾随的符号链接</span><br><span class="line">-l --limit，-n LIMIT将输出（或计数）限制为LIMIT个条目</span><br><span class="line">-n至多显示n个输出</span><br><span class="line">-r --regexp REGEXP使用基本正则表达式</span><br><span class="line">-q，--quiet安静模式，不会显示任何错误信息</span><br><span class="line">-o指定资料库存的名称</span><br><span class="line">-h --help显示帮助</span><br><span class="line">-i --ignore-case忽略大小写</span><br><span class="line">-V --version显示版本信息</span><br></pre></td></tr></table></figure><h5 id="locate的日常使用"><a href="#locate的日常使用" class="headerlink" title="locate的日常使用"></a>locate的日常使用</h5><h6 id="查询passwd"><a href="#查询passwd" class="headerlink" title="查询passwd"></a>查询passwd</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@192 ~]# locate passwd -n 5</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd-</span><br><span class="line">/etc/pam.d/passwd</span><br><span class="line">/etc/security/opasswd</span><br><span class="line">/usr/bin/gpasswd</span><br></pre></td></tr></table></figure><h6 id="忽略大小写查询"><a href="#忽略大小写查询" class="headerlink" title="忽略大小写查询"></a>忽略大小写查询</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@192 ~]# locate -i CONF -n 5</span><br><span class="line">/ansible/roles/webserver/files/httpd.conf</span><br><span class="line">/boot/config-3.10.0-957.el7.x86_64</span><br><span class="line">/boot/grub2/i386-pc/configfile.mod</span><br><span class="line">/etc/GeoIP.conf</span><br><span class="line">/etc/GeoIP.conf.default</span><br></pre></td></tr></table></figure><h6 id="更新本地数据库"><a href="#更新本地数据库" class="headerlink" title="更新本地数据库"></a>更新本地数据库</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@192 ~]# updatedb -V</span><br><span class="line">updatedb (mlocate) 0.26</span><br><span class="line">Copyright (C) 2007 Red Hat, Inc. All rights reserved.</span><br><span class="line">This software is distributed under the GPL v.2.</span><br><span class="line"></span><br><span class="line">This program is provided with NO WARRANTY, to the extent permitted by law.</span><br></pre></td></tr></table></figure><h6 id="打印系统数据库的信息"><a href="#打印系统数据库的信息" class="headerlink" title="打印系统数据库的信息"></a>打印系统数据库的信息</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@192 ~]# locate  -S</span><br><span class="line">Database /var/lib/mlocate/mlocate.db:</span><br><span class="line">13,857 directories</span><br><span class="line">189,679 files</span><br><span class="line">11,268,161 bytes in file names</span><br><span class="line">4,331,363 bytes used to store database</span><br></pre></td></tr></table></figure><h4 id="which指令"><a href="#which指令" class="headerlink" title="which指令"></a>which指令</h4><p>用于查看给定命令的绝对路径</p><h5 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h5><h6 id="查找命令所在路径"><a href="#查找命令所在路径" class="headerlink" title="查找命令所在路径"></a>查找命令所在路径</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ which passwd</span><br><span class="line">/usr/bin/passwd</span><br></pre></td></tr></table></figure><h4 id="grep指令"><a href="#grep指令" class="headerlink" title="grep指令"></a>grep指令</h4><p><strong>文本搜索工具，根据用户指定的“模式（过滤条件）”对目标文本逐行进行匹配检查，打印匹配到的行</strong></p><p>从文本文件或管道数据流中筛选匹配的行和数据</p><table><thead><tr><th>参数选项</th><th>解释说明</th></tr></thead><tbody><tr><td>-v</td><td>排除匹配结果</td></tr><tr><td>-n</td><td>显示匹配行及行号</td></tr><tr><td>-i</td><td>不区分大小写</td></tr><tr><td>-c</td><td>只统计匹配的行数</td></tr><tr><td>-E</td><td>使用egrep命令</td></tr><tr><td>-color=auto</td><td>为grep过滤结果添加颜色</td></tr><tr><td>-w</td><td>只匹配过滤的单词</td></tr><tr><td>-o</td><td>只输出匹配的内容</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/e9f2c61829ce4dad8f0b19bdf6338819.png"></p><h3 id="压缩解压指令"><a href="#压缩解压指令" class="headerlink" title="压缩解压指令"></a>压缩解压指令</h3><h4 id="tar指令"><a href="#tar指令" class="headerlink" title="tar指令"></a>tar指令</h4><table><thead><tr><th>常用选项</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>制定压缩后的文件名</td></tr></tbody></table><p>压缩多文件：<code>tar -zcvf dc.tar.gz /hmoe/bbb/cat.txt /home/bbb/dog.txt </code></p><p>将bbb文件夹压缩成myb.tar.gz：<code>tar -zcvf myb.tar.gz bbb</code></p><p>将文件解压到当前目录：<code>tar -zxvf myb.tar.gz</code></p><p>将myb.tar.gz解压到tom目录下：<code>tar -zxvf myb.tar.gz -C tom</code></p><h3 id="Linux组"><a href="#Linux组" class="headerlink" title="Linux组"></a>Linux组</h3><h4 id="修改权限chmod"><a href="#修改权限chmod" class="headerlink" title="修改权限chmod"></a>修改权限chmod</h4><ul><li><p>方式一：+、-、=变更权限</p><p>u：所有者，g：所有组，o：其他用户，a：所有人</p><p><strong>给文件的所有者读写执行权限，给所在组读权限，给其他用户执行权限：</strong>chmod u=rwx,g=rx,o=x</p><p><strong>给其他人增加写权限：</strong>chmod o+w 文件/目录名/所有者/所有组</p><p><strong>该文件不让所有人执行：</strong>chmod a-x 文件/目录名/所有者/所有组</p></li><li><p>方式二：数字变更权限</p><p>r=4，w=2，x=1</p><p>chmod u=rwx,g=rx,o=x 文件/目录名 相当于 chmod 751 文件/目录名</p></li></ul><h4 id="修改文件所有者"><a href="#修改文件所有者" class="headerlink" title="修改文件所有者"></a>修改文件所有者</h4><p>改变所有者：chown    新所有者    文件/目录</p><p>改变所有者和所在组：chown    新所有者:新所有组    文件/目录</p><h3 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h3><p>任务调度：系统在某个时间执行特定的命令或程序</p><h4 id="任务调度分类"><a href="#任务调度分类" class="headerlink" title="任务调度分类"></a>任务调度分类</h4><ol><li><p>系统工作：某些重要工作周而复始的进行，如病毒查杀</p></li><li><p>个别用户工作：个别用户执行某些程序，如打开qq</p><p><strong>定时任务的设置：crontab [选项]</strong></p></li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>编辑crontab定时任务</td></tr><tr><td>-l</td><td>查询当前任务调度</td></tr><tr><td>-r</td><td>删除当前用户所有的定时任务</td></tr></tbody></table><h4 id="重启任务调度"><a href="#重启任务调度" class="headerlink" title="重启任务调度"></a>重启任务调度</h4><p>service crond restart</p><p>crontab -e 回车然后输入 */1 * * * * ls</p><table><thead><tr><th>*号位置</th><th>含义</th></tr></thead><tbody><tr><td>第一个</td><td>一小时当中的第几分钟（分钟）</td></tr><tr><td>第二个</td><td>一天当中的第几小时（小时）</td></tr><tr><td>第三个</td><td>一月当中的第几天（天）</td></tr><tr><td>第四个</td><td>一年中第几个月（月）</td></tr><tr><td>第五个</td><td>一周当中的星期几（范围0-7,0和7都表示星期天）</td></tr></tbody></table><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>表示任何时间，比如第一个*表示一小时每分钟都执行一次</td></tr><tr><td>,</td><td>表示不连续时间，比如”0 8,10 * * *”表示每天8点和10点执行</td></tr><tr><td>-</td><td>表示连续的时间范围，比如”0 2 * * 1-6”表示周一到周六凌晨2点执行一次命令</td></tr><tr><td>*/n</td><td>表示每隔多久执行一次，如”*/10 * * * *”表示每10分钟执行一次</td></tr></tbody></table><p><strong>特定时间执行案例</strong></p><p><img src="https://s1.ax1x.com/2023/02/03/pSsnLb8.png"></p><h4 id="at定时任务"><a href="#at定时任务" class="headerlink" title="at定时任务"></a>at定时任务</h4><p>at命令是一次性定时计划任务 ，at的守护进程atd会以后台模式检查作业队列运行。默认情况下, atd守护进程每60秒检查作业队列,有作业时,会检查作业运行时间,如果时间与当前时间四配，则运行此作业。at命令只执行一次。</p><p>在使用at命令的时候，一定要保证atd进程的启动，可以使用相关指令来查看</p><p>检测当前进程有哪些：ps -ef</p><p>检测acd进程是否在运行：ps -ef | grep atd</p><p>命令格式：at 【选项】 【时间】，ctrl+d结束at命令输入</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-m</td><td>当指定的任务被完成后,将给用户发送邮件,即使没有标准输出</td></tr><tr><td>-I</td><td>atq（显示系统中待执行的任务列表）的别名</td></tr><tr><td>-d</td><td>atrm（删除待执行任务队列中的任务）的别名</td></tr><tr><td>-v</td><td>显示任务将被执行的时间</td></tr><tr><td>-V</td><td>显示版本信息</td></tr><tr><td>-c</td><td>打印任务的内容到标准输出</td></tr><tr><td>-q 队列</td><td>使用指定的队列</td></tr><tr><td>-f 文件</td><td>从指定文件读入任务而不是从标准输入读入</td></tr><tr><td>-t 时间参数</td><td>以时间参数的形式提交要运行的任务</td></tr></tbody></table><h5 id="at指定时间方式"><a href="#at指定时间方式" class="headerlink" title="at指定时间方式"></a>at指定时间方式</h5><ol><li>hh:mm（小时：分钟）24小时制指定时间，若该时间已过，会到第二天执行</li><li>使用midnight (深夜)， noon (中午)， teatime (饮茶时间，一般是下午4点)等模糊词来指定时间</li><li>采用12小时计时制，在后面加上am (上午)或pm (下午)说明是上午还是下午</li><li>指定命令执行的具体日期，指定格式为month day(月日)或mm/dd/yy (月/日/年)或dd.mm.yy</li><li>使用相对计时法，如：now + 5 minutes</li><li>直接使用today、tomorrow指定完成命令的时间</li></ol><h6 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h6><p>一天后凌晨12点执行 /bin/ls home</p><p><img src="https://img-blog.csdnimg.cn/20210717194539556.png"></p><ul><li>统计/opt下文件个数：<code>ls -l /opt | grep &quot;^-&quot; | wc -l</code>（^-是以-开头的文件，wc统计个数）</li><li>统计/opt下目录个数：<code>ls -l /opt | grep &quot;^d&quot; | wc -l</code></li><li>统计/opt文件夹下文件的个数，包括子文件夹里的：<code>ls -lR /opt | grep &quot;^-&quot; | wc -l </code></li><li>统计/opt文件夹下目录的个数，包括子文件夹里的：<code>ls -lR /opt | grep &quot;^d&quot; | wc -l</code></li><li>以树状显示目录结构：<code>tree 目录</code>，注意默认是没有安装tree的，安装要root权限，安装tree命令：<code>yum install tree</code></li></ul><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>使用<code>ps 【选项】</code>查看当前系统哪些进程在执行</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>显示当前终端的所有进程信息</td></tr><tr><td>-u</td><td>以用户的格式显示进程信息</td></tr><tr><td>-x</td><td>显示后天进程运行的参数</td></tr><tr><td>-e</td><td>显示所有进程</td></tr><tr><td>-f</td><td>全格式</td></tr></tbody></table><h4 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h4><p>kill 【选项】 进程号</p><p>killall 进程名称</p><p>常用选项：-9：强迫进程立即停止</p><h4 id="查看进程树"><a href="#查看进程树" class="headerlink" title="查看进程树"></a>查看进程树</h4><p>pstree 【选项】</p><p>常用选项</p><p>-p：显示进程的PID</p><p>-u：显示进程的所属用户</p><h4 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h4><p>service 服务名 [start|stop|restart|reload|status]</p><p>在CentOS7后很多服务不再使用service，而是systemctl</p><p>查看service指令管理的服务：ls -l /etc/init.d</p><h4 id="chkconfig指令"><a href="#chkconfig指令" class="headerlink" title="chkconfig指令"></a>chkconfig指令</h4><p>用于检查、设置系统的各种服务</p><p>查看服务：chkconfig –list [| grep xxx]</p><p>给服务在指定运行级别下设置开关：chkconfig –level 5 服务名 on/off</p><h4 id="systemctl指令"><a href="#systemctl指令" class="headerlink" title="systemctl指令"></a>systemctl指令</h4><p>管理操作系统和服务的命令，是systemd（system daemon，操作系统服务管理器）交互的主要工具，实现的功能包含了service和chkconfig这两个命令的功能</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#例：查看当前防火墙的状况，关闭防火墙和启动防火墙</span><br><span class="line">1、systemctl status firewalld.service</span><br><span class="line">2、systemctl stop firewalld.service</span><br><span class="line">3、systemctl start firewalld.service</span><br></pre></td></tr></table></figure><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p><img src="https://s1.ax1x.com/2023/02/03/pSsnbKP.png"></p><p>防火墙开启时xshell访问linux需要打开22端口号，关闭后可以直接访问</p><h4 id="firewall指令"><a href="#firewall指令" class="headerlink" title="firewall指令"></a>firewall指令</h4><p>打开端口：firewall-cmd –permanent –add-port=端口号/协议</p><p>关闭端口：firewall-cmd –permanent –remove-port=端口号/协议</p><p>重新载入才能生效：firewall-cmd –reload</p><p>查看所有开放端口：firewall-cmd –zone=public –list-port</p><p>查询端口是否开放：firewall-cmd –query-port=端口/协议</p><h4 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h4><p>top与ps命令相似，用于显示正在执行的进程，top和ps最大的不同之处在于top在执行一段时间可以更新正在运行的进程</p><p>指令：top    【选项】</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-d 秒速</td><td>指定top命令每隔几秒更新，默认3秒</td></tr><tr><td>-i</td><td>使top不显示任何闲置或僵死进程</td></tr><tr><td>-P</td><td>通过指定监控进程ID来仅仅监控某个进程的状态</td></tr></tbody></table><p>交互操作说明</p><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>P</td><td>以CPU使用率排序，从大到小，默认就是此项</td></tr><tr><td>M</td><td>以内存的使用率排序，从大到小</td></tr><tr><td>N</td><td>以PID排序，从大到小</td></tr><tr><td>Q或q</td><td>退出top</td></tr></tbody></table><h3 id="rpm和yum"><a href="#rpm和yum" class="headerlink" title="rpm和yum"></a>rpm和yum</h3><h4 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h4><p>用于下载包的打包及安装工具，它生成具有.rpm扩展名的文件，类似windows的setup.exe；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询所有安装rpm软件包：rpm -qa</span><br><span class="line">查询软件包是否安装：rpm -q 软件包名</span><br><span class="line">查询软件包信息：rpm -qi 软件包名</span><br><span class="line">查询软件包中的文件：rpm -ql 软件包名</span><br><span class="line">查询文件所属的软件包：rpm -qf 文件全路径名</span><br><span class="line">卸载软件包：rpm -e 软件包</span><br><span class="line">安装软件包：rpm -ivh 安装的全路径</span><br></pre></td></tr></table></figure><h4 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h4><p>Shell前端软件包管理器，基于RPM包管理，能够从指定的服务器自动下载RPM包并安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包</p><p>查询yum服务器是否有需要安装的软件：yum list | grep xx软件列表</p><p>安装指定的yum包：yum install xx下载安装</p><h3 id="Java环境安装"><a href="#Java环境安装" class="headerlink" title="Java环境安装"></a>Java环境安装</h3><h4 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h4><h5 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h5><ol><li><p>创建jdk文件夹：mkdir /opt/jdk</p></li><li><p>通过xftp传输Linux版本的jdk安装包到/opt/jdk目录下</p></li><li><p>进入jdk目录：cd /opt/jdk</p></li><li><p>解压jdk安装包：tar -zxvf jdk-8u261-linux-x64.tar.gz</p></li><li><p>创建java文件夹：mkdir /usr/local/java</p></li><li><p>移动jdk安装文件：mv /opt/jdk/jdk 1.8.0_261/ /usr/local/java</p></li><li><p>配置环境变量：vim /etc/profile</p></li><li><p>在profile文末添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_261</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>让编辑过的环境变量生效：source /etc/profile</p></li></ol><h4 id="Tomcat安装"><a href="#Tomcat安装" class="headerlink" title="Tomcat安装"></a>Tomcat安装</h4><h5 id="安装步骤-1"><a href="#安装步骤-1" class="headerlink" title="安装步骤"></a>安装步骤</h5><ol><li>新建tomcat目录：mkdir /opt/tomcat</li><li>通过xftp传输Linux版本的tomcat安装包到/opt/tomcat目录下</li><li>进入tomcat目录：cd /opt/tomcat</li><li>解压tomcat：tar -zxvf apache-tomcat-8.5.69.tar.gz ，下载core核心包地址<a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a></li><li>进入tomcat的bin目录：cd apache-tomcat-8.5.69/bin，启动tomcat：./startup.sh</li><li>开放端口8080：firewall-cmd –permanent –add-port=8080/tcp</li><li>重新载入生效：firewall-cmd –reload</li><li>测试是否打开端口号：firewall-cmd –query-port=8080/tcp</li></ol><h4 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h4><h5 id="安装步骤-2"><a href="#安装步骤-2" class="headerlink" title="安装步骤"></a>安装步骤</h5><ol><li><p>新建mysql文件夹，进入：mkdir /opt/mysql</p></li><li><p>Xftp将安装包传输到/opt/tomcat目录下</p></li><li><p>进入mysql目录：cd /opt/mysql</p></li><li><p>解压mysql安装包：tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</p></li><li><p>查询mariadb： rpm -qa | grep mari。注意centos7.6自带的类mysql数据库是mariadb，会跟mysql冲突，要先删除</p></li><li><p>卸载mariadb：rpm -e –nodeps mariadb-libs ，rpm -e –nodeps marisa</p></li><li><p>开始安装mysql</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm </span><br></pre></td></tr></table></figure></li><li><p>启动服务：systemctl start mysqld.service</p></li><li><p>开始设置root密码；Mysql自动给root用户设置随机密码，运行grep “password” /var/log/mysqld.log可看到当前密码</p><p>运行mysql -u root -p，复制粘贴输入上述密码</p><p>修改密码</p><p>运行如下命令使密码生效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h3><h4 id="Shell脚本执行方式"><a href="#Shell脚本执行方式" class="headerlink" title="Shell脚本执行方式"></a>Shell脚本执行方式</h4><h5 id="脚本格式要求"><a href="#脚本格式要求" class="headerlink" title="脚本格式要求"></a>脚本格式要求</h5><p>脚本以#!/bin/bash开头，需要可执行权限</p><h5 id="常用执行方式"><a href="#常用执行方式" class="headerlink" title="常用执行方式"></a>常用执行方式</h5><ol><li>输入脚本的绝对路径或相对路径（./xxx.sh）</li><li>sh+脚本</li></ol><h4 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h4><ol><li>定义变量：变量名=值</li><li>撤销变量：unset 变量</li><li>声明静态变量：readonly 变量，静态变量不能unset</li><li>显示当前shell中所有变量：set</li><li>一般情况下var和{var}没有区别，但是用${}会较精确的界定变量名称的范围</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A=`date`#运行反引号内的命令，将结果返回给变量A</span><br><span class="line">A=$(date)#等同于上面的语句</span><br></pre></td></tr></table></figure><h5 id="设置环境变量（全局变量）"><a href="#设置环境变量（全局变量）" class="headerlink" title="设置环境变量（全局变量）"></a>设置环境变量（全局变量）</h5><p>export 变量名=变量值（将shell变量输出为环境变量）</p><p>source 配置文件（让修改后的配置信息立即生效）</p><p>echo $变量名（查询环境变量的值）</p><h6 id="shell注释"><a href="#shell注释" class="headerlink" title="shell注释"></a>shell注释</h6><ul><li><p>单行注释：通过一个’#’实现，开始部分的#不是用于注释的</p></li><li><p>多行注释</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&lt;xxxx</span><br><span class="line">注释内容</span><br><span class="line">xxxx</span><br></pre></td></tr></table></figure><p>xxxx可以为任意字符串，中间部分为注释</p></li></ul><h5 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h5><p>用于在执行脚本时获取命令行的参数信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$n#n为数字，表示第几个参数，10以上需要用大括号如$&#123;10&#125;</span><br><span class="line">$*#命令行所有参数，将所有参数当做一个整体</span><br><span class="line">$@#命令行所有参数，将每个参数分别输出</span><br><span class="line">$##命令行中所有参数的个数</span><br></pre></td></tr></table></figure><h5 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h5><p>事先定义好的变量，直接在脚本中使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$#当前进程的进程号PID</span><br><span class="line">$!#后台运行的最后一个进程的进程号PID</span><br><span class="line">$?#最后一次执行命令的返回状态；若为0则表示正确执行</span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$((表达式))或$[表达式]或expr m+n</span><br></pre></td></tr></table></figure><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [ 条件判断 ]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#若输入参数大于等于60则输出及格了，若小于60则输出不及格</span><br><span class="line">if [ $1 -ge 60 ]</span><br><span class="line">then</span><br><span class="line">echo&quot;及格了&quot;</span><br><span class="line">elif [ $1 -lt 60 ]</span><br><span class="line">then</span><br><span class="line">echo&quot;不及格&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;1&quot;)</span><br><span class="line">echo&quot;周一&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;2&quot;)</span><br><span class="line">echo&quot;周二&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo&quot;other&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in &quot;$*&quot;</span><br><span class="line">do</span><br><span class="line">echo&quot;num is $i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">SUM=0</span><br><span class="line">i=0</span><br><span class="line">while [ $i -le $1]</span><br><span class="line">do</span><br><span class="line">SUM=$[$SUM+$i]</span><br><span class="line">i=$[$i+1]</span><br><span class="line">done</span><br><span class="line">echo&quot;结果=$SUM&quot;</span><br></pre></td></tr></table></figure><h4 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h4><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><p>read [选项] [参数]</p><h5 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h5><p>-p：指定读取值时的提示符；</p><p>-t：指定读取值时等待的时间；</p><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>变量：指定读取值的变量名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#案例1：读取控制台输入一个num1值</span><br><span class="line">read -p &quot;请输入指定的num1=&quot; NUM1</span><br><span class="line">echo &quot;输入的num1=$NUM1&quot;</span><br><span class="line">#案例2：读取控制台输入一个num2值，在5秒内输入</span><br><span class="line">read -t 5 -p &quot;请输入num2=&quot; NUM2</span><br><span class="line">echo &quot;输入的num2=$NUM2&quot;</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h5><p>返回一个字符串参数的基本文件名称</p><h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><p>basename String [ Suffix ]</p><h6 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h6><p>读取String参数，删除以/结尾的前缀及任何指定的Suffix参数，并将剩余基本文件名称写至标准输出</p><ol><li><p>若String包含的都是斜杠字符，则将字符串更改为单个/</p></li><li><p>若指定Suffix参数和剩余字符相同，则不修改此字符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">basename /u/dee/desktop/cns.boo cns.boo=&gt;cns.boo</span><br></pre></td></tr></table></figure></li><li><p>若只与字符串的后缀相同，则除去指定后缀</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">basename /u/dee/desktop/cns.boo .boo=&gt;cns</span><br></pre></td></tr></table></figure></li></ol><h6 id="常见应用"><a href="#常见应用" class="headerlink" title="常见应用"></a>常见应用</h6><ol><li><p>显示一个shell变量的基本名称</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">basename $WORKFILE</span><br><span class="line">#显示WORKFILE值的基本名称，若WORKFILE变量值是/home/jim/program.c文件，则此命令显示program.c </span><br></pre></td></tr></table></figure></li><li><p>构造一个和另一个文件名称相同（除了后缀）的文件名称</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OFILE=`basename $1 .c`.o</span><br></pre></td></tr></table></figure></li></ol><h5 id="dirname"><a href="#dirname" class="headerlink" title="dirname"></a>dirname</h5><p>获取某个文件或目录的上一级目录</p><h6 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirname /home/users/aoquan/</span><br><span class="line">#输出结果：/home/users</span><br></pre></td></tr></table></figure><h5 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h5><h6 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#案例：计算输入两个参数的和，getSum</span><br><span class="line">function getSum()&#123;</span><br><span class="line">        sum=$[$n1+$n2]</span><br><span class="line">        echo &quot;和是=$sum&quot;</span><br><span class="line">&#125;</span><br><span class="line">#输入两个值</span><br><span class="line">read -p &quot;第一个值=&quot; n1</span><br><span class="line">read -p &quot;第二个值=&quot; n2</span><br><span class="line">#调用函数</span><br><span class="line">getSum $n1 $n2</span><br></pre></td></tr></table></figure><h4 id="数据备份案例"><a href="#数据备份案例" class="headerlink" title="数据备份案例"></a>数据备份案例</h4><h6 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h6><p>每天凌晨2:30备份数据库smile到/data/backup/db；备份开始和结束给出相应的提示信息；备份文件以备份时间为文件名，并打包成.tar.gz形式；在备份的同时检查是否有7天前备份的数据库文件，若有就将其删除</p><p><code>vim /usr/sbin/mysql_db_backup.sh 内容如下</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">备份目录</span></span><br><span class="line">BACKUP=/data/backup/db</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当前时间</span></span><br><span class="line">DATATIME=$(date + %Y-%m-%d_%H%M%S)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据库地址</span></span><br><span class="line">HOST=localhost</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据库用户名</span></span><br><span class="line">DB_USER=root</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据库密码</span></span><br><span class="line">DB_PW=root</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">备份的数据库名</span></span><br><span class="line">DATABASE=smile</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">若备份目录不存在则创建</span></span><br><span class="line">[ ! -d &quot;$&#123;BACKUP&#125;/$&#123;DATATIME&#125;&quot; ] &amp;&amp; mkdir -p &quot;$&#123;BACKUP&#125;/$&#123;DATATIME&#125;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">备份数据库</span></span><br><span class="line">echo &quot;开始备份数据库$&#123;DATABASE&#125;&quot;</span><br><span class="line">mysqldump -u$&#123;DB_USER&#125; -p$&#123;DB_PW&#125; --host=$&#123;HOST&#125; -q -R --databases $&#123;DATABASE&#125; | gzip &gt; $&#123;BACKUP&#125;/$&#123;DATATIME&#125;/$DATATIME.sql.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将备份文件夹处理成.tar.gz的格式</span></span><br><span class="line">cd $&#123;BACKUP&#125;</span><br><span class="line">tar -zcvf $DATATIME.tar.gz $&#123;DATATIME&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除对应的备份目录</span></span><br><span class="line">rm -rf $&#123;BACKUP&#125;/$&#123;DATATIME&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除7天前的备份</span></span><br><span class="line">find $&#123;BACKUP&#125; -atime +7 -name &quot;*.tar.gz&quot; -exec rm -rf &#123;&#125; \;</span><br><span class="line">echo &quot;备份数据库$&#123;DATABASE&#125;成功&quot;</span><br></pre></td></tr></table></figure><p><code>定时脚本</code></p><p><code>命令行敲crontab -e ，接着输入如下内容</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">30 2 * * * /usr/sbin/mysql_db_backup.sh</span><br></pre></td></tr></table></figure><h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><h4 id="系统常用日志"><a href="#系统常用日志" class="headerlink" title="系统常用日志"></a>系统常用日志</h4><table><thead><tr><th>日志文件</th><th>说明</th></tr></thead><tbody><tr><td><font color=red>/var/log/boot.log</font></td><td>系统启动日志</td></tr><tr><td><font color=red>/var/log/cron</font></td><td>记录与系统定时任务相关的日志</td></tr><tr><td>/var/log/cups/</td><td>记录打印信息的日志</td></tr><tr><td>/var/log/dmesg</td><td>记录系统开机时自检信息，可以使用dmesg命令查看内核自检信息</td></tr><tr><td>/var/log/btmp</td><td>记录错误登录的日志，该日志为二进制文件，不能用vi查看，要使用lastb命令查看</td></tr><tr><td><font color=red>/var/log/lasllog</font></td><td>记录系统所有用户最后一次登录时间的日志，也只能使用lastlog命令查看</td></tr><tr><td><font color=red>/var/log/mailog</font></td><td>记录邮件信息的日志</td></tr><tr><td><font color=red>/var/log/message</font></td><td>记录系统重要消息的日志，若系统出现问题，首先应该检查的就是该日志文件</td></tr><tr><td><font color=red>/var/log/secure</font></td><td>记录验证和授权方面的信息，只要涉及账户和密码的程序都会记录，如系统的登录、ssh的登录、sudo授权</td></tr><tr><td>/var/log/wtmp</td><td>永久记录所有用户的登录、注销信息、同时记录系统的启动、重启、关机事件，只能使用lastb命令查看</td></tr><tr><td><font color=red>/var/log/ulmp</font></td><td>记录当前已登录用户的信息，随着用户的登录和注销不断变化，使用w、who、users等命令查看</td></tr></tbody></table><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p>除了根文件系统，其他所有文件系统都要先挂载到根文件系统（系统启动时安装的第一个文件系统，内核映像所在的文件系统）中的某个目录后才能访问，而<code>挂载到某个目录</code>中的<code>某个目录</code>就是挂载点</p><p>Linux挂载文件系统命令：<code>mount device dir</code>，device为要挂载的设备文件，dir为挂载点；一个磁盘上的不同分区都可以看作不同设备</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php笔记</title>
      <link href="/2023/02/03/php%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/03/php%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="PHP符号"><a href="#PHP符号" class="headerlink" title="PHP符号"></a>PHP符号</h3><p>当解析一个文件时，PHP会寻找起始和结束标记，即&lt;?php和?&gt;，这告诉PHP开始和停止解析二者之间的代码，此种解析方式使得PHP可以被嵌入到各种不同的文档中，任何起始和结束之外的部分都会被PHP解析器忽略；</p><p>若文件内容是纯PHP代码，最好在文件末尾删除PHP结束标记，避免在PHP结束标记之后意外加了空格或换行符导致PHP开始输出这些空白，而脚本中此时并无输出的意图</p><p><code>-&gt;</code>是“插入式解引用操作符”，调用由==引用==传递参数的子程序的方法</p><p><code>=&gt;</code>用于数组中key指向value</p><p><code>::</code>是范围解析操作符，又名域运算符，与C的<code>.</code>相似，php调用类的内部静态成员，或是类之间的调用就用<code>::</code></p><p><code>@</code>在@mysql_num_rows($res)中会忽略后面的表达式的错误</p><p><code>&#123;&#125;</code>：</p><p>将多个语句合并为一个复合语句，如在if…else…中的使用；</p><p>变量间接引用中定界，避免歧义，如：${$my_var[8]}与${$my_var}[8]的区分</p><p>用于只是字符串变量中单个字符（下标从0开始），如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$my_str</span>=<span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="variable">$my_str</span>&#123;<span class="number">1</span>&#125;=<span class="string">&quot;5&quot;</span>;<span class="comment">//现在$my_str内容为&#x27;1534&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="指针和引用的区别"><a href="#指针和引用的区别" class="headerlink" title="指针和引用的区别"></a>指针和引用的区别</h4><p><code>指针</code>：一个存储地址的变量，即指针是一个实体</p><p><code>引用</code>：跟原来的变量实质上是同一个东西，是原变量的一个别名</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">1</span>; <span class="type">int</span> *p=&amp;a;</span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>; <span class="type">int</span> &amp;b=a;</span><br></pre></td></tr></table></figure><p><code>此用法为PHP5之后的特性，用于消除使用中括号引起的歧义</code></p><ul><li>可以有const指针，但是没有const引用</li><li>指针可以多级，引用只能一级</li><li>指针的值可以为空，但是引用的值不能为NULL</li><li>指针的值在初始化后可以改变，引用在初始化后就不会再改变了</li><li>“sizeof引用“得到的是指向的变量的大小，而”sizeof指针“得到的是指针大小</li></ul><h3 id="PDO"><a href="#PDO" class="headerlink" title="PDO"></a>PDO</h3><p>PHP数据对象（PHP Data Object）的缩写，用于统一各种数据库的访问接口</p><h4 id="创建PDO类的对象"><a href="#创建PDO类的对象" class="headerlink" title="创建PDO类的对象"></a>创建PDO类的对象</h4><p><em><strong>PDO::__construct ( string $dsn [, string $username [, string $password]] )</strong></em></p><ul><li>$dsn:表示数据源名称，包含了连接到数据库的信息，通常一个DSN由PDO驱动名、冒号以及具体PDO驱动的连接语法组成，例如：$dsn = “mysql : host=127.0.0.1; port=3306; dbname=db; charset=utf8”  </li></ul><p><img src="https://img-blog.csdnimg.cn/20200928230132532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h4 id="PDO对象常用方法"><a href="#PDO对象常用方法" class="headerlink" title="PDO对象常用方法"></a>PDO对象常用方法</h4><h5 id="PDO-exec-方法"><a href="#PDO-exec-方法" class="headerlink" title="PDO::exec()方法"></a>PDO::exec()方法</h5><ul><li>表示执行一条SQL语句并返回受影响的行数</li><li>语法：int PDO::exec(string $sql)；$sql表示要被预处理和执行的SQL语句，<font color=red>不会从SELECT语句返回结果</font></li><li>返回受修改或删除SQL语句影响的行数，若没有受影响的行，则返回0</li></ul><p><img src="https://img-blog.csdnimg.cn/20200930162053250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h5 id="PDO-query-方法"><a href="#PDO-query-方法" class="headerlink" title="PDO::query()方法"></a>PDO::query()方法</h5><ul><li>表示执行一条SQL语句，返回一个结果集对象（<strong>PDOStatement</strong> ）</li><li>语法：public PDOStatement PDO::query ( string $statement )</li><li>主要用于SELECT、SHOW语句</li><li>执行成功返回PDOstatement对象，执行失败返回FALSE</li></ul><p><img src="https://img-blog.csdnimg.cn/20200930162138986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h5 id="PDO-lastInsertId-方法"><a href="#PDO-lastInsertId-方法" class="headerlink" title="PDO::lastInsertId()方法"></a>PDO::lastInsertId()方法</h5><ul><li>返回最后插入成功记录的id或序列值</li><li>语法：string PDO::lastInsertId ( void )</li></ul><p><img src="https://img-blog.csdnimg.cn/20200930162219957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h5 id="PDO-setAttribute-方法"><a href="#PDO-setAttribute-方法" class="headerlink" title="PDO::setAttribute()方法"></a>PDO::setAttribute()方法</h5><ul><li>设置数据库句柄属性</li><li>语法：bool PDO::setAttribute ( int $attribute , mixed $value )</li><li>PDO内置的一些可用的通用属性<ul><li>PDO::ATTR_CASE：强制列名为指定的大小写</li><li>PDO::ATTR_ERRMODE：错误报告</li><li>PDO::ATTR_DEFAULT_FETCH_MODE： 设置默认的提取模式</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20200930162258378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h4 id="Statement对象常用方法"><a href="#Statement对象常用方法" class="headerlink" title="Statement对象常用方法"></a>Statement对象常用方法</h4><h5 id="PDOStatement-fetch-方法"><a href="#PDOStatement-fetch-方法" class="headerlink" title="PDOStatement::fetch()方法"></a>PDOStatement::fetch()方法</h5><ul><li>从结果集中获取一行，并向下移动指针</li><li>语法：mixed PDOStatement::fetch ([ int $fetch_style ] )</li><li>参数：$fetch_style控制下一行如何返回给调用者<ul><li>PDO::FETCH_ASSOC，返回一个索引为结果集列名的数组</li><li>PDO::FETCH_BOTH(默认)，返回一个索引为结果集列名和以0开始的列号的数组</li><li>PDO::FETCH_NUM：返回一个索引为以0开始的结果集列号的数组</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20200930162354370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h5 id="PDOStatement-fetchAll-方法"><a href="#PDOStatement-fetchAll-方法" class="headerlink" title="PDOStatement::fetchAll()方法"></a>PDOStatement::fetchAll()方法</h5><ul><li>返回一个包含结果集中所有行的数组</li><li>语法：array PDOStatement::fetchAll ([ int $fetch_style ] (同上))</li></ul><p><img src="https://img-blog.csdnimg.cn/20200930162432177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h5 id="PDOStatement-rowCount-方法"><a href="#PDOStatement-rowCount-方法" class="headerlink" title="PDOStatement::rowCount()方法"></a>PDOStatement::rowCount()方法</h5><ul><li>返回受上一个SQL语句影响的行数</li><li>语法：int PDOStatement::rowCount ( void )</li><li>想要使用该函数，必须使用$pdo-&gt;query()返回PDOStatement对象</li></ul><h4 id="PDO错误处理"><a href="#PDO错误处理" class="headerlink" title="PDO错误处理"></a>PDO错误处理</h4><h5 id="PDO支持三种错误模式"><a href="#PDO支持三种错误模式" class="headerlink" title="PDO支持三种错误模式"></a>PDO支持三种错误模式</h5><ul><li><p>静默模式（Slient）：错误发生后不会主动报错，是默认的模式；此时不会讲错误显示在页面上，可以通过PDO的PDO::errorCode()和PDO::errorInfo()两个方法，来获取错误信息</p><p><img src="https://img-blog.csdnimg.cn/20200930162617497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p></li><li><p>警告模式（Warning）：错误发生后通过PHP标准来报告错误；使用setAttribute()方法提前设置</p><p><img src="https://img-blog.csdnimg.cn/20200930162807547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p></li><li><p>异常模式（Exception)：错误发生后抛出异常，需要捕捉和处理，需要setAttribute()方法提前设置</p></li></ul><p><img src="https://img-blog.csdnimg.cn/2020093016283844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200930162903378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200930162940298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200930162953217.png"></p><h4 id="SQL语句预处理"><a href="#SQL语句预处理" class="headerlink" title="SQL语句预处理"></a>SQL语句预处理</h4><h5 id="SQL语句执行过程"><a href="#SQL语句执行过程" class="headerlink" title="SQL语句执行过程"></a>SQL语句执行过程</h5><p>SQL语句执行分为编译和执行两个阶段；第一次执行先编译再执行，耗用系统资源，相对不安全；若是第二次执行直接从缓存中读取，执行效率高且安全，有效避免SQL注入等安全问题</p><h5 id="预处理步骤"><a href="#预处理步骤" class="headerlink" title="预处理步骤"></a>预处理步骤</h5><p>先提取并编译相同部分，将编译结果保存，再将不同数据部分替换，执行即可</p><p><img src="https://img-blog.csdnimg.cn/20200930163212958.png"></p><p><img src="https://img-blog.csdnimg.cn/20200930163243759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200930163411181.png"></p><p><code>PDO的SQL语句预处理实例</code></p><p><img src="https://img-blog.csdnimg.cn/20200930163444103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200930163500100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTkzNDUyMA==,size_16,color_FFFFFF,t_70"></p><h4 id="单例模式封装PDO"><a href="#单例模式封装PDO" class="headerlink" title="单例模式封装PDO"></a>单例模式封装PDO</h4><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><p>只会最多产生一个对象的设计思想，单例模式是为了保护资源的唯一性</p><ul><li>单例模式为了解决如何只产生一个对象用到以下解决方案，简称<code>三私一公</code><ul><li><strong>私有化构造方法</strong>：不让在外部产生多个对象</li><li><strong>私有化克隆方法</strong>：不允许对象被克隆产生新的对象</li><li><strong>公有化静态方法</strong>：运行进入类内部产生对象</li><li><strong>私有化静态属性</strong>：保存已经产生的对象</li></ul></li></ul><p><code>实例</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//对象的产生是通过实例化产生的，而实例化是一种不可控行为，即可以产生无限多个对象，所以应该“禁止实例化”，即仅禁止在类外部实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123; <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;&#125;</span><br><span class="line">    <span class="comment">//此时外部不能实例化对象，所以应在还未产生对象的时候进入“类内部”，通过“静态方法”让类直接进入到类内部</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//此时依然没有对象，需要在内部进行对象实例化，且将对象返回给外部</span></span><br><span class="line">        <span class="comment"># 判断内部属性是否存在对象（is_object函数）：最好的判定是存的对象是当前类的instanceof</span></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="built_in">self</span>::<span class="variable">$object</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>))&#123;</span><br><span class="line">            <span class="comment"># 当前保存的内容不是当前类的对象</span></span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$object</span> = <span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 返回对象给外部</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$object</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上一步开启了实例化对象的窗口，但无限调用静态方法依然可以得到多个对象，若想只返回一个对象，就得保证类内部有办法存某个产生的对象，第一次产生新的，后面返回旧的，此时需要使用静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$object</span> = <span class="literal">NULL</span>;<span class="comment">#初始化为NULL，没有对象</span></span><br><span class="line"><span class="comment">//判断内部是否存在对象，根据$object修改getInstance()中返回的内容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此时可以保证外部无论多少次调用公有静态方法获取实例都会只得到一个对象，但此时外部对象依然可以产生新的对象：因为克隆，因此必须禁止对象的克隆，即在类内部私有化克隆方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试外部实例化</span></span><br><span class="line"><span class="comment">// $demo = new Singleton();    //报错</span></span><br><span class="line"><span class="comment">// 外部获取对象</span></span><br><span class="line"><span class="variable">$s</span> = <span class="title class_">Singleton</span>::<span class="title function_ invoke__">getInstance</span>();</span><br></pre></td></tr></table></figure><p><code>使用单例模式PDO连接数据库</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLPDO</span></span>&#123;</span><br><span class="line">    <span class="comment">//数据库默认连接信息</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$dbConfig</span> = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;db&#x27;</span>   =&gt; <span class="string">&#x27;mysql&#x27;</span>, <span class="comment">//数据库类型</span></span><br><span class="line"><span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>, <span class="comment">//服务器地址</span></span><br><span class="line"><span class="string">&#x27;port&#x27;</span> =&gt; <span class="string">&#x27;3306&#x27;</span>, <span class="comment">//端口</span></span><br><span class="line"><span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>, <span class="comment">//用户名</span></span><br><span class="line"><span class="string">&#x27;pass&#x27;</span> =&gt; <span class="string">&#x27;weicunbin123&#x27;</span>, <span class="comment">//密码</span></span><br><span class="line"><span class="string">&#x27;charset&#x27;</span> =&gt; <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">//字符集</span></span><br><span class="line"><span class="string">&#x27;dbname&#x27;</span> =&gt; <span class="string">&#x27;testguest&#x27;</span>, <span class="comment">//默认数据库</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//单例模式 本类对象引用</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="comment">//PDO实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$db</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 私有构造方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $params array 数据库连接信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$params</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//初始化属性</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbConfig = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;dbConfig,<span class="variable">$params</span>);</span><br><span class="line">        <span class="comment">//连接服务器</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获得单例对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $params array 数据库连接信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> object 单例的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="variable">$params</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)&#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span> = <span class="keyword">new</span> <span class="built_in">self</span>(<span class="variable">$params</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;<span class="comment">//返回对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 私有克隆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接目标服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//连接信息</span></span><br><span class="line">            <span class="variable">$dsn</span> = <span class="string">&quot;<span class="subst">&#123;$this-&gt;dbConfig[&#x27;db&#x27;]&#125;</span>:host=<span class="subst">&#123;$this-&gt;dbConfig[&#x27;host&#x27;]&#125;</span>;port=<span class="subst">&#123;$this-&gt;dbConfig[&#x27;host&#x27;]&#125;</span>;dbname=<span class="subst">&#123;$this-&gt;dbConfig[&#x27;dbname&#x27;]&#125;</span>;charset=<span class="subst">&#123;$this-&gt;dbConfig[&#x27;charset&#x27;]&#125;</span>&quot;</span>;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">            //实例化PDO</span></span><br><span class="line"><span class="string">            <span class="subst">$this</span>-&gt;db = new PDO(<span class="subst">$dsn</span>,<span class="subst">$this</span>-&gt;dbConfig[&#x27;user&#x27;],<span class="subst">$this</span>-&gt;dbConfig[&#x27;pass&#x27;])</span></span><br><span class="line"><span class="string">            //设定字符集</span></span><br><span class="line"><span class="string">            <span class="subst">$this</span>-&gt;db-&gt;query(&quot;</span>set names &#123;<span class="variable language_">$this</span>-&gt;dbConfig[<span class="string">&#x27;charset&#x27;</span>]&#125;<span class="string">&quot;);</span></span><br><span class="line"><span class="string">            echo 1;</span></span><br><span class="line"><span class="string">        &#125;catch (PDOException <span class="subst">$e</span>)&#123;</span></span><br><span class="line"><span class="string">            //错误提示</span></span><br><span class="line"><span class="string">            die(&quot;</span>数据库操作失败：&#123;<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>()&#125;<span class="string">&quot;);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string"> * 执行SQL</span></span><br><span class="line"><span class="string"> * @param <span class="subst">$sql</span> string 执行的SQL语句</span></span><br><span class="line"><span class="string"> * @return object PDOStatement</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string"> public function query(<span class="subst">$sql</span>)&#123;</span></span><br><span class="line"><span class="string"> <span class="subst">$rst</span> = <span class="subst">$this</span>-&gt;db-&gt;query(<span class="subst">$sql</span>);</span></span><br><span class="line"><span class="string"> if(<span class="subst">$rst</span>===false)&#123;</span></span><br><span class="line"><span class="string"> <span class="subst">$error</span> = <span class="subst">$this</span>-&gt;db-&gt;errorInfo();</span></span><br><span class="line"><span class="string"> die(&quot;</span>数据库操作失败：ERROR &#123;<span class="variable">$error</span>[<span class="number">1</span>]&#125;(&#123;<span class="variable">$error</span>[<span class="number">0</span>]&#125;): &#123;<span class="variable">$error</span>[<span class="number">2</span>]&#125;<span class="string">&quot;);</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> return <span class="subst">$rst</span>;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> /**</span></span><br><span class="line"><span class="string"> * 取得一行结果</span></span><br><span class="line"><span class="string"> * @param <span class="subst">$sql</span> string 执行的SQL语句</span></span><br><span class="line"><span class="string"> * @return array 关联数组结果 </span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string"> public function fetchRow(<span class="subst">$sql</span>)&#123;</span></span><br><span class="line"><span class="string"> return <span class="subst">$this</span>-&gt;query(<span class="subst">$sql</span>)-&gt;fetch(PDO::FETCH_ASSOC);</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> /**</span></span><br><span class="line"><span class="string"> * 取得所有结果</span></span><br><span class="line"><span class="string"> * @param <span class="subst">$sql</span> string 执行的SQL语句</span></span><br><span class="line"><span class="string"> * @return array 关联数组结果 </span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string"> public function fetchAll(<span class="subst">$sql</span>)&#123;</span></span><br><span class="line"><span class="string"> return <span class="subst">$this</span>-&gt;query(<span class="subst">$sql</span>)-&gt;fetchAll(PDO::FETCH_ASSOC);</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="对象的克隆"><a href="#对象的克隆" class="headerlink" title="对象的克隆"></a>对象的克隆</h5><p>即对象的复制操作，分为浅克隆和深克隆</p><p><code>浅克隆和深克隆的区别</code></p><ul><li><p>浅克隆：若源对象成员变量是值类型将复制一份给克隆对象，若是引用类型则将引用对象的地址复制给目标对象，即将源对象和目标对象成员变量指向相同的内存地址；只复制对象本身和包含的值类型，引用类型的成员对象并没有复制</p><p><img src="https://img-blog.csdnimg.cn/bfa467e4c146470d9660e621b9aeba72.png"></p></li><li><p>深克隆：</p><p><img src="https://img-blog.csdnimg.cn/11d8d2b4f89246a290d2b86d8e2d5642.png"></p></li></ul><h6 id="php中的浅克隆"><a href="#php中的浅克隆" class="headerlink" title="php中的浅克隆"></a>php中的浅克隆</h6><p>只能克隆对象中的“非对象非资源”的数据</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$o</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$obj1</span> = <span class="keyword">clone</span> <span class="variable">$obj</span>;</span><br><span class="line"><span class="variable">$obj</span>-&gt;o = <span class="number">2</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj1</span>);</span><br></pre></td></tr></table></figure><p>输出结果如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200330222553144.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;c = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>(); <span class="comment">// 此时c中存储的是对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$obj1</span> = <span class="keyword">clone</span> <span class="variable">$obj</span>;</span><br><span class="line"><span class="variable">$obj</span>-&gt;a = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$obj</span>-&gt;c-&gt;b = <span class="number">12</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020033022453997.png"></p><p>修改了obj中c的值发现obj1的c的值也跟着变了，这就是克隆不完全</p><h6 id="php中的深克隆"><a href="#php中的深克隆" class="headerlink" title="php中的深克隆"></a>php中的深克隆</h6><p>一个对象所有属性都实现“复制”，在PHP中默认浅克隆，实现深克隆需对该类使用魔术方法__clone()，并在里面实现深克隆：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;c = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>(); <span class="comment">// 此时c中存储的是对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;c = <span class="keyword">clone</span> <span class="variable language_">$this</span>-&gt;c; <span class="comment">// 此方法会在对象克隆时调用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$obj1</span> = <span class="keyword">clone</span> <span class="variable">$obj</span>;</span><br><span class="line"><span class="variable">$obj</span>-&gt;a = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$obj</span>-&gt;c-&gt;b = <span class="number">12</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200330230013943.png"></p><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>可扩展标记语言，主要用来存储数据、作为配置文件、在网络中传输</p><h4 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）xml文档的后缀为.xml</span><br><span class="line">（2）xml第一行必须定义为文档声明</span><br><span class="line">（3）xml文档中有且仅有一个根标签</span><br><span class="line">（4）属性值必须使用单引号（单双都可）引起来且属性值是唯一的</span><br><span class="line">（5）xml标签必须正确关闭，即要么是自闭和标签，要么是围堵标签</span><br><span class="line">（6）xml标签名称区别大小写</span><br></pre></td></tr></table></figure><h4 id="XML的约束"><a href="#XML的约束" class="headerlink" title="XML的约束"></a>XML的约束</h4><h5 id="DTD约束"><a href="#DTD约束" class="headerlink" title="DTD约束"></a>DTD约束</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个完整的DTD声明主要由三个基本部分组成：元素声明、属性声明、实体声明</span><br></pre></td></tr></table></figure><p>元素声明基本语法为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT 元素名 元素内容模型&gt;</span><br></pre></td></tr></table></figure><p>XML元素中可以有子元素，可以通过DTD定义某个元素中包含哪些子元素，若department标签下有dname和address标签，即：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">department</span> (<span class="keyword">dname</span>,<span class="keyword">address</span>)&gt;</span></span><br></pre></td></tr></table></figure><p>若hr标签下有多个employee标签，可以在（）后加个*代表有0个或多个employee标签：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">hr</span> (<span class="keyword">employee</span>)*&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>,</code>分隔代表子元素必须按照这样的顺序出现，否则报错，若对于顺序无要求，可以使用<code>|</code>分隔子元素，如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">employee</span> (<span class="keyword">name</span>,<span class="keyword">age</span>,<span class="keyword">salary</span>,<span class="keyword">department</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">employee</span> (<span class="keyword">name</span>|<span class="keyword">age</span>|<span class="keyword">salary</span>|<span class="keyword">department</span>)&gt;</span></span><br></pre></td></tr></table></figure><h5 id="XSD约束"><a href="#XSD约束" class="headerlink" title="XSD约束"></a>XSD约束</h5><p>XSD的作用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）定义可出现在文档中的元素</span><br><span class="line">（2）定义可出现在文档中的属性</span><br><span class="line">（3）定义哪个元素是子元素</span><br><span class="line">（4）定义子元素的次序</span><br><span class="line">（5）定义子元素的数目</span><br><span class="line">（6）定义元素是否为空，或者是否可包含文本</span><br><span class="line">（7）定义元素和属性的数据类型</span><br><span class="line">（8）定义元素和属性的默认值及固定值</span><br></pre></td></tr></table></figure><p>定义简易元素的语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;element name=&quot;标签名&quot; type=&quot;元素类型&quot;/&gt;</span><br></pre></td></tr></table></figure><p>定义属性的语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;attribute name=&quot;属性名&quot; type=&quot;属性的数据类型&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="PHP-XML-Expat-解析器（基于事件的XML解析器）"><a href="#PHP-XML-Expat-解析器（基于事件的XML解析器）" class="headerlink" title="PHP XML Expat 解析器（基于事件的XML解析器）"></a>PHP XML Expat 解析器（基于事件的XML解析器）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基于事件的解析器将上面的XML报告为一连串的三个事件：</p><ul><li>开始元素：from</li><li>开始CDATA部分值：Jani</li><li>关闭元素：from</li></ul><p>工作原理：</p><ol><li>通过 xml_parser_create() 函数初始化XML解析器</li><li>创建配合不同事件处理程序的函数</li><li>添加xml_set_element_handler() 函数来定义，当解析器遇到开始和结束标签时执行哪个函数</li><li>添加xml_set_character_data_handler() 函数来定义，当解析器遇到字符数据时执行哪个函数</li><li>通过xml_parse()函数解析文件“test.html”</li><li>添加xml_error_string() 函数将XML错误转换为文本说明</li><li>调用xml_parser_free()函数释放分配给 xml_parser_create()函数的内存</li></ol><h4 id="PHP-XML-DOM-解析器（基于树的解析器）"><a href="#PHP-XML-DOM-解析器（基于树的解析器）" class="headerlink" title="PHP XML DOM 解析器（基于树的解析器）"></a>PHP XML DOM 解析器（基于树的解析器）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XML DOM将上面的XML视为一个树形结构：</p><ul><li>level 1：XML文档</li><li>level 2：根元素&lt;from&gt;</li><li>level 3：文本元素Jani</li></ul><p><code>示例</code></p><p><code>note.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>遍历XML</code></p><p>初始化XML解析器，加载XML，遍历&lt;note&gt;元素的所有元素</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xmlDoc</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$xmlDoc</span>-&gt;<span class="title function_ invoke__">load</span>(<span class="string">&quot;note.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$xmlDoc</span>-&gt;documentElement;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$x</span>-&gt;childNotes AS <span class="variable">$item</span>)&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="variable">$item</span>-&gt;nodeName . <span class="string">&quot; = &quot;</span> . <span class="variable">$item</span>-&gt;nodeValue . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#text =</span><br><span class="line">to = Tove</span><br><span class="line">#text =</span><br><span class="line">from = Jani</span><br><span class="line">#text =</span><br><span class="line">heading = Reminder</span><br><span class="line">#text =</span><br><span class="line">body = Don&#x27;t forget me this weekend!</span><br><span class="line">#text =</span><br></pre></td></tr></table></figure><p>在上面的实例中每个元素间存在空的文本节点，当XML生成时，通常会在节点间包含空白。XML DOM解析器将它们当做普通的元素</p><h4 id="PHP-SimpleXML"><a href="#PHP-SimpleXML" class="headerlink" title="PHP SimpleXML"></a>PHP SimpleXML</h4><p>处理最普遍的XML任务，其余任务交由其它扩展处理；SimpleXML提供了一种获取XML元素的名称和文本的简单方式；与 DOM 或 Expat 相比，SimpleXML 更容易从 XML 元素中读取文本数据，它可以将XML文档转换为对象：</p><ul><li>元素被转换为SimpleXMLElement 对象的单一属性，当同级别存在多个元素时，它们会被置于数组中</li><li>属性通过关联数组进行访问，索引对应属性名称</li><li>元素内部文本被转换为字符串，若一个元素拥有多个文本节点，则按照它们被找到的顺序进行排列</li></ul><p>当执行类似以下基础任务时，SimpleXML用起来非常快捷：</p><ul><li>读取XML文件的数据</li><li>编辑文本节点或属性</li></ul><p><code>示例</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xml</span>=<span class="title function_ invoke__">simplexml_load_file</span>(<span class="string">&quot;note.xml&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$xml</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SimpleXMLElement Object ( [to] =&gt; Tove [from] =&gt; Jani [heading] =&gt; Reminder [body] =&gt; Don&#x27;t forget me this weekend! )</span><br></pre></td></tr></table></figure><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>无需重新加载整个网页的情况下更新部分网页的技术，通过后台与服务器进行少量数据交换，使网页实现异步更新</p><p><img src="http://run.jb51.net/uploadfile/2017/0524/20170524053007405.gif"></p><p>AJAX基于因特网标准，并使用以下技术组合：</p><ul><li>XMLHttpRequest 对象（与服务器异步交互数据）</li><li>JavaScript/DOM（显示/取回信息）</li><li>CSS（设置数据的样式）</li><li>XML（常用作数据传输的格式）</li></ul><p><code>AJAX PHP实例</code></p><p><img src="https://s1.ax1x.com/2023/02/03/pSs3AVx.png"></p><p>当用户在上面的输入框中键入字符时会执行“showHint()”函数，该函数由“onkeyup”事件触发：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showHint</span>(<span class="params">str</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (str.<span class="property">length</span> == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txtHint&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//IE7+, Firefox, Chrome, Opera, Safari 浏览器执行的代码</span></span></span><br><span class="line"><span class="language-javascript">                    xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//IE6, IE5 浏览器执行的代码</span></span></span><br><span class="line"><span class="language-javascript">                    xmlhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                       <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txtHint&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;gethint.php?q=&quot;</span>+str,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>在输入框中输入一个姓名：<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onkeyup</span>=<span class="string">&quot;showHint(this.value)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>返回值：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;txtHint&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若输入框为空（str.length==0）,该函数会清空txtHint占位符的内容并退出，若非空，则showHint()会执行以下步骤：</p><ul><li>创建XMLHttpRequest对象</li><li>创建在服务器响应就绪时执行的函数</li><li>向服务器上的文件发送请求</li><li>请注意添加URL末端的参数（q）（包含输入框的内容）</li></ul><p><code>gethint.php</code></p><p>检查姓名数组，然后向浏览器（上述html）返回对应的姓名：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 将姓名填充到数组中</span></span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Anna&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Brittany&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Cinderella&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Diana&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Eva&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Fiona&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Gunda&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Hege&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Inga&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Johanna&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Kitty&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Linda&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Nina&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Ophelia&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Petunia&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Amanda&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Raquel&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Cindy&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Doris&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Eve&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Evita&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Sunniva&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Tove&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Unni&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Violet&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Liza&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Elizabeth&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Ellen&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Wenche&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[]=<span class="string">&quot;Vicky&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从请求URL地址中获取q参数</span></span><br><span class="line"><span class="variable">$q</span>=<span class="variable">$_GET</span>[<span class="string">&quot;q&quot;</span>];</span><br><span class="line"><span class="comment">//查找是否有匹配值，若q&gt;0</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$q</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable">$hint</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$a</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strtolower</span>(<span class="variable">$q</span>)==<span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$a</span>[<span class="variable">$i</span>],<span class="number">0</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$q</span>))))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$hint</span>==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="variable">$hint</span>=<span class="variable">$a</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$hint</span>=<span class="variable">$hint</span>.<span class="string">&quot;,&quot;</span>.<span class="variable">$a</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若没有匹配值设置输出为“no suggestion”</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$hint</span> == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    <span class="variable">$response</span> = <span class="string">&quot;no suggestion&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$response</span> = <span class="variable">$hint</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出返回值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$response</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若JS发送了任何文本，则：</p><ol><li>查找匹配JS发送的字符的姓名</li><li>若未找到匹配，则将响应字符串设置为 “no suggestion”</li><li>若找到一个或多个匹配姓名，则用所有姓名设置响应字符串</li><li>把响应发送到“txtHint”占位符</li></ol><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>通过函数指针调用的函数，若将函数的指针作为参数传递给另一个函数，当该指针被用来调用所指向的函数时称为回调函数（将一段可执行的代码像参数传递一样传给其它代码，且其会在某个时刻被调用执行就叫做回调；若立即被执行称为同步回调，如果在之后某个时间再执行则称为异步回调）</p><h5 id="回调函数与普通函数的区别"><a href="#回调函数与普通函数的区别" class="headerlink" title="回调函数与普通函数的区别"></a>回调函数与普通函数的区别</h5><ol><li>将回调函数像参数一样传入库函数，改变传进库函数的参数可以实现不同的功能，且无需修改库函数的实现，实现了解耦</li><li>主函数和回调函数在同一层，库函数在另外一层，如果库函数不可见，则只能传入不同的回调函数</li></ol>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jktt-go笔记</title>
      <link href="/2023/02/03/jktt-go%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/03/jktt-go%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="极客兔兔—Go语言高性能编程"><a href="#极客兔兔—Go语言高性能编程" class="headerlink" title="极客兔兔—Go语言高性能编程"></a>极客兔兔—Go语言高性能编程</h2><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><h4 id="benchmark基准测试"><a href="#benchmark基准测试" class="headerlink" title="benchmark基准测试"></a>benchmark基准测试</h4><h5 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fib.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> || n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fib(n<span class="number">-2</span>) + fib(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fib_test.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">fib(<span class="number">30</span>) <span class="comment">// run fib(30) b.N times</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>go test</code>命令默认不运行benchmark用例，若需要运行则加上<code>-bench</code>参数如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go test -bench .</span><br></pre></td></tr></table></figure><p><code>-bench</code>支持传入一个正则表达式，如只运行<code>Fib</code>结尾的benchmark用例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go test -bench=&#x27;Fib$&#x27;</span><br></pre></td></tr></table></figure><h5 id="benchmark的工作机制"><a href="#benchmark的工作机制" class="headerlink" title="benchmark的工作机制"></a>benchmark的工作机制</h5><p>benchmark用例参数<code>b *testing.B</code>有个属性<code>b.N</code>表示该用例需要运行的次数，若用例能在1s内完成则<code>b.N</code>会以 1, 2, 3, 5, 10, 20, 30, 50, 100 这样的序列递增</p><h5 id="benchmark常用参数"><a href="#benchmark常用参数" class="headerlink" title="benchmark常用参数"></a>benchmark常用参数</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-cpu=2,4修改CPU核数，对结果几乎没有影响，因为Fib调用是串行的</span><br><span class="line">-benchtime=5s修改测试时间，默认时间为1s</span><br><span class="line">实际执行时间更长，因为用例编译、执行、销毁等是需要时间的</span><br><span class="line">-benchtime=30x修改执行次数</span><br><span class="line">-count=3修改执行的轮数</span><br></pre></td></tr></table></figure><h5 id="StopTimer和StartTimer"><a href="#StopTimer和StartTimer" class="headerlink" title="StopTimer和StartTimer"></a>StopTimer和StartTimer</h5><p>每次函数调用前后需要一些准备和清理工作，可以使用<code>StopTimer</code>暂时停止计时，使用<code>StartTime</code>开始计时</p><h4 id="pprof性能分析"><a href="#pprof性能分析" class="headerlink" title="pprof性能分析"></a>pprof性能分析</h4><p>benchmark 可以度量某个函数或方法的性能，若知道性能的瓶颈点在哪里，benchmark 是一个非常好的方式。但是面对一个未知的程序则需要使用pprof</p><p>pprof包含两部分：</p><ul><li>编译到程序中的<code>runtime/pprof</code>包</li><li>性能剖析工具<code>go tool pprof</code></li></ul><p>若想度量某个应用程序的CPU性能数据，只需要添加：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">pprof.StartCPUProfile(os.Stdout)</span><br><span class="line"><span class="keyword">defer</span> pprof.StopCPUProfile()</span><br></pre></td></tr></table></figure><p>该例将数据输出到标准输出<code>os.Stdout</code>中，若要定向到文件<code>cpu.pprof</code>中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go run main.go &gt; cpu.pprof </span><br></pre></td></tr></table></figure><p>也可以通过如下方式将结果记录到一个文件中：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f,_ = os.Openfile(<span class="string">&quot;cpu.pprof&quot;</span>,os.O_CREATE|os.O_RDWR,<span class="number">0644</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">pprof.StartCPUProfile(f)</span><br><span class="line"><span class="keyword">defer</span> pprof.StopCPUProfile()</span><br></pre></td></tr></table></figure><p>此时只需运行<code>go run main.go</code>即可</p><h5 id="分析数据"><a href="#分析数据" class="headerlink" title="分析数据"></a>分析数据</h5><p>可以用<code>go tool pprof</code>分析数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go tool pprof -http=:9999 cpu.pprof</span><br></pre></td></tr></table></figure><p>若提示 Graphviz 没有安装，则通过 <code>brew install graphviz</code>(MAC) 或 <code>apt install graphviz</code>(Ubuntu) 即可。访问 <code>localhost:9999</code>，可以看到：</p><p><img src="https://geektutu.com/post/hpg-pprof/bubble-sort-pprof.jpg"></p><h3 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h3><h4 id="字符串拼接性能及原理"><a href="#字符串拼接性能及原理" class="headerlink" title="字符串拼接性能及原理"></a>字符串拼接性能及原理</h4><p>go中string是不可变的，拼接的原理即创建一个新的字符串对象，若存在大量字符串拼接则对性能会产生严重影响</p><h5 id="拼接方式示例"><a href="#拼接方式示例" class="headerlink" title="拼接方式示例"></a>拼接方式示例</h5><p>为避免编译器优化，首先实现一个生成长度为n的随机字符串的函数</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> letterBytes = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomString</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">byte</span>,n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> b &#123;</span><br><span class="line">        b[i] = letterBytes[rand.Intn(<span class="built_in">len</span>(letterBytes))]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后利用这个函数生成字符串 <code>str</code>，然后将 <code>str</code> 拼接 N 次。在 Go 语言中，常见的字符串拼接方式有如下 5 种：</p><ul><li>使用<code>+</code></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">plusConcat</span><span class="params">(n <span class="type">int</span>,str <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    s := <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">s += str</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>fmt.Sprintf</code></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sprintfConcat</span><span class="params">(n <span class="type">int</span>,str <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    s := <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        s = fmt.Sprintf(<span class="string">&quot;%s%s&quot;</span>,s,str)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>strings.Builder</code></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">builderConcat</span><span class="params">(n <span class="type">int</span>, str <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> builder strings.Builder</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        builder.WriteString(str)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> builder.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>bytes.Builder</code></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bufferConcat</span><span class="params">(n <span class="type">int</span>, s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        buf.WriteString(s)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>[]byte</code></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">byteConcat</span><span class="params">(n <span class="type">int</span>, str <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="type">byte</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        buf = <span class="built_in">append</span>(buf,str...)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(buf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当长度可预知时可以预先分配切片的容量(cap)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preByteConcat</span><span class="params">(n <span class="type">int</span>, str <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>, n*<span class="built_in">len</span>(str))</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">buf = <span class="built_in">append</span>(buf, str...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用benchmark进行性能比拼"><a href="#使用benchmark进行性能比拼" class="headerlink" title="使用benchmark进行性能比拼"></a>使用benchmark进行性能比拼</h5><p>每个benchmark用例中，生成一个长度为10的字符串，并拼接1w次</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">benchmark</span><span class="params">(b *testing.B,f <span class="keyword">func</span>(<span class="type">int</span>,<span class="type">string</span>)</span></span> <span class="type">string</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> str = randomString(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        f(<span class="number">10000</span>,str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkPlusConcat</span><span class="params">(b *testing.B)</span></span> &#123;benchmark(b,plusConcat)&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSprintfConcat</span><span class="params">(b *testing.B)</span></span> &#123; benchmark(b, sprintfConcat) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBuilderConcat</span><span class="params">(b *testing.B)</span></span> &#123; benchmark(b, builderConcat) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBufferConcat</span><span class="params">(b *testing.B)</span></span>  &#123; benchmark(b, bufferConcat) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkByteConcat</span><span class="params">(b *testing.B)</span></span>    &#123; benchmark(b, byteConcat) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkPreByteConcat</span><span class="params">(b *testing.B)</span></span> &#123; benchmark(b, preByteConcat) &#125;</span><br></pre></td></tr></table></figure><p>运行该测试用例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go test -bench=&quot;Concat$&quot; -benchmem .</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example</span><br><span class="line">BenchmarkPlusConcat-8         19      56 ms/op   530 MB/op   10026 allocs/op</span><br><span class="line">BenchmarkSprintfConcat-8      10     112 ms/op   835 MB/op   37435 allocs/op</span><br><span class="line">BenchmarkBuilderConcat-8    8901    0.13 ms/op   0.5 MB/op      23 allocs/op</span><br><span class="line">BenchmarkBufferConcat-8     8130    0.14 ms/op   0.4 MB/op      13 allocs/op</span><br><span class="line">BenchmarkByteConcat-8       8984    0.12 ms/op   0.6 MB/op      24 allocs/op</span><br><span class="line">BenchmarkPreByteConcat-8   17379    0.07 ms/op   0.2 MB/op       2 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      example 8.627s</span><br></pre></td></tr></table></figure><p>因此<code>+</code>和<code>fmt.Sprintf</code>的效率最低，性能相差1000倍，且消耗了超过1000倍的内存，<code>fmt.Sprintf</code>通常用于格式化字符串，一般不用来拼接字符串。</p><p><code>strings.Builder</code>、<code>bytes.Buffer</code> 和 <code>[]byte</code> 的性能差距不大，而且消耗的内存也十分接近，性能最好且消耗内存最小的是 <code>preByteConcat</code>，这种方式预分配了内存，在字符串拼接的过程中，不需要进行字符串的拷贝，也不需要分配新的内存，因此性能最好，且内存消耗最小。</p><p>综合易用性和性能，推荐用 <code>strings.Builder</code> 拼接，<code>string.Builder</code> 也提供了预分配内存的方式 <code>Grow</code>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">builderConcat</span><span class="params">(n <span class="type">int</span>, str <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">var</span> builder strings.Builder</span><br><span class="line">builder.Grow(n * <span class="built_in">len</span>(str))</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">builder.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> builder.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了 Grow 优化后的版本的 benchmark 结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BenchmarkBuilderConcat-8   16855    0.07 ns/op   0.1 MB/op       1 allocs/op</span><br><span class="line">BenchmarkPreByteConcat-8   17379    0.07 ms/op   0.2 MB/op       2 allocs/op</span><br></pre></td></tr></table></figure><p>与预分配内存的 <code>[]byte</code> 相比，省去了 <code>[]byte</code> 和字符串之间的转换，内存分配减少了 1 次，内存消耗减半。</p><h5 id="比较strings-Builder和"><a href="#比较strings-Builder和" class="headerlink" title="比较strings.Builder和+"></a>比较strings.Builder和<code>+</code></h5><p><code>+</code>拼接2个字符串时，生成一个新的字符串，需要开辟一段新的空间，新空间大小是字符串大小之和；<code>strings.Builder</code>等的内存是以16、32等倍数形式申请的，在2048之后申请策略会有调整。</p><h5 id="比较strings-Builder和bytes-Buffer"><a href="#比较strings-Builder和bytes-Buffer" class="headerlink" title="比较strings.Builder和bytes.Buffer"></a>比较<code>strings.Builder</code>和<code>bytes.Buffer</code></h5><p> <code>strings.Builder</code> 性能比 <code>bytes.Buffer</code> 略快约 10% ，因为<code>bytes.Buffer</code> 转化为字符串时申请了一块空间，存放生成的字符串，而 <code>strings.Builder</code> 直接将底层的 <code>[]byte</code> 转换成了字符串类型返回了回来。</p><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>Go的切片是在数组之上的抽象数据类型，数组类型定义了长度和元素类型，长度不同的两个数组不能互相赋值，因为属于不同的类型；切片本质是一个数组片段的描述，包括了数组的指针，这个片段的长度和容量，切片不复制指向的元素，创建一个新的切片复用原来切片的底层数组</p><p><img src="https://geektutu.com/post/hpg-slice/slice.jpg"></p><h5 id="切片性能陷阱"><a href="#切片性能陷阱" class="headerlink" title="切片性能陷阱"></a>切片性能陷阱</h5><p>当原切片由大量元素构成，但在其上的切片只使用了一小段，底层数组仍占据了大量空间，此时推荐用<code>copy</code>代替<code>re-slice</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lastNumsBySlice</span><span class="params">(origin []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> origin[<span class="built_in">len</span>(origin)<span class="number">-2</span>:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lastNumsByCopy</span><span class="params">(origin []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    result := <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">copy</span>(result,origin[<span class="built_in">len</span>(origin)<span class="number">-2</span>:])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for和range的比较"><a href="#for和range的比较" class="headerlink" title="for和range的比较"></a>for和range的比较</h4><p><code>range</code>对每个迭代值都创建了一个拷贝，因此若每次迭代值内存占用很小的情况下，<code>for</code>和<code>range</code>性能几乎没有差异，但若每个迭代值内存占用很大则<code>for</code>的性能比<code>range</code>更好</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">persons := []<span class="keyword">struct</span>&#123; no <span class="type">int</span> &#125;&#123;&#123;no: <span class="number">1</span>&#125;,&#123;no: <span class="number">2</span>&#125;,&#123;no: <span class="number">3</span>&#125;&#125;</span><br><span class="line"><span class="keyword">for</span> _,s := <span class="keyword">range</span> persons &#123;</span><br><span class="line">    s.no += <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(person); i++ &#123;</span><br><span class="line">    person[i].no += <span class="number">100</span></span><br><span class="line">&#125; </span><br><span class="line">fmt.Println(persons)<span class="comment">//[&#123;101&#125; &#123;102&#125; &#123;103&#125;]</span></span><br></pre></td></tr></table></figure><p>上述使用<code>range</code>迭代时修改无效，因其返回的是拷贝，使用<code>for</code>迭代时修改有效</p><h4 id="Go反射"><a href="#Go反射" class="headerlink" title="Go反射"></a>Go反射</h4><p>标准库<code>reflect</code>为Go提供了运行时动态获取对象的类型和值以及动态创建对象的能力，用于序列化和反序列化的<code>json</code>、<code>gorm/xorm</code>都用到了反射</p><h5 id="反射如何简化代码"><a href="#反射如何简化代码" class="headerlink" title="反射如何简化代码"></a>反射如何简化代码</h5><p>假设有一个配置类Config，每个字段是一个配置项</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name<span class="type">string</span><span class="string">`json:&quot;server-name&quot;`</span>  <span class="comment">//CONFIG_SERVER_NAME</span></span><br><span class="line">    Ip<span class="type">string</span><span class="string">`json:&quot;server-ip&quot;`</span>  <span class="comment">// CONFIG_SERVER_IP</span></span><br><span class="line">    URL<span class="type">string</span><span class="string">`json:&quot;server-url&quot;`</span>  <span class="comment">//CONFIG_SERVER_URL</span></span><br><span class="line">    Timeout<span class="type">string</span><span class="string">`json:&quot;timeout&quot;`</span><span class="comment">//CONFIG_TIMEOUT</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现一个功能：配置默认从json文件读取，若环境变量配置了某个配置项，则以环境变量中的配置为准。配置项与环境变量对应的规则：将json字段的字母转为大写，将<code>-</code>转为下划线，并添加<code>CONFIG_</code>前缀。</p><p>实现该功能可以使用<code>switch case</code>或<code>if else</code>可以实现，但是当<code>Config</code>结构发生变化时，该部分也需要发生改变，且容易出错、不好测试</p><p>此时，可以使用reflect：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readConfig</span><span class="params">()</span></span> *Config &#123;</span><br><span class="line">    config := Config&#123;&#125;</span><br><span class="line">    typ:= reflect.Typeof(config)</span><br><span class="line">    value := reflect.Indirect(reflect.ValueOf(&amp;config))</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; typ.NumField(); i++ &#123;</span><br><span class="line">        f := typ.Field(i)</span><br><span class="line">        <span class="keyword">if</span> v,ok := f.Tag.Lookup(<span class="string">&quot;json&quot;</span>); ok &#123;</span><br><span class="line">            key := fmt.Sprintf(<span class="string">&quot;CONFIG_%s&quot;</span>,strings.ReplaceAll(strings.ToUpper(v),<span class="string">&quot;-&quot;</span>,<span class="string">&quot;_&quot;</span>))</span><br><span class="line">          <span class="keyword">if</span> env, exist := os.LookupEnv(key); exist &#123;</span><br><span class="line">value.FieldByName(f.Name).Set(reflect.ValueOf(env))</span><br><span class="line">&#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;config</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    os.Setenv(<span class="string">&quot;CONFIG_SERVER_NAME&quot;</span>, <span class="string">&quot;global_server&quot;</span>)</span><br><span class="line">os.Setenv(<span class="string">&quot;CONFIG_SERVER_IP&quot;</span>, <span class="string">&quot;10.0.0.1&quot;</span>)</span><br><span class="line">os.Setenv(<span class="string">&quot;CONFIG_SERVER_URL&quot;</span>, <span class="string">&quot;geektutu.com&quot;</span>)</span><br><span class="line">c := readConfig()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%+v&quot;</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行时利用反射获取到<code>Config</code>的每个字段的<code>Tag</code>属性，拼接出对应的环境变量的名称，查看该环境变量是否存在，若存在，则将环境变量的值赋值给该字段</p><p>环境变量中设置的配置项已经生效。之后无论结构体 <code>Config</code> 内部的字段发生任何改变，这部分代码无需任何修改即可完美的适配，出错概率也极大地降低。</p><h5 id="反射的性能"><a href="#反射的性能" class="headerlink" title="反射的性能"></a>反射的性能</h5><p>反社会增加额外的代码指令，测试对性能会产生多大的影响：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkNew</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> config *Config</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">config = <span class="built_in">new</span>(Config)</span><br><span class="line">&#125;</span><br><span class="line">_ = config</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkReflectNew</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> config *Config</span><br><span class="line">typ := reflect.TypeOf(Config&#123;&#125;)</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">config, _ = reflect.New(typ).Interface().(*Config)</span><br><span class="line">&#125;</span><br><span class="line">_ = config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go test -bench .          </span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example/hpg-reflect</span><br><span class="line">BenchmarkNew-8                  26478909                40.9 ns/op</span><br><span class="line">BenchmarkReflectNew-8           18983700                62.1 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      example/hpg-reflect     2.382s</span><br></pre></td></tr></table></figure><p>通过反射创建对象的耗时约为 <code>new</code> 的 1.5 倍，相差不是特别大。</p><h4 id="空结构体struct-的使用"><a href="#空结构体struct-的使用" class="headerlink" title="空结构体struct{}的使用"></a>空结构体struct{}的使用</h4><h5 id="空结构体是否占用空间"><a href="#空结构体是否占用空间" class="headerlink" title="空结构体是否占用空间"></a>空结构体是否占用空间</h5><p>使用<code>unsafe.Sizeof</code>计算出一个数据类型实例需要占用的字节数</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(unsafe.Sizeof(<span class="keyword">struct</span>&#123;&#125;&#123;&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>所以空结构体struct{}实例不占据任何内存空间</p><h5 id="空结构体的作用"><a href="#空结构体的作用" class="headerlink" title="空结构体的作用"></a>空结构体的作用</h5><p>被广泛作为占位符使用。一是节省资源，二是空结构体本身具有很强的语义，不需要任何值，仅作为占位符</p><h6 id="实现集合-Set"><a href="#实现集合-Set" class="headerlink" title="实现集合(Set)"></a>实现集合(Set)</h6><p>Go标准库中没有提供Set的实现，通常用map代替，对于集合来说只需要map的键，而不需要值。即使将值设置为bool也会多占据1个字节，因此可以将值类型定义为空结构体使用</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Set <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span></span> Has(key <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    _,ok := s[key]</span><br><span class="line">    <span class="keyword">return</span> ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span></span> Add(key <span class="type">string</span>) &#123;</span><br><span class="line">    s[key] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span></span> Delete(key <span class="type">string</span>) &#123;</span><br><span class="line">    <span class="built_in">delete</span>(s,key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="built_in">make</span>(Set)</span><br><span class="line">s.Add(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line">s.Add(<span class="string">&quot;Sam&quot;</span>)</span><br><span class="line">fmt.Println(s.Has(<span class="string">&quot;Tom&quot;</span>))</span><br><span class="line">fmt.Println(s.Has(<span class="string">&quot;Jack&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="不发送数据的信道-channel"><a href="#不发送数据的信道-channel" class="headerlink" title="不发送数据的信道(channel)"></a>不发送数据的信道(channel)</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    &lt;-ch</span><br><span class="line">    fmt.<span class="built_in">println</span>(<span class="string">&quot;do something&quot;</span>)</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> worker(ch)</span><br><span class="line">    ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="仅包含方法的结构体"><a href="#仅包含方法的结构体" class="headerlink" title="仅包含方法的结构体"></a>仅包含方法的结构体</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Door <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Door)</span></span> Open() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Open the door&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Door)</span></span> Close() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Close the door&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在部分场景中，结构体只包含方法，不包含任何字段，在此情况下可以用任何数据结构替代，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Door int</span><br><span class="line">type Door bool</span><br></pre></td></tr></table></figure><p>无论<code>int</code>还是<code>bool</code>都会浪费额外的内存，因此声明为空结构体最合适</p><h4 id="Go-struct内存对齐"><a href="#Go-struct内存对齐" class="headerlink" title="Go struct内存对齐"></a>Go struct内存对齐</h4><h5 id="为什么需要内存对齐"><a href="#为什么需要内存对齐" class="headerlink" title="为什么需要内存对齐"></a>为什么需要内存对齐</h5><p>CPU访问内存时不是逐个字节访问，而是以字长为单位，如32位CPU字长为4字节，则CPU访问内存单位为4字节；此设计目的是为了减少CPU访问内存的次数，所以如果不进行内存对齐很可能增加CPU访问内存的次数</p><p><img src="https://geektutu.com/post/hpg-struct-alignment/memory_alignment.png"></p><p>如上内存对齐时a和b占据4字节空间，读取b时只需1次内存访问；若不进行内存对齐则需要2次内存访问，第一次访问b的第1个字节，第二次访问b的后两个字节</p><p>简言之：合理的内存对齐可以提高内存读写的性能，便于变量操作的原子性。</p><h5 id="unsafe-Alignof"><a href="#unsafe-Alignof" class="headerlink" title="unsafe.Alignof"></a>unsafe.Alignof</h5><p><code>unsafe</code>标准库提供了<code>Alignof</code>方法，可以返回一个类型的对齐值，也可以叫做对齐系数或者对齐倍数，例如：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Args <span class="keyword">struct</span> &#123;</span><br><span class="line">    num1 <span class="type">int</span></span><br><span class="line">    num2 <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Flag <span class="keyword">struct</span> &#123;</span><br><span class="line">    num1 <span class="type">int16</span></span><br><span class="line">    num2 <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unsafe.Alignof(Args&#123;&#125;) <span class="comment">// 8</span></span><br><span class="line">unsafe.Alignof(Flag&#123;&#125;) <span class="comment">// 4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>Args&#123;&#125;</code>的对齐倍数是8，两个字段占据16个字节，是8的倍数，无需占据额外的空间对齐</li><li><code>Flag&#123;&#125;</code>的对齐倍数是4，因此<code>Flag&#123;&#125;</code>占据的空间必须是4的倍数，因此内存对齐之后是8字节</li></ul><h5 id="对齐保证-align-guarantee"><a href="#对齐保证-align-guarantee" class="headerlink" title="对齐保证(align guarantee)"></a>对齐保证(align guarantee)</h5><p>对于任意类型的变量 x ，<code>unsafe.Alignof(x)</code> 至少为 1</p><p>对于 struct 结构体类型的变量 x，计算 x 每一个字段 f ， 等于其中的最大值</p><p>对于 数组类型的变量 x，等于构成数组的元素类型的对齐倍数</p><p>没有任何字段的空 struct{} 和没有任何元素的 array 占据的内存空间大小为 0，不同的大小为 0 的变量可能指向同一块地址</p><h5 id="struct-内存对齐的技巧"><a href="#struct-内存对齐的技巧" class="headerlink" title="struct 内存对齐的技巧"></a>struct 内存对齐的技巧</h5><h6 id="合理布局减少内存占用"><a href="#合理布局减少内存占用" class="headerlink" title="合理布局减少内存占用"></a>合理布局减少内存占用</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> demo1 <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="type">int8</span></span><br><span class="line">b <span class="type">int16</span></span><br><span class="line">c <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> demo2 <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="type">int8</span></span><br><span class="line">c <span class="type">int32</span></span><br><span class="line">b <span class="type">int16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(unsafe.Sizeof(demo1&#123;&#125;)) <span class="comment">// 8</span></span><br><span class="line">fmt.Println(unsafe.Sizeof(demo2&#123;&#125;)) <span class="comment">// 12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示，结构体中字段的顺序会对struct的大小产生影响，字段按照自身对齐倍数确定内存中偏移量，字段排列顺序不同，上一字段因偏移浪费的大小也不同</p><p>对于demo1：</p><ul><li>a是第一个字段，默认已对齐，从第0个位置开始占据1个字节</li><li>b是第二个字段，对齐倍数为2，必须空出1个位置，从第2个位置占据2字节</li><li>c是第三个字段，对齐倍数为4，此时内存是对齐的，从第4个位置占据4字节</li></ul><p>因此demo1的内存占用为8字节</p><p>对于demo2：</p><ul><li>a 是第一个字段，默认是已经对齐的，从第 0 个位置开始占据 1 字节</li><li>c 是第二个字段，对齐倍数为 4，因此，必须空出 3 个字节，偏移量才是 4 的倍数，从第 4 个位置开始占据 4 字节</li><li>b 是第三个字段，对齐倍数为 2，从第 8 个位置开始占据 2 字节</li></ul><p>demo2 的对齐倍数由 c 的对齐倍数决定，因此，demo2 的内存占用为 12 字节</p><p><img src="https://geektutu.com/post/hpg-struct-alignment/memory_alignment_order.png"></p><p>在对内存特别敏感的结构体设计上，可以通过调整字段顺序，减少内存的占用</p><h6 id="空-struct-的对齐"><a href="#空-struct-的对齐" class="headerlink" title="空 struct{} 的对齐"></a>空 struct{} 的对齐</h6><p>空 <code>struct&#123;&#125;</code> 大小为 0，作为其他 struct 的字段时，一般不需要内存对齐。但是有一种情况除外：即当 <code>struct&#123;&#125;</code> 作为结构体最后一个字段时，需要内存对齐。因为如果有指针指向该字段, 返回的地址将在结构体之外，如果此指针一直存活不释放对应的内存，就会有内存泄露的问题（该内存不因结构体释放而释放）</p><p>当 <code>struct&#123;&#125;</code> 作为其他 struct 最后一个字段时，需要填充额外的内存保证安全</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> demo3 <span class="keyword">struct</span> &#123;</span><br><span class="line">c <span class="type">int32</span></span><br><span class="line">a <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> demo4 <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">c <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(unsafe.Sizeof(demo3&#123;&#125;)) <span class="comment">// 8</span></span><br><span class="line">fmt.Println(unsafe.Sizeof(demo4&#123;&#125;)) <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到demo3额外填充了字段C的大小，即额外填充了4字节空间</p><h3 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h3><h4 id="读写锁和互斥锁"><a href="#读写锁和互斥锁" class="headerlink" title="读写锁和互斥锁"></a>读写锁和互斥锁</h4><h5 id="读写锁和互斥锁的区别"><a href="#读写锁和互斥锁的区别" class="headerlink" title="读写锁和互斥锁的区别"></a>读写锁和互斥锁的区别</h5><h6 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h6><p>互斥即不可同时运行，两个代码片段互相排斥，只有其中一个代码片段执行完后另一个才能执行</p><p>Go 标准库中提供了 sync.Mutex 互斥锁类型及其两个方法：</p><ul><li>Lock加锁</li><li>Unlock释放锁</li></ul><p>可以在代码前调用Lock方法，在代码后调用Unlock方法保证代码的互斥执行，也可以用defer语句保证互斥锁一定会被解锁。在一个 Go 协程调用 Lock 方法获得锁后，其他请求锁的协程都会阻塞在 Lock 方法，直到锁被释放。</p><h6 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h6><p>多用于银行存取钱操作，大部分情况下读取余额的操作会更频繁，如果能保证读取余额的操作并发执行，程序的效率会得到很大提高</p><p>保证读操作的安全，那只要保证并发读时没有写操作在进行就行。在这种场景下我们需要一种特殊类型的锁，其允许多个只读操作并行执行，但写操作会互斥。</p><p>这种锁称之为 <code>多读单写锁</code> (multiple readers, single writer lock)，简称读写锁，读写锁分为读锁和写锁，读锁是允许同时执行的，但写锁是互斥的。一般来说，有如下几种情况：</p><ul><li>读锁之间不互斥，没有写锁的情况下，读锁是无阻塞的，多个协程可以同时获得读锁。</li><li>写锁之间是互斥的，存在写锁，其他写锁阻塞。</li><li>写锁与读锁是互斥的，若存在读锁，写锁阻塞，若存在写锁，读锁阻塞。</li></ul><p>Go 标准库中提供了 sync.RWMutex 互斥锁类型及其四个方法：</p><ul><li>Lock 加写锁</li><li>Unlock 释放写锁</li><li>RLock 加读锁</li><li>RUnlock 释放读锁</li></ul><p>读写锁的存在是为了解决读多写少时的性能问题，读场景较多时，读写锁可有效地减少锁阻塞的时间</p><h5 id="读写锁和互斥锁性能比较"><a href="#读写锁和互斥锁性能比较" class="headerlink" title="读写锁和互斥锁性能比较"></a>读写锁和互斥锁性能比较</h5><p>接下来，我们测试三种情景下，互斥锁和读写锁的性能差异：</p><ul><li>读多写少(读占 90%)</li><li>读少写多(读占 10%)</li><li>读写一致(各占 50%)</li></ul><h6 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h6><p>接下来我们实现 2 个结构体 <code>Lock</code> 和 <code>RWLock</code>，并且都继承 <code>RW</code> 接口。<code>RW</code> 接口中定义了 2 个操作，读(Read)和写(Write)，为了降低其他指令对测试的影响，假定每个读写操作耗时 1 微秒(百万分之一秒)。</p><p><code>Lock</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> RW <span class="keyword">interface</span> &#123;</span><br><span class="line">Write()</span><br><span class="line">Read()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cost = time.Microsecond</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Lock <span class="keyword">struct</span> &#123;</span><br><span class="line">count <span class="type">int</span></span><br><span class="line">mu    sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Lock)</span></span> Write() &#123;</span><br><span class="line">l.mu.Lock()</span><br><span class="line">l.count++</span><br><span class="line">time.Sleep(cost)</span><br><span class="line">l.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Lock)</span></span> Read() &#123;</span><br><span class="line">l.mu.Lock()</span><br><span class="line">time.Sleep(cost)</span><br><span class="line">_ = l.count</span><br><span class="line">l.mu.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RWLock</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> RWLock <span class="keyword">struct</span> &#123;</span><br><span class="line">count <span class="type">int</span></span><br><span class="line">mu    sync.RWMutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *RWLock)</span></span> Write() &#123;</span><br><span class="line">l.mu.Lock()</span><br><span class="line">l.count++</span><br><span class="line">time.Sleep(cost)</span><br><span class="line">l.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *RWLock)</span></span> Read() &#123;</span><br><span class="line">l.mu.RLock()</span><br><span class="line">_ = l.count</span><br><span class="line">time.Sleep(cost)</span><br><span class="line">l.mu.RUnlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">benchmark</span><span class="params">(b *testing.B, rw RW, read, write <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> k := <span class="number">0</span>; k &lt; read*<span class="number">100</span>; k++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">rw.Read()</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k := <span class="number">0</span>; k &lt; write*<span class="number">100</span>; k++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">rw.Write()</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkReadMore</span><span class="params">(b *testing.B)</span></span>    &#123; benchmark(b, &amp;Lock&#123;&#125;, <span class="number">9</span>, <span class="number">1</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkReadMoreRW</span><span class="params">(b *testing.B)</span></span>  &#123; benchmark(b, &amp;RWLock&#123;&#125;, <span class="number">9</span>, <span class="number">1</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkWriteMore</span><span class="params">(b *testing.B)</span></span>   &#123; benchmark(b, &amp;Lock&#123;&#125;, <span class="number">1</span>, <span class="number">9</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkWriteMoreRW</span><span class="params">(b *testing.B)</span></span> &#123; benchmark(b, &amp;RWLock&#123;&#125;, <span class="number">1</span>, <span class="number">9</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkEqual</span><span class="params">(b *testing.B)</span></span>       &#123; benchmark(b, &amp;Lock&#123;&#125;, <span class="number">5</span>, <span class="number">5</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkEqualRW</span><span class="params">(b *testing.B)</span></span>     &#123; benchmark(b, &amp;RWLock&#123;&#125;, <span class="number">5</span>, <span class="number">5</span>) &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go test -bench .</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: example/hpg-mutex</span><br><span class="line">BenchmarkReadMore-8                   86          13202572 ns/op</span><br><span class="line">BenchmarkReadMoreRW-8                661           1748724 ns/op</span><br><span class="line">BenchmarkWriteMore-8                  87          13109525 ns/op</span><br><span class="line">BenchmarkWriteMoreRW-8                94          12090900 ns/op</span><br><span class="line">BenchmarkEqual-8                      85          13150321 ns/op</span><br><span class="line">BenchmarkEqualRW-8                   176           6770092 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      example/hpg-mutex       7.816s</span><br></pre></td></tr></table></figure><h5 id="互斥锁如何实现公平"><a href="#互斥锁如何实现公平" class="headerlink" title="互斥锁如何实现公平"></a>互斥锁如何实现公平</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">互斥锁有两种状态：正常状态和饥饿状态。</span><br><span class="line"></span><br><span class="line">在正常状态下，所有等待锁的 goroutine 按照FIFO顺序等待。唤醒的 goroutine 不会直接拥有锁，而是会和新请求锁的 goroutine 竞争锁的拥有。新请求锁的 goroutine 具有优势：它正在 CPU 上执行，而且可能有好几个，所以刚刚唤醒的 goroutine 有很大可能在锁竞争中失败。在这种情况下，这个被唤醒的 goroutine 会加入到等待队列的前面。 如果一个等待的 goroutine 超过 1ms 没有获取锁，那么它将会把锁转变为饥饿模式。</span><br><span class="line"></span><br><span class="line">在饥饿模式下，锁的所有权将从 unlock 的 goroutine 直接交给交给等待队列中的第一个。新来的 goroutine 将不会尝试去获得锁，即使锁看起来是 unlock 状态, 也不会去尝试自旋操作，而是放在等待队列的尾部。</span><br><span class="line"></span><br><span class="line">如果一个等待的 goroutine 获取了锁，并且满足一以下其中的任何一个条件：(1)它是队列中的最后一个；(2)它等待的时候小于1ms。它会将锁的状态转换为正常状态。</span><br><span class="line"></span><br><span class="line">正常状态有很好的性能表现，饥饿模式也是非常重要的，因它能阻止尾部延迟的现象。</span><br></pre></td></tr></table></figure><h4 id="如何退出协程"><a href="#如何退出协程" class="headerlink" title="如何退出协程"></a>如何退出协程</h4><h5 id="超时返回时的陷阱"><a href="#超时返回时的陷阱" class="headerlink" title="超时返回时的陷阱"></a>超时返回时的陷阱</h5><h6 id="time-After实现超时控制"><a href="#time-After实现超时控制" class="headerlink" title="time.After实现超时控制"></a>time.After实现超时控制</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doBadthing</span><span class="params">(done <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeout</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span></span>) <span class="type">error</span> &#123;</span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line"><span class="keyword">go</span> f(done)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line">fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Millisecond):</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// timeout(doBadthing)</span></span><br></pre></td></tr></table></figure><p>上述代码执行思路：</p><ul><li>利用<code>time.After</code>启动了一个异步的定时器，返回一个channel，当超过指定时间后，该channel将会接收到信号</li><li>启动了子协程执行函数f，函数执行结束后，向channel<code>done</code>发送结束信号</li><li>select等待<code>done</code>或<code>time.After</code>的信息，若超时返回错误，若未超时返回nil</li></ul><h6 id="测试超时时协程是否退出"><a href="#测试超时时协程是否退出" class="headerlink" title="测试超时时协程是否退出"></a>测试超时时协程是否退出</h6><p>在该例中超时时间为1ms，但<code>doBadthing</code>需要1s才能结束运行，因此<code>timeout(doBadthing)</code>一定会触发超时</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(t *testing.T, f <span class="keyword">func</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span></span>) &#123;</span><br><span class="line">t.Helper()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">timeout(f)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">t.Log(runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBadTimeout</span><span class="params">(t *testing.T)</span></span>  &#123; test(t, doBadthing) &#125;</span><br></pre></td></tr></table></figure><ul><li><code>timeout(doBadthing)</code> 调用了 1000 次，理论上会启动 1000 个子协程。</li><li>利用 <code>runtime.NumGoroutine()</code> 打印当前程序的协程个数。</li><li>因为 <code>doBadthing</code> 执行时间为 1s，因此打印协程个数前，等待 2s，确保函数执行完毕。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go test -run ^TestBadTimeout$ . -v</span><br><span class="line">=== RUN   TestBadTimeout</span><br><span class="line">--- PASS: TestBadTimeout (3.43s)</span><br><span class="line">    timeout_test.go:49: 1002</span><br></pre></td></tr></table></figure><p>最终程序中存在着 1002 个子协程，说明即使是函数执行完成，协程也没有正常退出,问题在于<code>done</code>是一个无缓冲区的channel，若未超时，<code>doBadthing</code>向done发送信号，<code>select</code>接收done的信号，故<code>doBadthing</code>能够正常退出，子协程也能正常退出；</p><p>但是，当超时发生时，select接收到<code>time.After</code>的超市信号就返回了，<code>done</code>没有了接收方，而 <code>doBadthing</code> 在执行 1s 后向 <code>done</code> 发送信号，由于没有接收者且无缓存区，发送者(sender)会一直阻塞，导致协程不能退出。</p><h5 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h5><h6 id="创建有缓冲区的channel"><a href="#创建有缓冲区的channel" class="headerlink" title="创建有缓冲区的channel"></a>创建有缓冲区的channel</h6><p>即创建channel<code>done</code>时，缓冲区设置为1，即使没有接收方，发送方也不会阻塞</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeoutWithBuffer</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span></span>) <span class="type">error</span> &#123;</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> f(done)</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;- done: </span><br><span class="line">        fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">case</span> &lt;- time.After(time.Millisecond):</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBufferTimeout</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">timeoutWithBuffer(doBadthing)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">t.Log(runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go test -run ^TestBufferTimeout$ . -v</span><br><span class="line">=== RUN   TestBufferTimeout</span><br><span class="line">--- PASS: TestBufferTimeout (3.36s)</span><br><span class="line">    timeout_test.go:65: 2</span><br></pre></td></tr></table></figure><p>协程数量下降为 2，创建的 1000 个子协程成功退出</p><h6 id="使用select尝试发送"><a href="#使用select尝试发送" class="headerlink" title="使用select尝试发送"></a>使用select尝试发送</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doGoodthing</span><span class="params">(done <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> done &lt;- <span class="literal">true</span>:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGoodTimeout</span><span class="params">(t *testing.T)</span></span> &#123; test(t, doGoodthing) &#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go test -run ^TestGoodTimeout$ . -v</span><br><span class="line">=== RUN   TestGoodTimeout</span><br><span class="line">--- PASS: TestGoodTimeout (3.40s)</span><br><span class="line">    timeout_test.go:58: 2</span><br></pre></td></tr></table></figure><p>使用 select 尝试向信道 done 发送信号，如果发送失败，则说明缺少接收者(receiver)，即超时了，那么直接退出即可</p><h6 id="分开检测"><a href="#分开检测" class="headerlink" title="分开检测"></a>分开检测</h6><p>将任务拆分为多段，只检测第一段是否超时，若没有超时，后续任务继续执行，超时则终止</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do2phases</span><span class="params">(phase1, done <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line">time.Sleep(time.Second) <span class="comment">// 第 1 段</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> phase1 &lt;- <span class="literal">true</span>:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second) <span class="comment">// 第 2 段</span></span><br><span class="line">done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeoutFirstPhase</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">phase1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line"><span class="keyword">go</span> do2phases(phase1, done)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-phase1:</span><br><span class="line">&lt;-done</span><br><span class="line">fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Millisecond):</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test2phasesTimeout</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">timeoutFirstPhase()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">t.Log(runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该场景的实际应用有：将服务端接收请求后的任务拆分为2段，一段是执行任务，一段是发送结果：</p><ul><li>任务正常执行，向客户端返回执行结果。</li><li>任务超时执行，向客户端返回超时。</li></ul><p>这种情况下，就只能够使用 select，而不能能够设置缓冲区的方式了。因为如果给信道 phase1 设置了缓冲区，<code>phase1 &lt;- true</code> 总能执行成功，那么无论是否超时，都会执行到第二阶段，而没有即时返回，这是我们不愿意看到的。对应到上面的业务，就可能发生一种异常情况，向客户端发送了 2 次响应：</p><ul><li>任务超时执行，向客户端返回超时，一段时间后，向客户端返回执行结果。</li></ul><p>缓冲区不能够区分是否超时了，但是 select 可以（没有接收方，信道发送信号失败，则说明超时了）</p><h5 id="能否强制kill-goroutine"><a href="#能否强制kill-goroutine" class="headerlink" title="能否强制kill goroutine"></a>能否强制kill goroutine</h5><p>不能，goroutine 只能自己退出，而不能被其他 goroutine 强制关闭或杀死</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goroutine 被设计为不可以从外部无条件地结束掉，只能通过 channel 来与它通信。也就是说，每一个 goroutine 都需要承担自己退出的责任</span><br></pre></td></tr></table></figure><h5 id="channel忘记关闭的陷阱"><a href="#channel忘记关闭的陷阱" class="headerlink" title="channel忘记关闭的陷阱"></a>channel忘记关闭的陷阱</h5><p>在实际场景中，也有可能因为协程使用不当，导致无法退出的情况，随着时间的积累，造成内存耗尽、程序崩溃</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(taskCh <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> t := &lt;-taskCh:</span><br><span class="line">            time.Sleep(time.Millisecond)</span><br><span class="line">fmt.Printf(<span class="string">&quot;task %d is done\n&quot;</span>, t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendTasks</span><span class="params">()</span></span> &#123;</span><br><span class="line">    taskCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>,<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">go</span> do(taskCh)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">        taskCh &lt;- i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDo</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    t.Log(runtime.NumGoroutine())</span><br><span class="line">    sendTasks()</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">t.Log(runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>do</code> 实现非常简单，for + select 的模式，等待 taskCh 传递任务，并执行</li><li><code>sendTasks</code> 模拟向信道中发送任务</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go test . -v</span><br><span class="line">--- PASS: TestDo (2.34s)</span><br><span class="line">    exit_test.go:29: 2</span><br><span class="line">    exit_test.go:32: 3</span><br></pre></td></tr></table></figure><p>子协程多了一个，也就是说，有一个协程一直没有得到释放，<code>sendTasks</code>中启动了一个子协程 <code>go do(taskCh)</code>，因为这个协程一直处于阻塞状态，等待接收任务，因此直到程序结束，协程也没有释放</p><h6 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doCheckClose</span><span class="params">(taskCh <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> t, beforeClosed := &lt;-taskCh:</span><br><span class="line"><span class="keyword">if</span> !beforeClosed &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;taskCh has been closed&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">fmt.Printf(<span class="string">&quot;task %d is done\n&quot;</span>, t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendTasksCheckClose</span><span class="params">()</span></span> &#123;</span><br><span class="line">taskCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">go</span> doCheckClose(taskCh)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">taskCh &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(taskCh)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDoCheckClose</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(runtime.NumGoroutine())</span><br><span class="line">sendTasksCheckClose()</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">runtime.GC()</span><br><span class="line">t.Log(runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个地方修改下即可：</p><ul><li><code>t, beforeClosed := &lt;-taskCh</code> 判断 channel 是否已经关闭，beforeClosed 为 false 表示信道已被关闭。若关闭，则不再阻塞等待，直接返回，对应的协程随之退出。</li><li><code>sendTasks</code> 函数中，任务发送结束之后，使用 <code>close(taskCh)</code> 将 channel taskCh 关闭。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go test -run=TestDoCheckClose -v</span><br><span class="line">task 999 is done</span><br><span class="line">taskCh has been closed</span><br><span class="line">--- PASS: TestDoCheckClose (2.34s)</span><br><span class="line">    exit_test.go:59: 2</span><br><span class="line">    exit_test.go:63: 2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于通道和协程的垃圾回收</span><br><span class="line"></span><br><span class="line">注意，一个通道被其发送数据协程队列和接收数据协程队列中的所有协程引用着。因此，如果一个通道的这两个队列只要有一个不为空，则此通道肯定不会被垃圾回收。另一方面，若一个协程处于一个通道的某个协程队列之中，则此协程也肯定不会被垃圾回收，即使此通道仅被此协程所引用。事实上，一个协程只有在退出后才能被垃圾回收。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通道关闭原则</span><br><span class="line"></span><br><span class="line">只应当让一个通道唯一的发送者关闭此通道</span><br></pre></td></tr></table></figure><h6 id="关闭channel的方法"><a href="#关闭channel的方法" class="headerlink" title="关闭channel的方法"></a>关闭channel的方法</h6><ul><li><p>粗鲁的方式（非常不推荐）</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SafeClose</span><span class="params">(ch <span class="keyword">chan</span> T)</span></span> (justClosed <span class="type">bool</span>) &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">recover</span>() != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// 一个函数的返回结果可以在defer调用中修改</span></span><br><span class="line">            justClosed = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//假设ch != nil</span></span><br><span class="line">    <span class="built_in">close</span>(ch)<span class="comment">//若ch已关闭，将panic</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span><span class="comment">//&lt;=&gt; justClosed = true; return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>礼貌的方式</p><p>使用sync.Once或互斥锁确保channel只被关闭一次</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyChannel <span class="keyword">struct</span> &#123;</span><br><span class="line">    C<span class="keyword">chan</span> T</span><br><span class="line">    oncesync.Once</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMyChannel</span><span class="params">()</span></span> *MyChannel &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;MyChannel&#123;C:<span class="built_in">make</span>(<span class="keyword">chan</span> T)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mc *MyChannel)</span></span> SafeClose() &#123;</span><br><span class="line">    mc.once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">close</span>(mc.C)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="控制协程的并发数量"><a href="#控制协程的并发数量" class="headerlink" title="控制协程的并发数量"></a>控制协程的并发数量</h4><p>不同的应用程序，消耗的资源是不一样的。比较推荐的方式的是：应用程序来主动限制并发的协程数量</p><h5 id="利用channel的缓存区"><a href="#利用channel的缓存区" class="headerlink" title="利用channel的缓存区"></a>利用channel的缓存区</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        ch &lt;- <span class="keyword">struct</span>&#123;&#125;()</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            time.Sleep(time.Second)</span><br><span class="line">&lt;-ch</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>make(chan struct&#123;&#125;, 3)</code> 创建缓冲区大小为 3 的 channel，在没有被接收的情况下，至多发送 3 个消息则被阻塞</li><li>开启协程前，调用 <code>ch &lt;- struct&#123;&#125;&#123;&#125;</code>，若缓存区满，则阻塞</li><li>协程任务结束，调用 <code>&lt;-ch</code> 释放缓冲区</li><li><code>sync.WaitGroup</code> 并不是必须的，例如 http 服务，每个请求天然是并发的，此时使用 channel 控制并发处理的任务数量，就不需要 <code>sync.WaitGroup</code></li></ul><h5 id="利用第三方库"><a href="#利用第三方库" class="headerlink" title="利用第三方库"></a>利用第三方库</h5><p><code>tunny</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/Jeffail/tunny&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pool := tunny.NewFunc(<span class="number">3</span>,<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">        log.Println(i)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">defer</span> pool.Close()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> pool.Process(i)</span><br><span class="line">&#125;</span><br><span class="line">    time.Sleep(time.Second * <span class="number">4</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>tunny.NewFunc(3, f)</code> 第一个参数是协程池的大小(poolSize)，第二个参数是协程运行的函数(worker)。</li><li><code>pool.Process(i)</code> 将参数 i 传递给协程池定义好的 worker 处理。</li><li><code>pool.Close()</code> 关闭协程池。</li></ul><h4 id="sync-Pool复用对象"><a href="#sync-Pool复用对象" class="headerlink" title="sync.Pool复用对象"></a>sync.Pool复用对象</h4><h5 id="sync-Pool的使用场景"><a href="#sync-Pool的使用场景" class="headerlink" title="sync.Pool的使用场景"></a>sync.Pool的使用场景</h5><p>保存和复用临时对象，减少内存分配，降低GC压力；sync.Pool用于存储被分配了但是没有被使用，而未来可能会使用的值，这样就可以不用再次经过内存分配</p><p>sync.Pool 的大小是可伸缩的，高负载时会动态扩容，存放在池中的对象如果不活跃了会被自动清理</p><h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><h6 id="声明对象池"><a href="#声明对象池" class="headerlink" title="声明对象池"></a>声明对象池</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> studentPool = sync.Pool &#123;</span><br><span class="line">    New: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Student)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Get-amp-Put"><a href="#Get-amp-Put" class="headerlink" title="Get &amp; Put"></a>Get &amp; Put</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">stu := studentPool.Get().(*Student)</span><br><span class="line">json.Unmarshal(buf,stu)</span><br><span class="line">studentPool.Put(stu)</span><br></pre></td></tr></table></figure><ul><li><code>Get()</code>从对象池中获取对象，因返回值是<code>interface&#123;&#125;</code>，因此需要类型转换</li><li><code>Put()</code>在对象使用完毕后，返回对象池</li></ul><h4 id="sync-Once如何提升性能"><a href="#sync-Once如何提升性能" class="headerlink" title="sync.Once如何提升性能"></a>sync.Once如何提升性能</h4><p>使函数只执行一次的实现，常应用于单例模式，如：初始化配置、保持数据库连接等，作用与<code>init</code>函数类似</p><p><code>sync.Once</code> 常被用于控制变量的初始化，这个变量的读写满足如下三个条件：</p><ul><li>当且仅当第一次访问某个变量时，进行初始化（写）；</li><li>变量初始化过程中，所有读都被阻塞，直到初始化完成；</li><li>变量仅初始化一次，初始化完成后驻留在内存里。</li></ul><p><code>sync.Once</code> 仅提供了一个方法 <code>Do</code>，参数 f 是对象初始化函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (o *Once) Do(f func())</span><br></pre></td></tr></table></figure><h5 id="简单demo"><a href="#简单demo" class="headerlink" title="简单demo"></a>简单demo</h5><p>使用场景：ReadConfig需要读取环境变量并转换为对应的配置。环境变量在程序执行前已经确定，执行过程中不会发生改变。ReadConfig 可能会被多个协程并发调用，为了提升性能，使用 <code>sync.Once</code> 是一个比较好的方式</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">Server <span class="type">string</span></span><br><span class="line">Port   <span class="type">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">once   sync.Once</span><br><span class="line">config *Config</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadConfig</span><span class="params">()</span></span> *Config &#123;</span><br><span class="line">    once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">        config = &amp;Config&#123;Server: os.Getenv(<span class="string">&quot;TT_SERVER_URL&quot;</span>)&#125;</span><br><span class="line">        config.Port,err = strconv.ParseInt(os.Getenv(<span class="string">&quot;TT_PORT&quot;</span>), <span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">config.Port = <span class="number">8080</span> <span class="comment">// default port</span></span><br><span class="line">        &#125;</span><br><span class="line">        log.Println(<span class="string">&quot;init config&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_ = ReadConfig()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="sync-Once的原理"><a href="#sync-Once的原理" class="headerlink" title="sync.Once的原理"></a>sync.Once的原理</h5><p>首先：保证变量仅被初始化一次，需要有个标志判断变量是否已初始化过，若没有则需要初始化</p><p>第二：线程安全，支持并发，无疑需要互斥锁实现</p><h5 id="sync-Once的源码实现"><a href="#sync-Once的源码实现" class="headerlink" title="sync.Once的源码实现"></a>sync.Once的源码实现</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sync</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用done标记是否已经初始化，使用锁m实现线程安全</span></span><br><span class="line"><span class="keyword">type</span> Once <span class="keyword">struct</span> &#123;</span><br><span class="line">    done unit32</span><br><span class="line">    m Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span></span> Do(f <span class="function"><span class="keyword">func</span><span class="params">()</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="number">0</span> &#123;</span><br><span class="line">        o.doSlow(f)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span></span> doSlow(f <span class="function"><span class="keyword">func</span><span class="params">()</span></span>) &#123;</span><br><span class="line">    o.m.Lock()</span><br><span class="line">    <span class="keyword">defer</span> o.m.Unlock</span><br><span class="line">    <span class="keyword">if</span> o.done == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> atomic.StoreUint32(&amp;o.done,<span class="number">1</span>)</span><br><span class="line">        f()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="done为什么是第一个字段"><a href="#done为什么是第一个字段" class="headerlink" title="done为什么是第一个字段"></a>done为什么是第一个字段</h6><p>done在热路径中，done放在第一个字段能够减少CPU指令，这样做能提升性能</p><ul><li>热路径是程序频繁执行的一系列指令，sync.Once 大部分场景会访问 <code>o.done</code></li><li>结构体第一个字段的地址和结构体的指针是相同的，若是第一个字段，直接对结构体指针解引用即可，若是其它字段还需计算与第一个值的偏移。在机器码中，偏移量是随指令传递的附加值，CPU需要做一次偏移值与指针的加法运算才能获取访问值的地址，访问第一个字段的机器码更紧凑，速度更快</li></ul><h4 id="sync-Cond条件变量"><a href="#sync-Cond条件变量" class="headerlink" title="sync.Cond条件变量"></a>sync.Cond条件变量</h4><h5 id="sync-Cond的使用场景"><a href="#sync-Cond的使用场景" class="headerlink" title="sync.Cond的使用场景"></a>sync.Cond的使用场景</h5><p>用于协调想要访问共享资源的goroutine，当共享资源状态发生变化时用来通知被互斥锁阻塞的goroutine；<code>sync.Cond</code>常用在多goroutine等待，一个goroutine通知（事件发生）的场景，如果是一个通知，一个等待，使用互斥锁或channel就能搞定。</p><p>模拟一个场景：</p><p>有一个协程在异步地接收数据，剩下的多个协程必须等待该协程接收完数据才能读取到正确的数据，此时使用chan或互斥锁则只能有一个协程可以等待并读取数据；需要有一个全局变量标记第一个协程数据是否接收完毕，剩下的协程反复检查该变量的值，直到满足要求，或者创建多个channel，每个协程阻塞在一个channel上，由接收数据的协程在数据接收完毕后逐个通知。</p><p>Go 语言在标准库 sync 中内置一个 <code>sync.Cond</code> 用来解决这类问题</p><h5 id="sync-Cond-的四个方法"><a href="#sync-Cond-的四个方法" class="headerlink" title="sync.Cond 的四个方法"></a>sync.Cond 的四个方法</h5><p>sync.Cond 的定义如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Cond <span class="keyword">struct</span> &#123;</span><br><span class="line">    noCopy noCopy</span><br><span class="line">    L Locker</span><br><span class="line">    notifynotifyList</span><br><span class="line">    checkercopyChecker</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="NewCond创建实例"><a href="#NewCond创建实例" class="headerlink" title="NewCond创建实例"></a>NewCond创建实例</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func NewCond(l Locker) *Cond</span><br></pre></td></tr></table></figure><p>NewCond创建Cond实例时需要关联一个锁</p><h6 id="Broadcast广播唤醒所有"><a href="#Broadcast广播唤醒所有" class="headerlink" title="Broadcast广播唤醒所有"></a>Broadcast广播唤醒所有</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (c *Cond) Broadcast()</span><br></pre></td></tr></table></figure><p>Broadcast唤醒所有等待条件变量c的goroutine，无需锁保护</p><h6 id="Signal唤醒一个协程"><a href="#Signal唤醒一个协程" class="headerlink" title="Signal唤醒一个协程"></a>Signal唤醒一个协程</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (c *Cond) Signal()</span><br></pre></td></tr></table></figure><p>Signal只唤醒任意1个等待条件变量c的goroutine，无需锁保护</p><h6 id="Wait等待"><a href="#Wait等待" class="headerlink" title="Wait等待"></a>Wait等待</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (c *Cond) wait()</span><br></pre></td></tr></table></figure><p>调用Wait会自动释放锁c.L，并挂起调用者所在的goroutine，因此当前协程会阻塞在Wait方法调用的地方，如果其它协程调用Signal或Broadcast唤醒该协程，那么Wait方法在结束阻塞时会重新给c.L加锁继续执行Wait后面的代码</p><p>对条件的检查，使用了 <code>for !condition()</code> 而非 <code>if</code>，是因为当前协程被唤醒时，条件不一定符合要求，需要再次 Wait 等待下次被唤醒。为了保险起见，使用 <code>for</code> 能够确保条件符合要求后，再执行后续的代码</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c.L.Lock()</span><br><span class="line"><span class="keyword">for</span> !condition() &#123;</span><br><span class="line">c.Wait()</span><br><span class="line">&#125;</span><br><span class="line">... <span class="built_in">make</span> use of condition ...</span><br><span class="line">c.L.Unlock()</span><br></pre></td></tr></table></figure><h5 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h5><p>下面场景中三个协程调用<code>Wait()</code>等待，另一个协程调用<code>Broadcast()</code>唤醒所有等待的协程</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> done = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">(name <span class="type">string</span>,c *sync.Cond)</span></span> &#123;</span><br><span class="line">    c.L.Lock()</span><br><span class="line">    <span class="keyword">for</span> !done &#123;</span><br><span class="line">        c.Wait()</span><br><span class="line">    &#125;</span><br><span class="line">    log.Println(name, <span class="string">&quot;starts reading&quot;</span>)</span><br><span class="line">    c.L.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">(name <span class="type">string</span>,c *sync.Cond)</span></span> &#123;</span><br><span class="line">    log.Println(name,<span class="string">&quot;starts writing&quot;</span>)</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    c.L.Lock()</span><br><span class="line">    done = <span class="literal">true</span></span><br><span class="line">    c.L.Unlock</span><br><span class="line">    log.Println(name, <span class="string">&quot;wakes all&quot;</span>)</span><br><span class="line">c.Broadcast()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cond := sync.NewCond(&amp;sync.Mutex&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> read(<span class="string">&quot;reader1&quot;</span>, cond)</span><br><span class="line"><span class="keyword">go</span> read(<span class="string">&quot;reader2&quot;</span>, cond)</span><br><span class="line"><span class="keyword">go</span> read(<span class="string">&quot;reader3&quot;</span>, cond)</span><br><span class="line">write(<span class="string">&quot;writer&quot;</span>, cond)</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>done</code>即互斥锁需要保护的条件变量</li><li><code>read()</code>调用<code>wait()</code>等待通知，直到done为true</li><li><code>write()</code>接收数据，接收完成后将done置为true，调用<code>Broadcast()</code>通知所有等待的协程</li><li><code>write()</code>中的暂停了1s，一方面是模拟耗时，另一方面确保前面的3个read协程都执行到<code>Wait()</code>，处于等待状态。main函数最后暂停了3s，确保所有操作执行完毕</li></ul><h3 id="编译优化"><a href="#编译优化" class="headerlink" title="编译优化"></a>编译优化</h3><h4 id="减小编译体积"><a href="#减小编译体积" class="headerlink" title="减小编译体积"></a>减小编译体积</h4><h5 id="默认编译"><a href="#默认编译" class="headerlink" title="默认编译"></a>默认编译</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go build -o server main.go</span><br><span class="line">$ ls -lh server</span><br><span class="line">-rwxr-xr-x  1 dj  staff   9.8M Dec  7 23:57 server</span><br></pre></td></tr></table></figure><h5 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h5><p>Go编译器默认编译的程序会带有符号表和调试信息，一般来说release版本可以去除调试信息以减少二进制体积</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go build -ldflags=&quot;-s -w&quot; -o server main.go</span><br><span class="line">$ ls -lh server</span><br><span class="line">-rwxr-xr-x  1 dj  staff   7.8M Dec  8 00:29 server</span><br></pre></td></tr></table></figure><ul><li>-s：忽略符号表和调试信息</li><li>-w：忽略DWARFv3调试信息，使用该选项后将无法使用gdb进行调试</li></ul><h5 id="使用upx"><a href="#使用upx" class="headerlink" title="使用upx"></a>使用upx</h5><p>upx 有很多参数，最重要的是压缩率，<code>1-9</code>，<code>1</code> 代表最低压缩率，<code>9</code> 代表最高</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> build -o server main.<span class="keyword">go</span> &amp;&amp; upx <span class="number">-9</span> server</span><br><span class="line">        File size         Ratio      Format      Name</span><br><span class="line">   --------------------   ------   -----------   -----------</span><br><span class="line">  <span class="number">10253684</span> -&gt;   <span class="number">5210128</span>   <span class="number">50.81</span>%   macho/amd64   server </span><br><span class="line">$ ls -lh server</span><br><span class="line">-rwxr-xr-x  <span class="number">1</span> dj  staff   <span class="number">5.0</span>M Dec  <span class="number">8</span> <span class="number">00</span>:<span class="number">45</span> server</span><br></pre></td></tr></table></figure><h5 id="upx和编译选项组合"><a href="#upx和编译选项组合" class="headerlink" title="upx和编译选项组合"></a>upx和编译选项组合</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> build -ldflags=<span class="string">&quot;-s -w&quot;</span> -o server main.<span class="keyword">go</span> &amp;&amp; upx <span class="number">-9</span> server</span><br><span class="line">        File size         Ratio      Format      Name</span><br><span class="line">   --------------------   ------   -----------   -----------</span><br><span class="line">   <span class="number">8213876</span> -&gt;   <span class="number">3170320</span>   <span class="number">38.60</span>%   macho/amd64   server </span><br><span class="line">$ ls -lh server</span><br><span class="line">-rwxr-xr-x  <span class="number">1</span> dj  staff   <span class="number">3.0</span>M Dec  <span class="number">8</span> <span class="number">00</span>:<span class="number">47</span> server</span><br></pre></td></tr></table></figure><h4 id="逃逸分析对性能的影响"><a href="#逃逸分析对性能的影响" class="headerlink" title="逃逸分析对性能的影响"></a>逃逸分析对性能的影响</h4><p>Go 程序会在 2 个地方为变量分配内存，一个是全局的堆(heap)空间用来动态分配内存，另一个是每个 goroutine 的栈(stack)空间；Go 语言的内存管理是自动的，通常开发者并不需要关心内存分配在栈上，还是堆上。但是从性能的角度出发，在栈上分配内存和在堆上分配内存，性能差异是非常大的</p><p>在函数中申请一个对象，如果分配在栈中，函数执行结束时自动回收，如果分配在堆中，则在函数结束后某个时间点进行垃圾回收</p><p>在栈上分配和回收内存的开销很低，只需要 2 个 CPU 指令：PUSH 和 POP，一个是将数据 push 到栈空间以完成分配，pop 则是释放空间，也就是说在栈上分配内存，消耗的仅是将数据拷贝到内存的时间，而内存的 I/O 通常能够达到 30GB/s，因此在栈上分配内存效率是非常高的</p><h5 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h5><p>编译器决定内存分配位置的方式就称为逃逸分析，逃逸分析作用于编译阶段</p><h6 id="指针逃逸"><a href="#指针逃逸" class="headerlink" title="指针逃逸"></a>指针逃逸</h6><p>函数中创建了一个对象，返回了该对象的指针，此时函数虽然退出了，但是因为指针的存在，对象的内存不能随着函数结束而回收，因此只能分配在堆上</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main_pointer.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Demo <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createDemo</span><span class="params">(name <span class="type">string</span>)</span></span> *Demo &#123;</span><br><span class="line">d := <span class="built_in">new</span>(Demo) <span class="comment">// 局部变量 d 逃逸到堆</span></span><br><span class="line">d.name = name</span><br><span class="line"><span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">demo := createDemo(<span class="string">&quot;demo&quot;</span>)</span><br><span class="line">fmt.Println(demo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时可以借助选项 <code>-gcflags=-m</code>，查看变量逃逸的情况：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go build -gcflags=-m main_pointer.go </span><br><span class="line">./main_pointer.go:10:6: can inline createDemo</span><br><span class="line">./main_pointer.go:17:20: inlining call to createDemo</span><br><span class="line">./main_pointer.go:18:13: inlining call to fmt.Println</span><br><span class="line">./main_pointer.go:10:17: leaking param: name</span><br><span class="line">./main_pointer.go:11:10: new(Demo) escapes to heap</span><br><span class="line">./main_pointer.go:17:20: new(Demo) escapes to heap</span><br><span class="line">./main_pointer.go:18:13: demo escapes to heap</span><br><span class="line">./main_pointer.go:18:13: main []interface &#123;&#125; literal does not escape</span><br><span class="line">./main_pointer.go:18:13: io.Writer(os.Stdout) escapes to heap</span><br><span class="line">&lt;autogenerated&gt;:1: (*File).close .this does not escape</span><br></pre></td></tr></table></figure><p><code>new(Demo) escapes to heap</code> 即表示 <code>new(Demo)</code> 逃逸到堆上了</p><h6 id="interface-动态类型逃逸"><a href="#interface-动态类型逃逸" class="headerlink" title="interface{}动态类型逃逸"></a>interface{}动态类型逃逸</h6><p>若函数参数为 <code>interface&#123;&#125;</code>，编译期间很难确定参数的具体类型，也会发生逃逸</p><p>例如上面例子中的局部变量 <code>demo</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">demo := createDemo(&quot;demo&quot;)</span><br><span class="line">fmt.Println(demo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./main_pointer.go:18:13: demo escapes to heap</span><br></pre></td></tr></table></figure><p><code>demo</code> 是 main 函数的一个局部变量，该变量作为实参传递给 <code>fmt.Println()</code>，但是因为 <code>fmt.Println()</code> 的参数类型定义为 <code>interface&#123;&#125;</code>，因此也发生了逃逸</p><p><code>fmt</code> 包中的 <code>Println</code> 函数的定义如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Println(a ...interface&#123;&#125;) (n int, err error) &#123;</span><br><span class="line">return Fprintln(os.Stdout, a...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="栈空间不足"><a href="#栈空间不足" class="headerlink" title="栈空间不足"></a>栈空间不足</h6><p>因为栈空间通常比较小，因此递归函数实现不当时，容易导致栈溢出；操作系统对内核线程使用的栈空间有大小限制，64 位系统上通常是 8 MB；对 Go 编译器而言，超过一定大小的局部变量将逃逸到堆上，不同 Go 版本大小限制可能不一样。</p><p>当占用内存超过一定大小或无法确定当前切片长度时，对象占用内存将在堆上分配</p><h6 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Increase</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">n := <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">n++</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">in := Increase()</span><br><span class="line">fmt.Println(in()) <span class="comment">// 1</span></span><br><span class="line">fmt.Println(in()) <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Increase()</code> 返回值是一个闭包函数，该闭包函数访问了外部变量 n，那变量 n 将会一直存在，直到 <code>in</code> 被销毁。很显然，变量 n 占用的内存不能随着函数 <code>Increase()</code> 的退出而回收，因此将会逃逸到堆上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go build -gcflags=-m main_closure.go </span><br><span class="line"># command-line-arguments</span><br><span class="line">./main_closure.go:6:2: moved to heap: n</span><br></pre></td></tr></table></figure><h5 id="如何利用逃逸分析提升性能"><a href="#如何利用逃逸分析提升性能" class="headerlink" title="如何利用逃逸分析提升性能"></a>如何利用逃逸分析提升性能</h5><h6 id="传值-VS-传指针"><a href="#传值-VS-传指针" class="headerlink" title="传值 VS 传指针"></a>传值 VS 传指针</h6><p>传值会拷贝整个对象，而传指针只会拷贝指针地址，指向的对象是同一个。传指针可以减少值的拷贝，但是会导致内存分配逃逸到堆中，增加垃圾回收(GC)的负担。在对象频繁创建和删除的场景下，传递指针导致的 GC 开销可能会严重影响性能</p><p>一般情况下，对于需要修改原对象值，或占用内存比较大的结构体，选择传指针。对于只读的占用内存较小的结构体，直接传值能够获得更好的性能</p><h4 id="Go死码消除与调试模式"><a href="#Go死码消除与调试模式" class="headerlink" title="Go死码消除与调试模式"></a>Go死码消除与调试模式</h4><h5 id="什么是死码消除"><a href="#什么是死码消除" class="headerlink" title="什么是死码消除"></a>什么是死码消除</h5><p>即一种编译器优化技术，在编译阶段去掉对程序运行结果没有影响的代码；可以减小程序体积，程序运行中避免执行无用的指令，缩短运行时间</p><h5 id="Go语言中的应用"><a href="#Go语言中的应用" class="headerlink" title="Go语言中的应用"></a>Go语言中的应用</h5><h6 id="使用常量提升性能"><a href="#使用常量提升性能" class="headerlink" title="使用常量提升性能"></a>使用常量提升性能</h6><p>在某些场景下，将变量替换为常量，性能会有很大的提升</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// maxvar.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(num1,num2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num1 &gt; num2 &#123;</span><br><span class="line">        <span class="keyword">return</span> num1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a,b = <span class="number">10</span>,<span class="number">20</span></span><br><span class="line"><span class="keyword">const</span> a,b = <span class="number">10</span>,<span class="number">20</span><span class="comment">//maxconst.go将var修改为const</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> max(a,b) == a &#123;</span><br><span class="line">        fmt.Println(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go build -o maxvar maxvar.go</span><br><span class="line">go build -o maxconst maxconst.go</span><br><span class="line">ls -l maxvar maxconst</span><br><span class="line">-rwxr-xr-x  1 x x 1895424 Jan 10 00:01 maxconst</span><br><span class="line">-rwxr-xr-x  1 x x 2120368 Jan 10 00:01 maxvar</span><br></pre></td></tr></table></figure><p>我们可以看到 <code>maxconst</code> 比 <code>maxvar</code> 体积小了约 10% = 0.22 MB</p><p>我们使用 <code>-gcflags=-m</code> 参数看一下编译器做了哪些优化：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go build -gcflags=-m  -o maxvar maxvar.go</span><br><span class="line"># command-line-arguments</span><br><span class="line">./maxconst.go:7:6: can inline max</span><br><span class="line">./maxconst.go:17:8: inlining call to max</span><br></pre></td></tr></table></figure><p>max 函数被内联了，即被展开了，手动展开后如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">result = a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result = b</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> result == a &#123;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果 a 和 b 均为常量（const）呢？那在编译阶段就可以直接进行计算：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">10</span> &gt; <span class="number">20</span> &#123;</span><br><span class="line">result = <span class="number">10</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result = <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> result == <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算之后，<code>10 &gt; 20</code> 永远为假，那么分支消除后：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="number">20</span> == <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步，<code>20 == 10</code> 也永远为假，再次分支消除：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func main() &#123;&#125;</span><br></pre></td></tr></table></figure><p>因此，在声明全局变量时，如果能够确定为常量，尽量使用 const 而非 var，这样很多运算在编译器即可执行。死码消除后，既减小了二进制的体积，又可以提高运行时的效率，如果这部分代码是 <code>hot path</code>，那么对性能的提升会更加明显</p><h6 id="可推断的局部变量"><a href="#可推断的局部变量" class="headerlink" title="可推断的局部变量"></a>可推断的局部变量</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// maxvarlocal</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b = <span class="number">10</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> max(a, b) == a &#123;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译结果如下，大小与 <code>varconst</code> 一致，即 a、b 作为局部变量时，编译器死码消除是生效的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go build -o maxvarlocal maxvarlocal.go</span><br><span class="line">$ ls -l maxvarlocal                      </span><br><span class="line">-rwxr-xr-x  1 x x 1895424 Jan 10 00:05 maxvarlocal</span><br></pre></td></tr></table></figure><h6 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h6><p>在源代码中定义全局常量debug，值设置为<code>false</code>，在需要增加调试代码的地方使用条件语句<code>if debug</code>包裹：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> debug &#123;</span><br><span class="line">log.Println(<span class="string">&quot;debug mode is enabled&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h6><p>不修改源代码也能编译出debug版本的方式：结合build tags实现条件编译：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// debug.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// release.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="语言陷阱"><a href="#语言陷阱" class="headerlink" title="语言陷阱"></a>语言陷阱</h3><h4 id="数组和切片"><a href="#数组和切片" class="headerlink" title="数组和切片"></a>数组和切片</h4><h5 id="第一个陷阱"><a href="#第一个陷阱" class="headerlink" title="第一个陷阱"></a>第一个陷阱</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(a [2]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := [<span class="number">2</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">foo(a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确的输出是 <code>[1 2]</code>，数组 <code>a</code> 没有发生改变</p><ul><li>在Go语言中，数组是一种值类型，且不同长度的数组属于不同的类型</li></ul><p>为避免数组的拷贝，提高性能，建议传数组的指针作为参数，或用切片代替数组</p><p>需将上述示例替换为：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(a *[2]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">(*a)[<span class="number">0</span>] = <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := [<span class="number">2</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">foo(&amp;a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(a []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">foo(a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，将切片作为参数时，拷贝了一个新切片，即拷贝了构成切片的三个值，包括底层数组的指针。对切片中某个元素的修改，实际上是修改了底层数组中的值，因此原切片也发生了改变</p><h5 id="第二个陷阱"><a href="#第二个陷阱" class="headerlink" title="第二个陷阱"></a>第二个陷阱</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(a []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">a = <span class="built_in">append</span>(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">foo(a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出仍是 <code>[1 2]</code>，切片 <code>a</code> 没有发生改变</p><p>传参时拷贝了新的切片，因此当新切片的长度发生改变时，原切片并不会发生改变。而且在函数 <code>foo</code> 中，新切片 <code>a</code> 增加了 8 个元素，原切片对应的底层数组不够放置这 8 个元素，因此申请了新的空间来放置扩充后的底层数组。这个时候新切片和原切片指向的底层数组就不是同一个了。因此，对新切片第 0 个元素的修改，并不会影响原切片的第 0 个元素</p><p>如果如果希望 <code>foo</code> 函数的操作能够影响原切片呢？两种方式：</p><ul><li>设置返回值，将新切片返回并赋值给 <code>main</code> 函数中的变量 <code>a</code></li><li>切片也使用指针方式传参</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(a []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">a = <span class="built_in">append</span>(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">200</span></span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">a = foo(a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(a *[]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">*a = <span class="built_in">append</span>(*a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">(*a)[<span class="number">0</span>] = <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">foo(&amp;a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go包</title>
      <link href="/2023/02/03/go%E5%8C%85/"/>
      <url>/2023/02/03/go%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h3><h4 id="tar-实现tar格式压缩文件的存取"><a href="#tar-实现tar格式压缩文件的存取" class="headerlink" title="tar(实现tar格式压缩文件的存取)"></a>tar(实现tar格式压缩文件的存取)</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Constants</span></span><br><span class="line"><span class="comment">Variables</span></span><br><span class="line"><span class="comment">type Format</span></span><br><span class="line"><span class="comment">func (f Format) String() string</span></span><br><span class="line"><span class="comment">type Header</span></span><br><span class="line"><span class="comment">func FileInfoHeader(fi fs.FileInfo,link string) (*Header,error)</span></span><br><span class="line"><span class="comment">func (h *Header) FileInfo() fs.FileInfo</span></span><br><span class="line"><span class="comment">type Reader</span></span><br><span class="line"><span class="comment">func NewReader(r io.Reader) *Reader</span></span><br><span class="line"><span class="comment">func (tr *Reader) Next() (*Header,error)</span></span><br><span class="line"><span class="comment">func (tr *Reader) Read(b []byte) (int,error)</span></span><br><span class="line"><span class="comment">type Writer</span></span><br><span class="line"><span class="comment">func NewWriter(w io.Writer) *Writer</span></span><br><span class="line"><span class="comment">func (tw *Writer) Close() error</span></span><br><span class="line"><span class="comment">func (tw *Writer) Flush() error</span></span><br><span class="line"><span class="comment">func (tw *Writer) Write(b []byte) (int,error)</span></span><br><span class="line"><span class="comment">func (tw *Writer) WriteHeader(hdr *Header) error</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="Header：表示tar文件里单个头"><a href="#Header：表示tar文件里单个头" class="headerlink" title="Header：表示tar文件里单个头"></a>Header：表示tar文件里单个头</h5><p>*<em>FileInfoHeader(fi fs.FileInfo,link string) (<em>Header,error)</em></em></p><p>返回一个根据fi填写了部分字段的Header，若fi描述了一个符号链接，则函数将link参数作为链接目标，若fi描述一个目录，则在名字后加斜杠</p><h5 id="Reader：提供对tar档案文件的顺序读取"><a href="#Reader：提供对tar档案文件的顺序读取" class="headerlink" title="Reader：提供对tar档案文件的顺序读取"></a>Reader：提供对tar档案文件的顺序读取</h5><p>*<em>NewReader(r io.Reader) <em>Reader</em></em></p><p>创建一个从r读取的Reader</p><p>**(tr <em>Reader) Next() (*Header,error)</em>*</p><p>转入tar档案文件下一记录，返回下一记录的头域</p><p>**(tr <em>Reader) Read(b []byte) (n int,err error)</em>*</p><p>从档案文件当前记录读取数据到记录末端返回(0,EOF)，直到调用Next转下一记录</p><h5 id="Writer：提供POSIX-1格式的tar档案文件顺序写入"><a href="#Writer：提供POSIX-1格式的tar档案文件顺序写入" class="headerlink" title="Writer：提供POSIX.1格式的tar档案文件顺序写入"></a>Writer：提供POSIX.1格式的tar档案文件顺序写入</h5><p>*<em>NewWriter(w io.Writer) <em>Writer</em></em></p><p>创建一个写入w的*Writer</p><p>**(tw <em>Writer) WriterHeader(hdr <em>Header) error</em></em></p><p>写入hdr并准备接受文件内容，Header.Size取决于下一个文件能写入多少字节，若非首次调用本方法会调用Flush，在close后调用会返回ErrWriterAfterClose</p><p>**(tw <em>Writer) Write(b []byte) (n int,err error)</em>*</p><p>Write向tar档案文件的当前记录中写入数据，若写入数据总数超出上一次调用WriteHeader的参数hdr.Size字节，返回ErrWriteTooLong错误</p><p>**(tw <em>Writer) Flush() error</em>*</p><p>结束当前文件的写入</p><p>**(tw <em>Writer) Close() error</em>*</p><p>关闭tar档案文件，将缓冲中未写入下层的io.Writer接口的数据刷新到下层</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//FileInfoHeader</span></span><br><span class="line">    <span class="comment">//func FileInfoHeader(fi fs.FileInfo,link string) (*Header,error)</span></span><br><span class="line">    fileinfo,err := os.Stat(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    h,err := tar.FileInfoHeader(fileinfo,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    h.Linkname = <span class="string">&quot;haha&quot;</span></span><br><span class="line">    h.Gname = <span class="string">&quot;test&quot;</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(h.AccessTime,h.ChangeTime, h.Devmajor, h.Devminor, h.Gid,  h.Gname, h.Linkname, h.ModTime, h.Mode, h.Name, h.Size,h.Typeflag, h.Uid, h.Uname, h.Xattrs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//FileInfo返回Header对应的文件信息</span></span><br><span class="line">    <span class="comment">//func (h *Header) FileInfo() fs.FileInfo</span></span><br><span class="line">    f,err := os.Open(<span class="string">&quot;sdk/test.tar&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">    r := tar.NewReader(f)</span><br><span class="line"><span class="keyword">for</span> hdr,err := r.Next(); err != io.EOF; hdr,err = r.Next() &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fileInfo := hdr.FileInfo()</span><br><span class="line">fmt.Println(fileInfo.Name())</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//转入tar档案文件下一记录，返回下一记录的头域</span></span><br><span class="line">    <span class="comment">//func (tr *Reader) Next() (*Header,error)</span></span><br><span class="line">    <span class="comment">//func (tr *Reader) Read(b []byte) (int,error)</span></span><br><span class="line">    r := tar.NewReader(strings.NewReader(<span class="string">&quot;test.tar&quot;</span>))</span><br><span class="line">    h,err := r.Next()</span><br><span class="line">    fmt.Println(h,err)</span><br><span class="line">    </span><br><span class="line">    n,err := tar.NewReader(strings.NewReader(<span class="string">&quot;test.log&quot;</span>)).Read(<span class="built_in">make</span>([]<span class="type">byte</span>,<span class="number">0</span>))</span><br><span class="line">    fmt.Println(n,err)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Close关闭tar档案文件，会将缓冲中未写入下层的io.Writer接口的数据刷新到下层</span></span><br><span class="line">    <span class="comment">//func (tw *Writer) Close() error</span></span><br><span class="line">    f,err := os.Create(<span class="string">&quot;sdk/demo.tar&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line">    tw := tar.NewWriter(f)</span><br><span class="line">    <span class="keyword">defer</span> tw.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Zip"><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Constants</span></span><br><span class="line"><span class="comment">Variables</span></span><br><span class="line"><span class="comment">func RegisterCompressor(method uint16,comp Compressor)</span></span><br><span class="line"><span class="comment">func RegisterDecompressor(method unit16,dcomp Decompressor)</span></span><br><span class="line"><span class="comment">type Compressor </span></span><br><span class="line"><span class="comment">type Decompressor</span></span><br><span class="line"><span class="comment">type File</span></span><br><span class="line"><span class="comment">func (f *File) DataOffset() (offset int64,err error)</span></span><br><span class="line"><span class="comment">func (f *File) Open() (io.ReadCloser,error)</span></span><br><span class="line"><span class="comment">type FileHeader</span></span><br><span class="line"><span class="comment">func FileInfoHeader(fi fs.FileInfo) (*FileHeader,error)</span></span><br><span class="line"><span class="comment">func (h *FileHeader) FileInfo() fs.FileInfo</span></span><br><span class="line"><span class="comment">func (h *FileHeader) ModTime() time.Time</span></span><br><span class="line"><span class="comment">func (h *FileHeader) Mode() (mode fs.FileMode)</span></span><br><span class="line"><span class="comment">func (h *FileHeader) SetModTime(t time.Time)</span></span><br><span class="line"><span class="comment">func (h *FileHeader) SetMode(mode fs.FileMode)</span></span><br><span class="line"><span class="comment">type ReadCloser</span></span><br><span class="line"><span class="comment">func OpenReader(name string) (*ReadCloser,error)</span></span><br><span class="line"><span class="comment">func (rc *ReadCloser) Close() error</span></span><br><span class="line"><span class="comment">type Reader</span></span><br><span class="line"><span class="comment">func NewReader(r io.ReaderAt,size int64) (*Reader,error)</span></span><br><span class="line"><span class="comment">func (r *Reader) Open(name string) (fs.File,error)</span></span><br><span class="line"><span class="comment">func (z *Reader) RegisterDecompressor(method unit16,dcomp Decompressor)</span></span><br><span class="line"><span class="comment">type Writer</span></span><br><span class="line"><span class="comment">func NewWriter(w io.Writer) *Writer</span></span><br><span class="line"><span class="comment">func (w *Writer) Close() error</span></span><br><span class="line"><span class="comment">func (w *Writer) Crteate(name string) (io.Writer,error)</span></span><br><span class="line"><span class="comment">func (w *Writer) CreateHeader(fh *FileHeader) (io.Writer,error)</span></span><br><span class="line"><span class="comment">func (w *Writer) Flush() error</span></span><br><span class="line"><span class="comment">func (w *Writer) RegisterCompressor(method unit16,comp Compressor)</span></span><br><span class="line"><span class="comment">func (w *Writer) SetComment(comment string) error</span></span><br><span class="line"><span class="comment">func (w *Writer) SetOffset(n int64)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h5><h6 id="读取文件内容并压缩"><a href="#读取文件内容并压缩" class="headerlink" title="读取文件内容并压缩"></a>读取文件内容并压缩</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CompressedFile</span><span class="params">(file *os.File,prefix <span class="type">string</span>,zw *zip.Writer)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    info,err := file.Stat()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> || info.IsDir() &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    header,err := zip.FileInfoHeader(info)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    header.Name = prefix + <span class="string">&quot;/&quot;</span> + header.Name</span><br><span class="line">    writer,err := zw.CreateHeader(header)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> _,err = io.Copy(writer,file); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f,_ := os.Open(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">    <span class="comment">//压缩文件</span></span><br><span class="line">    dst,_ := os.Create(<span class="string">&quot;test.zip&quot;</span>)</span><br><span class="line">    zipWriter := zip.NewWriter(dst)</span><br><span class="line">    <span class="keyword">if</span> err := CompressFile(f,<span class="string">&quot;&quot;</span>,zipWriter); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Make sure to check the error on Close.</span></span><br><span class="line">    <span class="keyword">if</span> err := zipWriter.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CompressedFile是将文件内容进行压缩，若想将目录进行压缩则将目录中的文件提取出来然后调用CompressedFile将文件压缩并写入zip.Writer即可：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Compress 压缩文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Compress</span><span class="params">(file *os.File, prefix <span class="type">string</span>, zw *zip.Writer)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    info,err := file.Stat()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若是目录调用CompressedDir</span></span><br><span class="line">    <span class="keyword">if</span> info.IsDir() &#123;</span><br><span class="line">        <span class="keyword">return</span> CompressedDir(file, prefix, zw)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若是文件调用CompressedFile</span></span><br><span class="line">    <span class="keyword">return</span> CompressedFile(file, prefix, zw)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CompressedDir</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CompressedDir</span><span class="params">(file *os.File,prefix <span class="type">string</span>,zw *zip.Writer)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    info,_ := file.Stat()</span><br><span class="line">    prefix = prefix + <span class="string">&quot;/&quot;</span> + info.Name()</span><br><span class="line">    dirInfo,err := file.Readdir(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _,f := <span class="keyword">range</span> dirInfo &#123;</span><br><span class="line">        f,err := os.Open(file.Name() + <span class="string">&quot;/&quot;</span> + f.Name())</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        err = Compress(f,prefix,zw)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="将数据直接写入压缩文件"><a href="#将数据直接写入压缩文件" class="headerlink" title="将数据直接写入压缩文件"></a>将数据直接写入压缩文件</h6><p>将格式化数据写入压缩文件让用户下载，只对数据进行压缩不在本地生成文件：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CompressedData</span><span class="params">(data *bytes.Buffer,dest <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    zipBuffer := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">    zipWriter := zip.NewWriter(zipBuffer)</span><br><span class="line">    <span class="comment">// Create entry in zip file</span></span><br><span class="line">    zipEntry,err := zipWriter.Create(dest)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// Write content into zip writer</span></span><br><span class="line">    <span class="keyword">if</span> _,err := zipEntry.Write(data.Bytes());err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Make sure to check the error on Close.</span></span><br><span class="line">    <span class="keyword">if</span> err := zipWriter.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="解压缩文件"><a href="#解压缩文件" class="headerlink" title="解压缩文件"></a>解压缩文件</h6><p>DeCompressed负责读取压缩文件并调用deCompressed，将读取的内容写入解压缩后的文件：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeCompressed</span><span class="params">(src <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    s,_ := os.Open(src)</span><br><span class="line">    info,_ := s.Stat()</span><br><span class="line">    ZipReader,err := zip.NewReader(s,info.Size())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _,f := <span class="keyword">range</span> ZipReader.File &#123;</span><br><span class="line">        <span class="keyword">if</span> err := deCompressed(f); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deCompressed</span><span class="params">(f *zip.File)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    d, _ := os.Create(f.Name)</span><br><span class="line">    unzipFile,err := f.Open()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span> _,err := io.Copy(d.unzipFile); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := unzipFile.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bufio（实现有缓冲的I-O）"><a href="#Bufio（实现有缓冲的I-O）" class="headerlink" title="Bufio（实现有缓冲的I/O）"></a>Bufio（实现有缓冲的I/O）</h3><p>主要提供一些操作io缓存流的函数和方法，有时为了提高针对流操作的效率，不然不能缺少针对缓冲流的相关操作</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">func ScanBytes(data []byte, atEOF bool) (advance int,token []byte,err error)</span></span><br><span class="line"><span class="comment">func ScanLines(data []byte, atEOF bool) (advance int,token []byte,err error)</span></span><br><span class="line"><span class="comment">func ScanRunes(data []byte, atEOF bool) (advance int,token []byte,err error)</span></span><br><span class="line"><span class="comment">func ScanWords(data []byte, atEOF bool) (advance int,token []byte,err error)</span></span><br><span class="line"><span class="comment">type ReadWriter</span></span><br><span class="line"><span class="comment">func NewReadWriter(r *Reader,w *Writer) *ReadWriter</span></span><br><span class="line"><span class="comment">type Reader</span></span><br><span class="line"><span class="comment">func NewReader(rd io.Reader) *Reader</span></span><br><span class="line"><span class="comment">func NewReaderSize(rd io.Reader,size int) *Reader</span></span><br><span class="line"><span class="comment">func (b *Reader) Buffered() int</span></span><br><span class="line"><span class="comment">func (b *Reader) Discard(n int) (discarded int,err error)</span></span><br><span class="line"><span class="comment">func (b *Reader) Peek(n int) ([]byte,error)</span></span><br><span class="line"><span class="comment">func (b *Reader) Read(p []byte) (n int, err error)</span></span><br><span class="line"><span class="comment">func (b *Reader) ReadByte() (byte, error)</span></span><br><span class="line"><span class="comment">func (b *Reader) ReadBytes(delim byte) ([]byte, error)</span></span><br><span class="line"><span class="comment">func (b *Reader) ReadLine() (line []byte, isPrefix bool, err error)</span></span><br><span class="line"><span class="comment">func (b *Reader) ReadRune() (r rune, size int, err error)</span></span><br><span class="line"><span class="comment">func (b *Reader) ReadSlice(delim byte) (line []byte, err error)</span></span><br><span class="line"><span class="comment">func (b *Reader) ReadString(delim byte) (string, error)</span></span><br><span class="line"><span class="comment">func (b *Reader) Reset(r io.Reader)</span></span><br><span class="line"><span class="comment">func (b *Reader) Size() int</span></span><br><span class="line"><span class="comment">func (b *Reader) UnreadByte() error</span></span><br><span class="line"><span class="comment">func (b *Reader) UnreadRune() error</span></span><br><span class="line"><span class="comment">func (b *Reader) WriteTo(w io.Writer) (n int64, err error)</span></span><br><span class="line"><span class="comment">type Scanner</span></span><br><span class="line"><span class="comment">func NewScanner(r io.Reader) *Scanner</span></span><br><span class="line"><span class="comment">func (s *Scanner) Buffer(buf []byte,max int)</span></span><br><span class="line"><span class="comment">func (s *Scanner) Bytes() []byte</span></span><br><span class="line"><span class="comment">func (s *Scanner) Err() error</span></span><br><span class="line"><span class="comment">func (s *Scanner) Scan() bool</span></span><br><span class="line"><span class="comment">func (s *Scanner) Split(split SplitFunc)</span></span><br><span class="line"><span class="comment">func (s *Scanner) Text() string</span></span><br><span class="line"><span class="comment">type SplitFunc</span></span><br><span class="line"><span class="comment">type Writer</span></span><br><span class="line"><span class="comment">func NewWriter(w io.Writer) *Writer</span></span><br><span class="line"><span class="comment">func NewWriterSize(w io.Writer,size int) *Writer</span></span><br><span class="line"><span class="comment">func (b *Writer) Available() int</span></span><br><span class="line"><span class="comment">func (b *Writer) Buffered() int</span></span><br><span class="line"><span class="comment">func (b *Writer) Flush() error</span></span><br><span class="line"><span class="comment">func (b *Writer) ReadFrom(r io.Reader) (n int64, err error)</span></span><br><span class="line"><span class="comment">func (b *Writer) Reset(w io.Writer)</span></span><br><span class="line"><span class="comment">func (b *Writer) Size() int</span></span><br><span class="line"><span class="comment">func (b *Writer) Write(p []byte) (nn int, err error)</span></span><br><span class="line"><span class="comment">func (b *Writer) WriteByte(c byte) error</span></span><br><span class="line"><span class="comment">func (b *Writer) WriteRune(r rune) (size int, err error)</span></span><br><span class="line"><span class="comment">func (b *Writer) WriteString(s string) (int, error)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ScanBytes逐字节读取数据</span></span><br><span class="line"><span class="comment">*func ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s := strings.NewReader(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">bs := bufio.NewScanner(s)</span><br><span class="line">bs.Split(bufio.ScanBytes)</span><br><span class="line"><span class="keyword">for</span> bs.Scan() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, bs.Text())</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ScanLines逐行读取数据</span></span><br><span class="line"><span class="comment">*func ScanLines(data []byte, atEOF bool) (advance int, token []byte, err error)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s := strings.NewReader(<span class="string">&quot;Hello 世界\nhaha&quot;</span>)</span><br><span class="line">bs := bufio.NewScanner(s)</span><br><span class="line">bs.Split(bufio.ScanLines)</span><br><span class="line"><span class="keyword">for</span> bs.Scan() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, bs.Text())</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ScanRunes逐字读取数据</span></span><br><span class="line"><span class="comment">*func ScanRunes(data []byte,atEOF bool) (advance int,token []byte,err error)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s := strings.NewReader(<span class="string">&quot;hello 世界&quot;</span>)</span><br><span class="line">bs := bufio.NewScanner(s)</span><br><span class="line">bs.Split(bufio.ScanRunes)</span><br><span class="line"><span class="keyword">for</span> bs.Scan() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, bs.Text())</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出：</span></span><br><span class="line"><span class="comment">    h</span></span><br><span class="line"><span class="comment">    e</span></span><br><span class="line"><span class="comment">    l</span></span><br><span class="line"><span class="comment">    l</span></span><br><span class="line"><span class="comment">    o</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    世</span></span><br><span class="line"><span class="comment">    界</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ScanWords逐词读取数据</span></span><br><span class="line"><span class="comment">*func ScanWords(data []byte,atEOF bool) (advance int,token []byte,err error)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s := strings.NewReader(<span class="string">&quot;hello world! 世界 shijie sh&quot;</span>)</span><br><span class="line">bs := bufio.NewScanner(s)</span><br><span class="line">bs.Split(bufio.ScanWords)</span><br><span class="line"><span class="keyword">for</span> bs.Scan() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, bs.Text())</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出:</span></span><br><span class="line"><span class="comment">    hello</span></span><br><span class="line"><span class="comment">    world!</span></span><br><span class="line"><span class="comment">    世界</span></span><br><span class="line"><span class="comment">    shijie</span></span><br><span class="line"><span class="comment">    sh</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   NewReadWriter封装r和w为一个bufio。ReadWriter对象既可读也可写</span></span><br><span class="line"><span class="comment">   *func NewReadWriter(r *Reader,w *Writer) *ReadWriter</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="type">byte</span>,<span class="number">0</span>))</span><br><span class="line">   bw := bufio.NewWriter(b)</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line">   rw := bufio.NewReadWriter(br,bw)</span><br><span class="line">   p,_ := rw.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%s\n&quot;</span>,<span class="type">string</span>(p))</span><br><span class="line"></span><br><span class="line">   rw.WriteString(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">   rw.Flush()</span><br><span class="line">   fmt.Println(b)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   NewReader读取数据存放于Reader中</span></span><br><span class="line"><span class="comment">   *func NewReader(rd io.Reader) *Reader</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   b := bufio.NewReader(os.Stdin)</span><br><span class="line">   s,_ := b.ReadString(<span class="string">&#x27;\n&#x27;</span>)<span class="comment">//读取字符直到首次出现回车</span></span><br><span class="line">   fmt.Println(s)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   Buffered方法返回可从缓冲区中读出数据的字节数</span></span><br><span class="line"><span class="comment">*func (b *Reader) Buffered() int</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Peek返回输入流下n个字节且不会移动位置，返回的[]byte只在下一次调用读取操作前合法，若Peek返回的切片长度比n小，它也会返回一个错误说明原因，若n比缓冲尺寸大，返回的错误将是ErrBufferFull</span></span><br><span class="line"><span class="comment">*func (b *Reader) Peek(n int) ([]byte,error)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Read从b中读出数据存放到p中，返回读出的字节数和遇到的错误</span></span><br><span class="line"><span class="comment">    若缓存不为空则只能读出缓存中存在的数据，不会从底层io.Reader读取</span></span><br><span class="line"><span class="comment">    若缓存为空，则：</span></span><br><span class="line"><span class="comment">    1、若len(p) &gt;= 缓存大小，直接从底层io.Reader中读出到p中</span></span><br><span class="line"><span class="comment">    2、若len(p) &lt; 缓存大小，将数据从底层读取到缓存中，再从缓存中读取到p中</span></span><br><span class="line"><span class="comment">    *func (b *Reader) Read(p []byte) (n int,err error)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Reset方法丢弃所有的缓存数据，重置所有的状态且将缓存读切换到r</span></span><br><span class="line"><span class="comment">    *func (b *Reader) Reset(r io.Reader)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    s := strings.NewReader(<span class="string">&quot;ABCDEF&quot;</span>)</span><br><span class="line">   str := strings.NewReader(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">  br := bufio.NewReader(s)</span><br><span class="line">   b,_ := br.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   fmt.Println(b)</span><br><span class="line">   br.Reset(str)</span><br><span class="line">   b,_ = br.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   fmt.Println(b)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出：</span></span><br><span class="line"><span class="comment">    ABCDEF</span></span><br><span class="line"><span class="comment">123456</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Size方法返回缓存区的大小（以字节为单位）</span></span><br><span class="line"><span class="comment">    *func (b *Reader) Size() int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    s := strings.NewReader(<span class="string">&quot;ABCDEF&quot;</span>)</span><br><span class="line">    b := bufio.NewReader(s)</span><br><span class="line">    n := b.Size()</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    UnreadByte方法作用是撤销最近一次读出的字节，只要有内容读出就可以使用该方法撤销一个字节</span></span><br><span class="line"><span class="comment">    *func (b *Reader) UnreadByte() error</span></span><br><span class="line"><span class="comment">    UnreadRune方法的作用是返回最近一次调用的unicode码值，若最近一次读取的不是调用的ReadRune，会返回错误</span></span><br><span class="line"><span class="comment">    *func (b *Reader) UnreadRune() error</span></span><br><span class="line"><span class="comment">    Err方法返回扫描仪遇到的第一个非EOF错误</span></span><br><span class="line"><span class="comment">    *func (s *Scanner) Err() error</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Scan方法获取当前位置的token（该token可以通过Bytes或Text方法获取），并让Scanner的扫描位置移动到下一个token，当抵达输入流结尾或遇到错误而停止时返回false,Err方法此时返回nil</span></span><br><span class="line"><span class="comment">    *func (s *Scanner) Scan() bool</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    s := strings.NewReader(<span class="string">&quot;asffgghjhjhjk&quot;</span>)</span><br><span class="line">scanner := bufio.NewScanner(s)</span><br><span class="line">flag := scanner.Scan()</span><br><span class="line">fmt.Println(flag)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    split方法设置该Scanner()的分割函数，本方法必须在Scan之前调用</span></span><br><span class="line"><span class="comment">    *func (s *Scanner) Split(split SplitFunc)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> input = <span class="string">&quot;1234 5678 1234567901234567&quot;</span></span><br><span class="line">scanner := bufio.NewScanner(strings.NewReader(input))</span><br><span class="line">split := <span class="function"><span class="keyword">func</span><span class="params">(data []<span class="type">byte</span>, atEOF <span class="type">bool</span>)</span></span> (advance <span class="type">int</span>, token []<span class="type">byte</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">advance, token, err = bufio.ScanWords(data, atEOF)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; token != <span class="literal">nil</span> &#123;</span><br><span class="line">_, err = strconv.ParseInt(<span class="type">string</span>(token), <span class="number">10</span>, <span class="number">32</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">scanner.Split(split)</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s \n&quot;</span>, scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出：</span></span><br><span class="line"><span class="comment">    1234</span></span><br><span class="line"><span class="comment">    5678</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Text方法创建并返回最近一次scan调用生成的token</span></span><br><span class="line"><span class="comment">    *func (s *Scanner) Text() string</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    s := strings.NewReader(<span class="string">&quot;asvgfgghgjh\nsddgffgfg&quot;</span>)</span><br><span class="line">scanner := bufio.NewScanner(s)</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">fmt.Println(scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出：</span></span><br><span class="line"><span class="comment">    asvgfgghgjh</span></span><br><span class="line"><span class="comment">sddgffgfg</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Builtin（为go提供一些内置的类型和函数）"><a href="#Builtin（为go提供一些内置的类型和函数）" class="headerlink" title="Builtin（为go提供一些内置的类型和函数）"></a>Builtin（为go提供一些内置的类型和函数）</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">func append(slice []Type,elems ...Type) []Type</span></span><br><span class="line"><span class="comment">func cap(v Type) int</span></span><br><span class="line"><span class="comment">func close(c chan&lt;- Type)</span></span><br><span class="line"><span class="comment">func complex(r,i FloatType) ComplexType</span></span><br><span class="line"><span class="comment">func copy(dst,src []Type) int</span></span><br><span class="line"><span class="comment">func delete(m map[Type]Type1,key Type)</span></span><br><span class="line"><span class="comment">func imag(c ComplexType) FloatType</span></span><br><span class="line"><span class="comment">func len(v Type) int</span></span><br><span class="line"><span class="comment">func make(t Type,size ...IntegerType) Type</span></span><br><span class="line"><span class="comment">func new(Type) *Type</span></span><br><span class="line"><span class="comment">func panic(v interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func print(args ...Type)</span></span><br><span class="line"><span class="comment">func println(args ...Type)</span></span><br><span class="line"><span class="comment">func real(c ComplexType) FloatType</span></span><br><span class="line"><span class="comment">func recover() interface&#123;&#125;</span></span><br><span class="line"><span class="comment">type ComplexType</span></span><br><span class="line"><span class="comment">type FloatType</span></span><br><span class="line"><span class="comment">type IntegerType</span></span><br><span class="line"><span class="comment">    type Type</span></span><br><span class="line"><span class="comment">    type Type1</span></span><br><span class="line"><span class="comment">    type bool</span></span><br><span class="line"><span class="comment">    type byte</span></span><br><span class="line"><span class="comment">    type complex128</span></span><br><span class="line"><span class="comment">    type complex64</span></span><br><span class="line"><span class="comment">    type error</span></span><br><span class="line"><span class="comment">    type float32</span></span><br><span class="line"><span class="comment">    type float64</span></span><br><span class="line"><span class="comment">    type int</span></span><br><span class="line"><span class="comment">    type int16</span></span><br><span class="line"><span class="comment">    type int32</span></span><br><span class="line"><span class="comment">    type int64</span></span><br><span class="line"><span class="comment">    type int8</span></span><br><span class="line"><span class="comment">    type rune</span></span><br><span class="line"><span class="comment">    type string</span></span><br><span class="line"><span class="comment">    type uint</span></span><br><span class="line"><span class="comment">    type uint16</span></span><br><span class="line"><span class="comment">    type uint32</span></span><br><span class="line"><span class="comment">    type uint64</span></span><br><span class="line"><span class="comment">    type uint8</span></span><br><span class="line"><span class="comment">    type uintptr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Bytes（主要提供操作字节切片的函数和方法）"><a href="#Bytes（主要提供操作字节切片的函数和方法）" class="headerlink" title="Bytes（主要提供操作字节切片的函数和方法）"></a>Bytes（主要提供操作字节切片的函数和方法）</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">func Compare(a, b []byte) int</span></span><br><span class="line"><span class="comment">    func Contains(b, subslice []byte) bool</span></span><br><span class="line"><span class="comment">    func ContainsAny(b []byte, chars string) bool</span></span><br><span class="line"><span class="comment">    func ContainsRune(b []byte, r rune) bool</span></span><br><span class="line"><span class="comment">    func Count(s, sep []byte) int</span></span><br><span class="line"><span class="comment">    func Equal(a, b []byte) bool</span></span><br><span class="line"><span class="comment">    func EqualFold(s, t []byte) bool</span></span><br><span class="line"><span class="comment">    func Fields(s []byte) [][]byte</span></span><br><span class="line"><span class="comment">    func FieldsFunc(s []byte, f func(rune) bool) [][]byte</span></span><br><span class="line"><span class="comment">    func HasPrefix(s, prefix []byte) bool</span></span><br><span class="line"><span class="comment">    func HasSuffix(s, suffix []byte) bool</span></span><br><span class="line"><span class="comment">    func Index(s, sep []byte) int</span></span><br><span class="line"><span class="comment">    func IndexAny(s []byte, chars string) int</span></span><br><span class="line"><span class="comment">    func IndexByte(b []byte, c byte) int</span></span><br><span class="line"><span class="comment">    func IndexFunc(s []byte, f func(r rune) bool) int</span></span><br><span class="line"><span class="comment">    func IndexRune(s []byte, r rune) int</span></span><br><span class="line"><span class="comment">    func Join(s [][]byte, sep []byte) []byte</span></span><br><span class="line"><span class="comment">    func LastIndex(s, sep []byte) int</span></span><br><span class="line"><span class="comment">    func LastIndexAny(s []byte, chars string) int</span></span><br><span class="line"><span class="comment">    func LastIndexByte(s []byte, c byte) int</span></span><br><span class="line"><span class="comment">    func LastIndexFunc(s []byte, f func(r rune) bool) int</span></span><br><span class="line"><span class="comment">    func Map(mapping func(r rune) rune, s []byte) []byte</span></span><br><span class="line"><span class="comment">    func Repeat(b []byte, count int) []byte</span></span><br><span class="line"><span class="comment">    func Replace(s, old, new []byte, n int) []byte</span></span><br><span class="line"><span class="comment">    func ReplaceAll(s, old, new []byte) []byte</span></span><br><span class="line"><span class="comment">    func Runes(s []byte) []rune</span></span><br><span class="line"><span class="comment">    func Split(s, sep []byte) [][]byte</span></span><br><span class="line"><span class="comment">    func SplitAfter(s, sep []byte) [][]byte</span></span><br><span class="line"><span class="comment">    func SplitAfterN(s, sep []byte, n int) [][]byte</span></span><br><span class="line"><span class="comment">    func SplitN(s, sep []byte, n int) [][]byte</span></span><br><span class="line"><span class="comment">    func Title(s []byte) []byte</span></span><br><span class="line"><span class="comment">    func ToLower(s []byte) []byte</span></span><br><span class="line"><span class="comment">    func ToLowerSpecial(c unicode.SpecialCase, s []byte) []byte</span></span><br><span class="line"><span class="comment">    func ToTitle(s []byte) []byte</span></span><br><span class="line"><span class="comment">    func ToTitleSpecial(c unicode.SpecialCase, s []byte) []byte</span></span><br><span class="line"><span class="comment">    func ToUpper(s []byte) []byte</span></span><br><span class="line"><span class="comment">    func ToUpperSpecial(c unicode.SpecialCase, s []byte) []byte</span></span><br><span class="line"><span class="comment">    func ToValidUTF8(s, replacement []byte) []byte</span></span><br><span class="line"><span class="comment">    func Trim(s []byte, cutset string) []byte</span></span><br><span class="line"><span class="comment">    func TrimFunc(s []byte, f func(r rune) bool) []byte</span></span><br><span class="line"><span class="comment">    func TrimLeft(s []byte, cutset string) []byte</span></span><br><span class="line"><span class="comment">    func TrimLeftFunc(s []byte, f func(r rune) bool) []byte</span></span><br><span class="line"><span class="comment">    func TrimPrefix(s, prefix []byte) []byte</span></span><br><span class="line"><span class="comment">    func TrimRight(s []byte, cutset string) []byte</span></span><br><span class="line"><span class="comment">    func TrimRightFunc(s []byte, f func(r rune) bool) []byte</span></span><br><span class="line"><span class="comment">    func TrimSpace(s []byte) []byte</span></span><br><span class="line"><span class="comment">    func TrimSuffix(s, suffix []byte) []byte</span></span><br><span class="line"><span class="comment">type Buffer</span></span><br><span class="line"><span class="comment">    func NewBuffer(buf []byte) *Buffer</span></span><br><span class="line"><span class="comment">    func NewBufferString(s string) *Buffer</span></span><br><span class="line"><span class="comment">    func (b *Buffer) Bytes() []byte</span></span><br><span class="line"><span class="comment">    func (b *Buffer) Cap() int</span></span><br><span class="line"><span class="comment">    func (b *Buffer) Grow(n int)</span></span><br><span class="line"><span class="comment">    func (b *Buffer) Len() int</span></span><br><span class="line"><span class="comment">    func (b *Buffer) Next(n int) []byte</span></span><br><span class="line"><span class="comment">    func (b *Buffer) Read(p []byte) (n int, err error)</span></span><br><span class="line"><span class="comment">    func (b *Buffer) ReadByte() (byte, error)</span></span><br><span class="line"><span class="comment">    func (b *Buffer) ReadBytes(delim byte) (line []byte, err error)</span></span><br><span class="line"><span class="comment">    func (b *Buffer) ReadFrom(r io.Reader) (n int64, err error)</span></span><br><span class="line"><span class="comment">    func (b *Buffer) ReadRune() (r rune, size int, err error)</span></span><br><span class="line"><span class="comment">    func (b *Buffer) ReadString(delim byte) (line string, err error)</span></span><br><span class="line"><span class="comment">    func (b *Buffer) Reset()</span></span><br><span class="line"><span class="comment">    func (b *Buffer) String() string</span></span><br><span class="line"><span class="comment">    func (b *Buffer) Truncate(n int)</span></span><br><span class="line"><span class="comment">    func (b *Buffer) UnreadByte() error</span></span><br><span class="line"><span class="comment">    func (b *Buffer) UnreadRune() error</span></span><br><span class="line"><span class="comment">    func (b *Buffer) Write(p []byte) (n int, err error)</span></span><br><span class="line"><span class="comment">    func (b *Buffer) WriteByte(c byte) error</span></span><br><span class="line"><span class="comment">    func (b *Buffer) WriteRune(r rune) (n int, err error)</span></span><br><span class="line"><span class="comment">    func (b *Buffer) WriteString(s string) (n int, err error)</span></span><br><span class="line"><span class="comment">    func (b *Buffer) WriteTo(w io.Writer) (n int64, err error)</span></span><br><span class="line"><span class="comment">type Reader</span></span><br><span class="line"><span class="comment">    func NewReader(b []byte) *Reader</span></span><br><span class="line"><span class="comment">    func (r *Reader) Len() int</span></span><br><span class="line"><span class="comment">    func (r *Reader) Read(b []byte) (n int, err error)</span></span><br><span class="line"><span class="comment">    func (r *Reader) ReadAt(b []byte, off int64) (n int, err error)</span></span><br><span class="line"><span class="comment">    func (r *Reader) ReadByte() (byte, error)</span></span><br><span class="line"><span class="comment">    func (r *Reader) ReadRune() (ch rune, size int, err error)</span></span><br><span class="line"><span class="comment">    func (r *Reader) Reset(b []byte)</span></span><br><span class="line"><span class="comment">    func (r *Reader) Seek(offset int64, whence int) (int64, error)</span></span><br><span class="line"><span class="comment">    func (r *Reader) Size() int64</span></span><br><span class="line"><span class="comment">    func (r *Reader) UnreadByte() error</span></span><br><span class="line"><span class="comment">    func (r *Reader) UnreadRune() error</span></span><br><span class="line"><span class="comment">    func (r *Reader) WriteTo(w io.Writer) (n int64, err error)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Compare返回一个整数表示两个[]byte切片按字典比较的结果，若a==b返回0；若a&lt;b返回-1；若a&gt;b返回1。nil参数视为空切片</span></span><br><span class="line"><span class="comment">    *func Compare(a,b []byte) int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Contains判断切片b是否包含子切片subslice</span></span><br><span class="line"><span class="comment">    *func Contains(b,subslice []byte) bool&#123;</span></span><br><span class="line"><span class="comment">    return Index(b,subslice) != -1</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Count计算s中有多少个不重叠的sep子切片</span></span><br><span class="line"><span class="comment">    *func Count(s,sep []byte) int&#123;</span></span><br><span class="line"><span class="comment">    if len(sep) == 0 &#123;</span></span><br><span class="line"><span class="comment">    return utf8.RuneCount(s) + 1</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if len(sep) == 1 &#123;</span></span><br><span class="line"><span class="comment">    return bytealg.Count(s,sep[0])</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    n := 0</span></span><br><span class="line"><span class="comment">    for &#123;</span></span><br><span class="line"><span class="comment">    i := Index(s,sep)</span></span><br><span class="line"><span class="comment">    if i == -1 &#123;</span></span><br><span class="line"><span class="comment">    return n</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    n++</span></span><br><span class="line"><span class="comment">    s = s[i+len(sep):]</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    判断a和b是否长度相同且包含相同字节。nil参数等效于空片</span></span><br><span class="line"><span class="comment">    *func Equal(a,b []byte) bool &#123;</span></span><br><span class="line"><span class="comment">    return string(a) == string(b)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    EqualFold判断两个utf-8编码切片（将unicode大写、小写、标题三种格式字符视为相同）是否相同</span></span><br><span class="line"><span class="comment">    *func EqualFold(s,t []byte) bool</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Fields返回将字符串按照空白字符分割的多个子切片，若字符串全是空白或是空字符串的话，会返回空切片</span></span><br><span class="line"><span class="comment">    *func Fields(s []byte) [][]byte</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Fields are: %q&quot;</span>,bytes.Fields([]bye(<span class="string">&quot;  foo bar  baz   &quot;</span>)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    FieldsFunc使用函数f确定分割符（满足f的utf-8码值），若字符串全部是分隔符或是空字符串的话，会返回空切片</span></span><br><span class="line"><span class="comment">    *func FieldsFunc(s []byte,f func(rune) bool) [][]byte</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    f := <span class="function"><span class="keyword">func</span><span class="params">(c <span class="type">rune</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !unicode.IsLetter(c) &amp;&amp; !unicode.IsNumber(c)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Fields are: %q&quot;</span>,bytes.FieldsFunc([]<span class="type">byte</span>(<span class="string">&quot;  foo1;bar2,baz3...&quot;</span>),f))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    HasPrefix测试字节片s是否以前缀开头，HasSuffix测试字节片s是否以后缀结尾</span></span><br><span class="line"><span class="comment">    *func HasPrefix(s,prefix []byte) bool &#123;</span></span><br><span class="line"><span class="comment">    return len(s) &gt;= len(prefix) &amp;&amp; Equal(s[0:len(prefix)],prefix)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    *func HasSuffix(s,suffix []byte) bool &#123;</span></span><br><span class="line"><span class="comment">    return len(s) &gt;= len(suffix) &amp;&amp; Equal(s[len(s)-len(suffix):],suffix)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Index返回s中sep的第一个实例的索引；若s中不存在sep，则返回-1</span></span><br><span class="line"><span class="comment">    *func Index(s,sep []byte) int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Join将s的元素连接起来创建一个新的字节片，分隔符sep放置在所得切片中的元素之间</span></span><br><span class="line"><span class="comment">    *func Join(s [][]byte,sep []byte) []byte &#123;</span></span><br><span class="line"><span class="comment">    //若s无元素则返回空字节片</span></span><br><span class="line"><span class="comment">    if len(s) == 0 &#123;return []byte&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">    if len(s) == 1 &#123;return append([]byte(nil),s[0]...)&#125;</span></span><br><span class="line"><span class="comment">    n := len(sep) * (len(s) - 1)</span></span><br><span class="line"><span class="comment">    //计算所有元素和分隔符的字节总数</span></span><br><span class="line"><span class="comment">    for _,v := range s &#123;</span></span><br><span class="line"><span class="comment">    n += len(v)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    b := make([]byte,n)</span></span><br><span class="line"><span class="comment">    bp := copy(n,s[0])//记录连接位置</span></span><br><span class="line"><span class="comment">    for _,v := range s[1:] &#123;</span></span><br><span class="line"><span class="comment">    bp += copy(b[bp:],sep)</span></span><br><span class="line"><span class="comment">    bp += copy(b[bp:],v)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return b</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    s := [][]<span class="type">byte</span>&#123;[]<span class="type">byte</span>(<span class="string">&quot;foo&quot;</span>), []<span class="type">byte</span>(<span class="string">&quot;bar&quot;</span>), []<span class="type">byte</span>(<span class="string">&quot;baz&quot;</span>)&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, bytes.Join(s, []<span class="type">byte</span>(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    LastIndex返回s中sep最后一个实例的索引：若s中不存在sep，则返回-1</span></span><br><span class="line"><span class="comment">    *func LastIndex(s,sep []byte) int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    fmt.Println(bytes.Index([]<span class="type">byte</span>(<span class="string">&quot;go gopher&quot;</span>), []<span class="type">byte</span>(<span class="string">&quot;go&quot;</span>)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    LastIndexByte返回s中c的最后一个实例的索引；若s中不存在c则返回-1</span></span><br><span class="line"><span class="comment">    *func LastIndexByte(s []byte,c byte) int &#123;</span></span><br><span class="line"><span class="comment">    for i := len(s) - 1; i &gt;= 0; i-- &#123;</span></span><br><span class="line"><span class="comment">    if s[i] == c &#123;</span></span><br><span class="line"><span class="comment">    return i</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return -1</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    fmt.Println(bytes.LastIndexByte([]<span class="type">byte</span>(<span class="string">&quot;go gopher&quot;</span>), <span class="type">byte</span>(<span class="string">&#x27;g&#x27;</span>)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    返回count个b串联形成的新的切片</span></span><br><span class="line"><span class="comment">    *func Repeat(b []byte,count int) &#123;</span></span><br><span class="line"><span class="comment">    if count == 0 &#123;return []byte&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">    if count &lt; 0 &#123;</span></span><br><span class="line"><span class="comment">    panic(&quot;bytes: negative Repeat count&quot;)</span></span><br><span class="line"><span class="comment">    &#125;else if len(b)*count/count != len(b) &#123;</span></span><br><span class="line"><span class="comment">    panic(&quot;bytes: Repeat count causes overflow&quot;)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    nb := make([]byte,len(b)*count)</span></span><br><span class="line"><span class="comment">    bp := copy(nb,b)</span></span><br><span class="line"><span class="comment">    for bp &lt; len(nb) &#123;</span></span><br><span class="line"><span class="comment">    copy(nb[bp:],nb[:bp])</span></span><br><span class="line"><span class="comment">    bp *= 2</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return nb</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;ba%s&quot;</span>, bytes.Repeat([]<span class="type">byte</span>(<span class="string">&quot;na&quot;</span>), <span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Replace将返回slice的副本，其中有old的前n个非重叠实例被new取代，若old为空，则它在切片的开头和每个UTF-8序列之后匹配，最多产生k + 1个k - rune切片的替换；若n &lt; 0，则替换次数没有限制</span></span><br><span class="line"><span class="comment">    func Replace(s,old,new []byte,n int) []byte &#123;</span></span><br><span class="line"><span class="comment">    m := 0</span></span><br><span class="line"><span class="comment">    if n != 0 &#123;</span></span><br><span class="line"><span class="comment">    //计算s切片中有多少个old</span></span><br><span class="line"><span class="comment">    m = Count(s,old)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if m == 0 &#123;</span></span><br><span class="line"><span class="comment">    // Just return a copy</span></span><br><span class="line"><span class="comment">    return append([]byte(nil),s...)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //若要替换的数小于0或大于m则全替换</span></span><br><span class="line"><span class="comment">    if n &lt; 0 || m &lt; n &#123;</span></span><br><span class="line"><span class="comment">    n = m</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">            //计算缓冲区新切片总数</span></span><br><span class="line"><span class="comment">            t := make([]byte,len(s)+n*(len(new)-len(old)))</span></span><br><span class="line"><span class="comment">            w := 0</span></span><br><span class="line"><span class="comment">            start := 0</span></span><br><span class="line"><span class="comment">            for i := 0; i &lt; n; i++ &#123;</span></span><br><span class="line"><span class="comment">            j := start</span></span><br><span class="line"><span class="comment">            if len(old) == 0 &#123;</span></span><br><span class="line"><span class="comment">            if i &gt; 0 &#123;</span></span><br><span class="line"><span class="comment">            _,wid := utf8.DecodeRune(s[start:])</span></span><br><span class="line"><span class="comment">            j += wid</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">            j += Index(s[start:],old)</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            w += copy(t[w:],s[start:j])</span></span><br><span class="line"><span class="comment">            w += copy(t[w:],new)</span></span><br><span class="line"><span class="comment">            start = j + len(old)</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            w += copy(t[w:],s[start:])</span></span><br><span class="line"><span class="comment">            return t[0:w]</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    func ReplaceAll(s, old, new []byte) []byte &#123;</span></span><br><span class="line"><span class="comment">    return Replace(s,old,new,-1)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, bytes.Replace([]<span class="type">byte</span>(<span class="string">&quot;oink oink oink&quot;</span>), []<span class="type">byte</span>(<span class="string">&quot;k&quot;</span>), []<span class="type">byte</span>(<span class="string">&quot;ky&quot;</span>), <span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    符文将s解释为UTF-8编码的代码点序列。它返回与s等效的一片符文(Unicode代码点)</span></span><br><span class="line"><span class="comment">    func Runes(s []byte) []rune &#123;</span></span><br><span class="line"><span class="comment">    t := make([]rune,utf8.RuneCount(s))</span></span><br><span class="line"><span class="comment">    i := 0</span></span><br><span class="line"><span class="comment">    for len(s) &gt; 0 &#123;</span></span><br><span class="line"><span class="comment">    r,l := utf8.DecodeRune(s)</span></span><br><span class="line"><span class="comment">    t[i] = r</span></span><br><span class="line"><span class="comment">    i++</span></span><br><span class="line"><span class="comment">    s = s[l:]</span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">    return t</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    rs := bytes.Runes([]<span class="type">byte</span>(<span class="string">&quot;go gopher&quot;</span>))</span><br><span class="line">    <span class="keyword">for</span> _,r := <span class="keyword">range</span> rs &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%#U\n&quot;</span>,r)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出：</span></span><br><span class="line"><span class="comment">    U+0067 &#x27;g&#x27;</span></span><br><span class="line"><span class="comment">        U+006F &#x27;o&#x27;</span></span><br><span class="line"><span class="comment">        U+0020 &#x27; &#x27;</span></span><br><span class="line"><span class="comment">        U+0067 &#x27;g&#x27;</span></span><br><span class="line"><span class="comment">        U+006F &#x27;o&#x27;</span></span><br><span class="line"><span class="comment">        U+0070 &#x27;p&#x27;</span></span><br><span class="line"><span class="comment">        U+0068 &#x27;h&#x27;</span></span><br><span class="line"><span class="comment">        U+0065 &#x27;e&#x27;</span></span><br><span class="line"><span class="comment">        U+0072 &#x27;r&#x27;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将片段s分割为所有由sep分隔的子片段，返回这些分隔符之间的子片段的片段，若sep为空，则Split在每个UTF-8序列后拆分，它等效于SplitN，计数为-1</span></span><br><span class="line"><span class="comment">    func Split(s,sep []byte) [][]byte</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, bytes.Split([]<span class="type">byte</span>(<span class="string">&quot;a,b,c&quot;</span>), []<span class="type">byte</span>(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出：[&quot;a&quot; &quot;b&quot; &quot;c&quot;]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Trim通过切掉cutset中包含的所有前导和尾随UTF-8编码的代码点返回s的子片段</span></span><br><span class="line"><span class="comment">    func Trim(s []byte,cutset string) []byte</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;[%q]&quot;</span>, bytes.Trim([]<span class="type">byte</span>(<span class="string">&quot; !!! Achtung! Achtung! !!! &quot;</span>), <span class="string">&quot;! &quot;</span>))</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出：[&quot;Achtung! Achtung&quot;]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><h4 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h4><p>轻量级的执行线程，多个goroutine比一个线程轻量，是go的基本执行单元；每个go程序至少有一个主goroutine（程序启动时自动创建）；使用方法类似其它语言的协程（coroutine）</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello everybody&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> Hello()</span><br><span class="line">    fmt.Println(<span class="string">&quot;Golang-Gorontine Example&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时并未执行Hello方法，main执行完后直接退出了，需要使用通道让Hello-Goroutine告诉main执行完成后退出</span></span><br></pre></td></tr></table></figure><h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4><p>多个goroutine之间的沟通渠道，用于将结果、错误或任何信息从一个传递到另一个；通道是有类型的</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(ch <span class="keyword">chan</span> <span class="type">int</span>)</span></span>  &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello everybody&quot;</span>)</span><br><span class="line">    ch &lt;- <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> Hello(ch)</span><br><span class="line">    &lt;-ch</span><br><span class="line">    fmt.Println(<span class="string">&quot;Golang-Gorontine Example&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当请求进来时，Handler创建一个监控goroutine并打印信息：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, SayHello) <span class="comment">// 设置访问的路由</span></span><br><span class="line">    log.Fatalln(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>,<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SayHello</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span>  &#123;</span><br><span class="line">    fmt.Println(&amp;request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">range</span> time.Tick(time.Second) &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Current request is in progress&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">    writer.Write([]<span class="type">byte</span>(<span class="string">&quot;Hi, New Request Comes&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时假定请求耗时2s，在请求2s后返回，期望打印2次后立即停止，但运行发现，监控goroutine打印2次后仍不会结束且会一直打印；问题在创建监控goroutine后未对生命周期作控制；下面在打印前检测<code>request.Context()</code>是否已经结束，若结束则退出循环</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, SayHello) <span class="comment">// 设置访问的路由</span></span><br><span class="line"></span><br><span class="line">    log.Fatalln(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>,<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SayHello</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span>  &#123;</span><br><span class="line">    fmt.Println(&amp;request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">range</span> time.Tick(time.Second) &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;- request.Context().Done():</span><br><span class="line">                fmt.Println(<span class="string">&quot;request is outgoing&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;Current request is in progress&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">    writer.Write([]<span class="type">byte</span>(<span class="string">&quot;Hi, New Request Comes&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于如上需求，context包应运而生；<strong>context可以提供一个请求，从API请求边界到各goroutine请求域数据传递、取消信号及截止时间等能力</strong></p><h4 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h4><p>Go中每一个请求都是通过一个单独的Goroutine进行处理的，HTTP/RPC请求处理器往往会启动新的Goroutine访问数据库和RPC服务，可能会创建多个来处理一次请求；Context的主要作用即在不同Goroutine间同步请求特定的数据、取消信号以及处理请求的截止日期</p><h4 id="Context接口"><a href="#Context接口" class="headerlink" title="Context接口"></a>Context接口</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line">    Deadline() (deadline time.Time, ok <span class="type">bool</span>)</span><br><span class="line">    Done() &lt;- <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    Err() <span class="type">error</span></span><br><span class="line">    Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deadline方法需要返回当前Context被取消的时间，即完成工作的截止时间</span></span><br><span class="line"><span class="comment">// Done方法返回一个Channel，该Channel会在当前工作完成或上下文被取消后关闭，多次调用该方法会返回同一个Channel</span></span><br><span class="line"><span class="comment">// Err方法返回Context结束的原因，只会在Done返回的Channel被关闭时才会返回非空的值</span></span><br><span class="line"><span class="comment">// 若当前Context被取消就会返回Canceled错误</span></span><br><span class="line"><span class="comment">// 若当前Context超时就会返回DeadlineExceed错误</span></span><br><span class="line"><span class="comment">// Value方法从Context中返回键对应的值对于同一个上下文来说，多次调用Value 并传入相同的Key会返回相同的结果，该方法仅用于传递跨API和进程间跟请求域数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 跨域：若a页面想获取b页面资源，但它们的协议、域名、端口、子域名不同；则所进行的访问行动都是跨域的（跨域限制访问其实是浏览器的限制）</span></span><br><span class="line"><span class="comment">// 跨域问题解决：用nginx作为代理服务器只在80端口交互</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Go内置两个函数：Background()和TODO()，这两个函数分别返回一个实现了Context接口的background和todo;</span></span><br><span class="line"><span class="comment">// Background()主要用于main函数、初始化以及测试代码中，作为Context这个树结构的最顶层的Context，也就是根Context</span></span><br><span class="line"><span class="comment">// TODO()，它目前还不知道具体的使用场景，如果我们不知道该使用什么Context的时候，可以使用这个</span></span><br><span class="line"><span class="comment">// background和todo本质上都是emptyCtx结构体类型，是一个不可取消，没有设置截止时间，没有携带任何值的Context</span></span><br></pre></td></tr></table></figure><h5 id="With系列函数"><a href="#With系列函数" class="headerlink" title="With系列函数"></a>With系列函数</h5><p>此外，<code>context</code>包中还定义了四个With系列函数；这些函数返回的都是实现了上述接口方法的对应结构体</p><p><img src="https://s1.ax1x.com/2023/02/15/pS7P1MD.png"></p><h6 id="WithCancel"><a href="#WithCancel" class="headerlink" title="WithCancel"></a>WithCancel</h6><p>接受一个Context并返回其子Context和取消函数cancel</p><p>新创建协程中传入子Context做参数且监控其Done通道，若收到消息则退出</p><p>需要新协程结束时在外调用cancel函数，即会往子Context的Done通道发送消息</p><p>当父Context的Done()关闭时，子ctx的Done()也会被关闭</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用根context创建一个父context，并使用其创建一个协程</span></span><br><span class="line"><span class="comment">// 再由父创建一个子context，再使用该子context创建一个协程</span></span><br><span class="line"><span class="comment">// 一段时间后调用父context的cancel函数发现父和子协程都收到信号结束了</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 父context(利用根context得到)</span></span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父context的子协程</span></span><br><span class="line"><span class="keyword">go</span> watch1(ctx)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 子context，注意：这里虽然也返回了cancel的函数对象，但是未使用</span></span><br><span class="line">valueCtx, _ := context.WithCancel(ctx)</span><br><span class="line"><span class="comment">// 子context的子协程</span></span><br><span class="line"><span class="keyword">go</span> watch2(valueCtx)</span><br><span class="line"> </span><br><span class="line">fmt.Println(<span class="string">&quot;现在开始等待3秒,time=&quot;</span>, time.Now().Unix())</span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 调用cancel()</span></span><br><span class="line">fmt.Println(<span class="string">&quot;等待3秒结束,调用cancel()函数&quot;</span>)</span><br><span class="line">cancel()</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 再等待5秒看输出，可以发现父context的子协程和子context的子协程都会被结束掉</span></span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;最终结束,time=&quot;</span>, time.Now().Unix())</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 父context的协程</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">watch1</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done(): <span class="comment">//取出值即说明是结束信号</span></span><br><span class="line">fmt.Println(<span class="string">&quot;收到信号，父context的协程退出,time=&quot;</span>, time.Now().Unix())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;父context的协程监控中,time=&quot;</span>, time.Now().Unix())</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 子context的协程</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">watch2</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done(): <span class="comment">//取出值即说明是结束信号</span></span><br><span class="line">fmt.Println(<span class="string">&quot;收到信号，子context的协程退出,time=&quot;</span>, time.Now().Unix())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;子context的协程监控中,time=&quot;</span>, time.Now().Unix())</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// withCancel的实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCancel</span><span class="params">(parent Context)</span></span> (ctx Context, cancel CancelFunc) &#123;</span><br><span class="line"><span class="keyword">if</span> parent == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;cannot create context from nil parent&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">c := newCancelCtx(parent)   <span class="comment">//返回一个cancelCtx结构体</span></span><br><span class="line">propagateCancel(parent, &amp;c)   <span class="comment">//绑定父子context关系</span></span><br><span class="line"><span class="keyword">return</span> &amp;c, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c.cancel(<span class="literal">true</span>, Canceled) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cancelCtx <span class="keyword">struct</span> &#123;</span><br><span class="line">Context   <span class="comment">// 自己的父context</span></span><br><span class="line"></span><br><span class="line">mu       sync.Mutex</span><br><span class="line">done     <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;         <span class="comment">// 接收取消信号的管道</span></span><br><span class="line">children <span class="keyword">map</span>[canceler]<span class="keyword">struct</span>&#123;&#125; <span class="comment">// 包含自己路径下所有子context集合</span></span><br><span class="line">err      <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ctx.Done()其实就是一个管道，即上面cancelCtx结构体中的done</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cancelCtx)</span></span> Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125; &#123;</span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">if</span> c.done == <span class="literal">nil</span> &#123;</span><br><span class="line">c.done = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">d := c.done</span><br><span class="line">c.mu.Unlock()</span><br><span class="line"><span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="WithTimeout、WithDeadline"><a href="#WithTimeout、WithDeadline" class="headerlink" title="WithTimeout、WithDeadline"></a>WithTimeout、WithDeadline</h6><p><code>WithTimeout</code>底层实现是调用的<code>WithDeadline</code>，并添加对应的过期时间</p><p><code>WithDeadline</code>即添加了<code>timer</code>计时器，<code>time.AfterFunc</code>中计时条件满足时自动触发<code>cancel</code>函数</p><h6 id="WithValue"><a href="#WithValue" class="headerlink" title="WithValue"></a>WithValue</h6><p>返回一个带有键值对的<code>valueCtx</code>结构体：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> valueCtx <span class="keyword">struct</span> &#123;</span><br><span class="line">Context</span><br><span class="line">key, val <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> DB <span class="keyword">struct</span>&#123;&#125;<span class="comment">//数据库操作句柄，代表一个具有零到多个底层连接的连接池，可以安全的被多个go程同时使用；sql包会自动创建和释放连接，也会维护一个闲置连接的连接池；连接池的大小可用SetMaxldleConns方法控制</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(driverName,dataSourceName <span class="type">string</span>)</span></span> (*DB,<span class="type">error</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">driverName表示driver名称，dataSourceName表示连接数据库的信息；</span></span><br><span class="line"><span class="comment">Open函数只验证其参数，不创建与数据库的连接，若要检查数据源的名称是否合法，应调用返回值的Ping方法；Open函数只需调用一次，很少需要关闭DB</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Ping() <span class="type">error</span></span><br><span class="line"><span class="comment">// 检查与数据库的连接是否有效</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Close() <span class="type">error</span></span><br><span class="line"><span class="comment">// 关闭数据库，释放任何打开的资源，一般不关闭DB，DB句柄通常被多个go程共享，并长期活跃</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Exec(query <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) (Result,<span class="type">error</span>)</span><br><span class="line"><span class="comment">// Exec执行一次命令（包括查询、删除、更新、插入等），不返回任何执行结果</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*DB)</span></span> Query(query <span class="type">string</span>,args ...<span class="keyword">interface</span>&#123;&#125;) (*Rows,<span class="type">error</span>)</span><br><span class="line"><span class="comment">// Query执行一次查询，返回多行结果，一般用于执行select命令</span></span><br><span class="line">    age := <span class="number">27</span></span><br><span class="line">    rows, err := db.Query(<span class="string">&quot;SELECT name FROM users WHERE age=?&quot;</span>, age)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> rows.Close()</span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        <span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">        <span class="keyword">if</span> err := rows.Scan(&amp;name); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%s is %d\n&quot;</span>, name, age)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := rows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> QueryRow(query <span class="type">string</span>,args ...<span class="keyword">interface</span>&#123;&#125;) *Row</span><br><span class="line"><span class="comment">// QueryRow执行一次查询并期望返回最多一行结果；QueryRow总是返回非nil的值，直到返回值的Scan方法被调用时才会返回被延迟的错误</span></span><br><span class="line">    id := <span class="number">123</span></span><br><span class="line">    <span class="keyword">var</span> username <span class="type">string</span></span><br><span class="line">    err := db.QueryRow(<span class="string">&quot;SELECT username FROM users WHERE id=?&quot;</span>, id).Scan(&amp;username)</span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> err == sql.ErrNoRows:</span><br><span class="line">        log.Printf(<span class="string">&quot;No user with that ID.&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> err != <span class="literal">nil</span>:</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Username is %s\n&quot;</span>, username)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*DB)</span></span> Begin() (*Tx,<span class="type">error</span>)</span><br><span class="line"><span class="comment">// 开始一个事务</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rs *Rows)</span></span> Next() <span class="type">bool</span></span><br><span class="line"><span class="comment">// 用于Scan方法的下一行结果，若成功返回真，若没有下一行或出现错误返回假</span></span><br></pre></td></tr></table></figure><h3 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h3><h4 id="json"><a href="#json" class="headerlink" title="json"></a>json</h4><p><code>struct tag</code>可以决定<code>Marshal</code>和<code>Unmarshal</code>函数如何序列化和反序列化数据</p><h5 id="Marshal"><a href="#Marshal" class="headerlink" title="Marshal"></a>Marshal</h5><p><code>func Marshal(v interface&#123;&#125;) ([]byte, error)</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ColorGroup <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID     <span class="type">int</span></span><br><span class="line">    Name   <span class="type">string</span></span><br><span class="line">    Colors []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line">group := ColorGroup&#123;</span><br><span class="line">    ID:     <span class="number">1</span>,</span><br><span class="line">    Name:   <span class="string">&quot;Reds&quot;</span>,</span><br><span class="line">    Colors: []<span class="type">string</span>&#123;<span class="string">&quot;Crimson&quot;</span>, <span class="string">&quot;Red&quot;</span>, <span class="string">&quot;Ruby&quot;</span>, <span class="string">&quot;Maroon&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">b, err := json.Marshal(group)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;error:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">os.Stdout.Write(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output: &#123;&quot;ID&quot;:1,&quot;Name&quot;:&quot;Reds&quot;,&quot;Colors&quot;:[&quot;Crimson&quot;,&quot;Red&quot;,&quot;Ruby&quot;,&quot;Maroon&quot;]&#125;</span></span><br></pre></td></tr></table></figure><h5 id="Unmarshal"><a href="#Unmarshal" class="headerlink" title="Unmarshal"></a>Unmarshal</h5><p><code>func Unmarshal(data []byte, v interface&#123;&#125;) error</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonBlob = []<span class="type">byte</span>(<span class="string">`[</span></span><br><span class="line"><span class="string">&#123;&quot;Name&quot;: &quot;Platypus&quot;, &quot;Order&quot;: &quot;Monotremata&quot;&#125;,</span></span><br><span class="line"><span class="string">&#123;&quot;Name&quot;: &quot;Quoll&quot;,    &quot;Order&quot;: &quot;Dasyuromorphia&quot;&#125;</span></span><br><span class="line"><span class="string">]`</span>)</span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="type">string</span></span><br><span class="line">    Order <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> animals []Animal</span><br><span class="line">err := json.Unmarshal(jsonBlob, &amp;animals)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;error:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%+v&quot;</span>, animals)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output: [&#123;Name:Platypus Order:Monotremata&#125; &#123;Name:Quoll Order:Dasyuromorphia&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p>实现了类似C语言<code>printf</code>和<code>scanf</code>的格式化I/O</p><h4 id="类型格式"><a href="#类型格式" class="headerlink" title="类型格式"></a>类型格式</h4><h5 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%v值的默认格式表示</span><br><span class="line">%+v类似%v，但输出结构体时会添加字段名</span><br><span class="line">%#v值的go语法表示</span><br><span class="line">%T值的类型的go语法表示</span><br><span class="line">%%百分号</span><br></pre></td></tr></table></figure><h5 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%t单词true或false</span><br></pre></td></tr></table></figure><h5 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%b表示为二进制</span><br><span class="line">%c该值对应的unicode码值</span><br><span class="line">%d表示为十进制</span><br><span class="line">%o表示为八进制</span><br><span class="line">%q该值对应的单引号括起来的go语法字符字面值，必要时采用安全的转义表示</span><br><span class="line">%x表示为十六进制，使用a-f</span><br><span class="line">%X表示为十六进制，使用A-F</span><br><span class="line">%U表示为Unicode格式：U+1234，等价于&quot;U+%04X&quot;</span><br></pre></td></tr></table></figure><h5 id="浮点数与复数"><a href="#浮点数与复数" class="headerlink" title="浮点数与复数"></a>浮点数与复数</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%b无小数部分、二进制指数的科学计数法，如-123456p-78;</span><br><span class="line">%e科学计数法，如-1234.456e+78</span><br><span class="line">%E科学计数法，如-1234.456E+78</span><br><span class="line">%f有小数部分但无指数部分，如123.456（在后面加入小数，个位表示宽度，小数位表示精度）</span><br><span class="line">%F等价于%f</span><br><span class="line">%g根据实际情况采用%e或%f格式（以获得更简洁、准确的输出）</span><br><span class="line">%G根据实际情况采用%E或%F格式（以获得更简洁、准确的输出）</span><br></pre></td></tr></table></figure><h5 id="字符串与-byte"><a href="#字符串与-byte" class="headerlink" title="字符串与[]byte"></a>字符串与[]byte</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%s直接输出字符串或者[]byte</span><br><span class="line">%q该值对应双引号括起来的go语法字符串字面值，必要时采用安全的转义表示</span><br><span class="line">%x每个字节用两字符十六进制数表示（使用a-f）</span><br><span class="line">%X每个字节用两字符十六进制数表示（使用A-F）    </span><br></pre></td></tr></table></figure><h5 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%p表示为十六进制，并加上前导的0x    </span><br><span class="line">fmt.Sprintf(&quot;%[2]d %[1]d\n&quot;, 11, 22)//会生成&quot;22 11&quot;</span><br></pre></td></tr></table></figure><h4 id="向外输出"><a href="#向外输出" class="headerlink" title="向外输出"></a>向外输出</h4><h5 id="Print"><a href="#Print" class="headerlink" title="Print"></a>Print</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接输出内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>,err <span class="type">error</span>)</span><br><span class="line"><span class="comment">//支持格式化输出字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Printf</span><span class="params">(format <span class="type">string</span>,a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>,err <span class="type">error</span>)</span><br><span class="line"><span class="comment">//在输出内容结尾添加一个换行符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>,err <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;名字是：%v\n&quot;</span>,<span class="string">&quot;lxx&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;年龄是：%v\n&quot;</span>,<span class="number">19</span>)</span><br><span class="line">p:= <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;&#123;<span class="string">&quot;lxx&quot;</span>,<span class="number">19</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;结构体内容为：%v\n&quot;</span>,p)</span><br><span class="line">fmt.Printf(<span class="string">&quot;结构体内容为(带字段名)：%+v\n&quot;</span>,p) <span class="comment">// 输出结构体是会带name</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;结构体内容为(值的Go语法表示)：%#v\n&quot;</span>,p) <span class="comment">// 输出结构体是会带name</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;切片内容为：%v\n&quot;</span>,[]<span class="type">int</span>&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;)</span><br><span class="line">fmt.Printf(<span class="string">&quot;切片内容为(值的Go语法表示)：%#v\n&quot;</span>,[]<span class="type">int</span>&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;切片值的类型为：%T\n&quot;</span>,[]<span class="type">int</span>&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;)</span><br><span class="line">fmt.Printf(<span class="string">&quot;字符串值的类型为：%T\n&quot;</span>,<span class="string">&quot;lxx&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;打印百分百：100%%\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//名字是：lxx</span></span><br><span class="line"><span class="comment">//年龄是：19</span></span><br><span class="line"><span class="comment">//结构体内容为：&#123;lxx 19&#125;</span></span><br><span class="line"><span class="comment">//结构体内容为(带字段名)：&#123;name:lxx age:19&#125;</span></span><br><span class="line"><span class="comment">//结构体内容为(值的Go语法表示)：struct &#123; name string; age int &#125;&#123;name:&quot;lxx&quot;, age:19&#125;</span></span><br><span class="line"><span class="comment">//切片内容为：[4 5 6]</span></span><br><span class="line"><span class="comment">//切片内容为(值的Go语法表示)：[]int&#123;4, 5, 6&#125;</span></span><br><span class="line"><span class="comment">//切片值的类型为：[]int</span></span><br><span class="line"><span class="comment">//字符串值的类型为：string</span></span><br><span class="line"><span class="comment">//打印百分百：100%</span></span><br></pre></td></tr></table></figure><h5 id="Fprint"><a href="#Fprint" class="headerlink" title="Fprint"></a>Fprint</h5><p>将内容输出到一个<code>io.Writer</code>接口类型的变量<code>w</code>中，通常用该函数往文件中写入内容</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprint</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintf</span><span class="params">(w io.Writer, format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintln</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//向标准输出写入内容</span></span><br><span class="line">    fmt.Fprint(os.Stdout,<span class="string">&quot;向标准输出（控制台）写入内容&quot;</span>)</span><br><span class="line">    fileObj,err := os.OpenFile(<span class="string">&quot;./xx.txt&quot;</span>,os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;打开文件出错，err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">    name := <span class="string">&quot;lxx is nb&quot;</span></span><br><span class="line">    <span class="comment">// 向打开的文件句柄中写入内容</span></span><br><span class="line">fmt.Fprintf(fileObj, <span class="string">&quot;往文件中(标准输出)写如信息：%s&quot;</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Sprint"><a href="#Sprint" class="headerlink" title="Sprint"></a>Sprint</h5><p>将传入的数据生成并返回一个字符串</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprint</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprintf</span><span class="params">(format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprintln</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">string</span></span><br><span class="line"></span><br><span class="line">s1 := fmt.Sprint(<span class="string">&quot;lxx&quot;</span>)</span><br><span class="line">name := <span class="string">&quot;lxx&quot;</span></span><br><span class="line">age := <span class="number">18</span></span><br><span class="line">s2 := fmt.Sprintf(<span class="string">&quot;姓名:%s,年龄:%d&quot;</span>, name, age)</span><br><span class="line">s3 := fmt.Sprintln(<span class="string">&quot;lxx is nb&quot;</span>)</span><br><span class="line">fmt.Println(s1, s2, s3)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Output: lxx 姓名:lxx,年龄:18 lxx is nb</span></span><br></pre></td></tr></table></figure><h4 id="获取输入"><a href="#获取输入" class="headerlink" title="获取输入"></a>获取输入</h4><h5 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h5><ul><li>从标准输入扫描文本，读取由空白字符分隔的值保存到传递给本函数的参数中，换行符视为空白符</li><li>返回成功扫描的数据个数和遇到的任何错误，若读取数据个数比提供的参数少，会返回一个错误报告原因</li><li><strong>若想完整获取输入的内容，而输入的内容可能包含空格，可以使用<code>bufio</code>中的方法</strong></li></ul><p><code>func Scan(a ...interface&#123;&#125;) (n int,err error)</code></p><h5 id="Scanf"><a href="#Scanf" class="headerlink" title="Scanf"></a>Scanf</h5><p><code>func Scanf(format string, a ...interface&#123;&#125;) (n int, err error)</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">)</span><br><span class="line">fmt.Scanf(<span class="string">&quot;name:%s age:%d&quot;</span>, &amp;name, &amp;age) <span class="comment">// 在控制台按照该格式输入</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;扫描结果： 姓名:%s 年龄:%d \n&quot;</span>, name, age)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台按如下格式输入</span></span><br><span class="line"><span class="comment">//name:lxx age:19</span></span><br><span class="line"><span class="comment">//扫描结果： 姓名:lxx 年龄:19 </span></span><br></pre></td></tr></table></figure><h5 id="Scanln"><a href="#Scanln" class="headerlink" title="Scanln"></a>Scanln</h5><p>类似Scan，遇到换行时才停止扫描</p><p><code>func Scanln(a ...interface&#123;&#125;) (n int, err error)</code></p><h5 id="Fscan和Sscan"><a href="#Fscan和Sscan" class="headerlink" title="Fscan和Sscan"></a>Fscan和Sscan</h5><p>Fscan从<code>io.Reader</code>中读取数据，Sscan从指定字符串中读取数据</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fscan</span><span class="params">(r io.Reader, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fscanln</span><span class="params">(r io.Reader, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fscanf</span><span class="params">(r io.Reader, format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sscan</span><span class="params">(str <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sscanln</span><span class="params">(str <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sscanf</span><span class="params">(str <span class="type">string</span>, format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span>=<span class="string">&quot;lxx&quot;</span></span><br><span class="line"><span class="keyword">var</span> newName <span class="type">string</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">fmt.Sscan(name,&amp;newName) <span class="comment">// 相当于把name的值赋值给newName</span></span><br><span class="line">fmt.Println(name)</span><br><span class="line">fmt.Println(newName)</span><br></pre></td></tr></table></figure><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">func Compare(a, b string) int</span></span><br><span class="line"><span class="comment">func Contains(s, substr string) bool</span></span><br><span class="line"><span class="comment">func ContainsAny(s, chars string) bool</span></span><br><span class="line"><span class="comment">func ContainsRune(s string, r rune) bool</span></span><br><span class="line"><span class="comment">func Count(s, substr string) int</span></span><br><span class="line"><span class="comment">func EqualFold(s, t string) bool</span></span><br><span class="line"><span class="comment">func Fields(s string) []string</span></span><br><span class="line"><span class="comment">func FieldsFunc(s string, f func(rune) bool) []string</span></span><br><span class="line"><span class="comment">func HasPrefix(s, prefix string) bool</span></span><br><span class="line"><span class="comment">func HasSuffix(s, suffix string) bool</span></span><br><span class="line"><span class="comment">func Index(s, substr string) int</span></span><br><span class="line"><span class="comment">func IndexAny(s, chars string) int</span></span><br><span class="line"><span class="comment">func IndexByte(s string, c byte) int</span></span><br><span class="line"><span class="comment">func IndexFunc(s string, f func(rune) bool) int</span></span><br><span class="line"><span class="comment">func IndexRune(s string, r rune) int</span></span><br><span class="line"><span class="comment">func Join(elems []string, sep string) string</span></span><br><span class="line"><span class="comment">func LastIndex(s, substr string) int</span></span><br><span class="line"><span class="comment">func LastIndexAny(s, chars string) int</span></span><br><span class="line"><span class="comment">func LastIndexByte(s string, c byte) int</span></span><br><span class="line"><span class="comment">func LastIndexFunc(s string, f func(rune) bool) int</span></span><br><span class="line"><span class="comment">func Map(mapping func(rune) rune, s string) string</span></span><br><span class="line"><span class="comment">func Repeat(s string, count int) string</span></span><br><span class="line"><span class="comment">func Replace(s, old, new string, n int) string</span></span><br><span class="line"><span class="comment">func ReplaceAll(s, old, new string) string</span></span><br><span class="line"><span class="comment">func Split(s, sep string) []string</span></span><br><span class="line"><span class="comment">func SplitAfter(s, sep string) []string</span></span><br><span class="line"><span class="comment">func SplitAfterN(s, sep string, n int) []string</span></span><br><span class="line"><span class="comment">func SplitN(s, sep string, n int) []string</span></span><br><span class="line"><span class="comment">func Title(s string) string</span></span><br><span class="line"><span class="comment">func ToLower(s string) string</span></span><br><span class="line"><span class="comment">func ToLowerSpecial(c unicode.SpecialCase, s string) string</span></span><br><span class="line"><span class="comment">func ToTitle(s string) string</span></span><br><span class="line"><span class="comment">func ToTitleSpecial(c unicode.SpecialCase, s string) string</span></span><br><span class="line"><span class="comment">func ToUpper(s string) string</span></span><br><span class="line"><span class="comment">func ToUpperSpecial(c unicode.SpecialCase, s string) string</span></span><br><span class="line"><span class="comment">func ToValidUTF8(s, replacement string) string</span></span><br><span class="line"><span class="comment">func Trim(s, cutset string) string</span></span><br><span class="line"><span class="comment">func TrimFunc(s string, f func(rune) bool) string</span></span><br><span class="line"><span class="comment">func TrimLeft(s, cutset string) string</span></span><br><span class="line"><span class="comment">func TrimLeftFunc(s string, f func(rune) bool) string</span></span><br><span class="line"><span class="comment">func TrimPrefix(s, prefix string) string</span></span><br><span class="line"><span class="comment">func TrimRight(s, cutset string) string</span></span><br><span class="line"><span class="comment">func TrimRightFunc(s string, f func(rune) bool) string</span></span><br><span class="line"><span class="comment">func TrimSpace(s string) string</span></span><br><span class="line"><span class="comment">func TrimSuffix(s, suffix string) string</span></span><br><span class="line"><span class="comment">type Builder</span></span><br><span class="line"><span class="comment">func (b *Builder) Cap() int</span></span><br><span class="line"><span class="comment">func (b *Builder) Grow(n int)</span></span><br><span class="line"><span class="comment">func (b *Builder) Len() int</span></span><br><span class="line"><span class="comment">func (b *Builder) Reset()</span></span><br><span class="line"><span class="comment">func (b *Builder) String() string</span></span><br><span class="line"><span class="comment">func (b *Builder) Write(p []byte) (int, error)</span></span><br><span class="line"><span class="comment">func (b *Builder) WriteByte(c byte) error</span></span><br><span class="line"><span class="comment">func (b *Builder) WriteRune(r rune) (int, error)</span></span><br><span class="line"><span class="comment">func (b *Builder) WriteString(s string) (int, error)</span></span><br><span class="line"><span class="comment">type Reader</span></span><br><span class="line"><span class="comment">func NewReader(s string) *Reader</span></span><br><span class="line"><span class="comment">func (r *Reader) Len() int</span></span><br><span class="line"><span class="comment">func (r *Reader) Read(b []byte) (n int, err error)</span></span><br><span class="line"><span class="comment">func (r *Reader) ReadAt(b []byte, off int64) (n int, err error)</span></span><br><span class="line"><span class="comment">func (r *Reader) ReadByte() (byte, error)</span></span><br><span class="line"><span class="comment">func (r *Reader) ReadRune() (ch rune, size int, err error)</span></span><br><span class="line"><span class="comment">func (r *Reader) Reset(s string)</span></span><br><span class="line"><span class="comment">func (r *Reader) Seek(offset int64, whence int) (int64, error)</span></span><br><span class="line"><span class="comment">func (r *Reader) Size() int64</span></span><br><span class="line"><span class="comment">func (r *Reader) UnreadByte() error</span></span><br><span class="line"><span class="comment">func (r *Reader) UnreadRune() error</span></span><br><span class="line"><span class="comment">func (r *Reader) WriteTo(w io.Writer) (n int64, err error)</span></span><br><span class="line"><span class="comment">type Replacer</span></span><br><span class="line"><span class="comment">func NewReplacer(oldnew ...string) *Replacer</span></span><br><span class="line"><span class="comment">func (r *Replacer) Replace(s string) string</span></span><br><span class="line"><span class="comment">func (r *Replacer) WriteString(w io.Writer, s string) (n int, err error)</span></span><br><span class="line"><span class="comment">Bugs</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Compare返回一个按字典顺序比较两个字符串的整数，若a == b则为0；若为a &lt; b，结果为-1；若a &gt; b则为1</span></span><br><span class="line"><span class="comment">    func Compare(a,b string) int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    判断substr是否在s之内</span></span><br><span class="line"><span class="comment">    func Contains(s,substr string) bool &#123;</span></span><br><span class="line"><span class="comment">    return Index(s,substr) &gt;= 0</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Count计算s中substr的非重叠实例的数量，若substr是一个空字符串，则Count返回1+s中的Unicode代码点数</span></span><br><span class="line"><span class="comment">    func Count(s,substr string) int &#123;</span></span><br><span class="line"><span class="comment">    if len(substr) == 0 &#123;</span></span><br><span class="line"><span class="comment">    return utf8.RuneCountInString(s) + 1</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if len(substr) == 1 &#123;</span></span><br><span class="line"><span class="comment">    return bytealog.CountString(s,substr[0])</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    n := 0</span></span><br><span class="line"><span class="comment">    for &#123;</span></span><br><span class="line"><span class="comment">    i := Index(s,substr)</span></span><br><span class="line"><span class="comment">    if i == -1 &#123;return n&#125;</span></span><br><span class="line"><span class="comment">    n++</span></span><br><span class="line"><span class="comment">    s = s[i+len(substr):]</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Cap方法返回字节数组分配的内存空间大小</span></span><br><span class="line"><span class="comment">    func (b *Builder) Cap() int</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Grow方法扩展buf数组的分配内存的大小</span></span><br><span class="line"><span class="comment">    func (b *Builder) Grow(n int)</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Reset方法清空b的所有内容</span></span><br><span class="line"><span class="comment">    func (b *Builder) Reset() &#123;</span></span><br><span class="line"><span class="comment">    b.addr = nil</span></span><br><span class="line"><span class="comment">    b.buf = nil</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    String方法将b的数据以string类型返回</span></span><br><span class="line"><span class="comment">    func (b *Builder) String() string &#123;</span></span><br><span class="line"><span class="comment">    return *(*string)(unsafe.Pointer(&amp;b.buf))</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    b := strings.Builder&#123;&#125;</span><br><span class="line">_ = b.WriteByte(<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">fmt.Println(b.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Strconv"><a href="#Strconv" class="headerlink" title="Strconv"></a>Strconv</h3><p>主要提供不同数据类型相互转换的函数和方法</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Constants</span></span><br><span class="line"><span class="comment">Variables</span></span><br><span class="line"><span class="comment">func AppendBool(dst []byte, b bool) []byte</span></span><br><span class="line"><span class="comment">func AppendFloat(dst []byte, f float64, fmt byte, prec, bitSize int) []byte</span></span><br><span class="line"><span class="comment">func AppendInt(dst []byte, i int64, base int) []byte</span></span><br><span class="line"><span class="comment">func AppendQuote(dst []byte, s string) []byte</span></span><br><span class="line"><span class="comment">func AppendQuoteRune(dst []byte, r rune) []byte</span></span><br><span class="line"><span class="comment">func AppendQuoteRuneToASCII(dst []byte, r rune) []byte</span></span><br><span class="line"><span class="comment">func AppendQuoteRuneToGraphic(dst []byte, r rune) []byte</span></span><br><span class="line"><span class="comment">func AppendQuoteToASCII(dst []byte, s string) []byte</span></span><br><span class="line"><span class="comment">func AppendQuoteToGraphic(dst []byte, s string) []byte</span></span><br><span class="line"><span class="comment">func AppendUint(dst []byte, i uint64, base int) []byte</span></span><br><span class="line"><span class="comment">func Atoi(s string) (int, error)</span></span><br><span class="line"><span class="comment">func CanBackquote(s string) bool</span></span><br><span class="line"><span class="comment">func FormatBool(b bool) string</span></span><br><span class="line"><span class="comment">func FormatComplex(c complex128, fmt byte, prec, bitSize int) string</span></span><br><span class="line"><span class="comment">func FormatFloat(f float64, fmt byte, prec, bitSize int) string</span></span><br><span class="line"><span class="comment">func FormatInt(i int64, base int) string</span></span><br><span class="line"><span class="comment">func FormatUint(i uint64, base int) string</span></span><br><span class="line"><span class="comment">func IsGraphic(r rune) bool</span></span><br><span class="line"><span class="comment">func IsPrint(r rune) bool</span></span><br><span class="line"><span class="comment">func Itoa(i int) string</span></span><br><span class="line"><span class="comment">func ParseBool(str string) (bool, error)</span></span><br><span class="line"><span class="comment">func ParseComplex(s string, bitSize int) (complex128, error)</span></span><br><span class="line"><span class="comment">func ParseFloat(s string, bitSize int) (float64, error)</span></span><br><span class="line"><span class="comment">func ParseInt(s string, base int, bitSize int) (i int64, err error)</span></span><br><span class="line"><span class="comment">func ParseUint(s string, base int, bitSize int) (uint64, error)</span></span><br><span class="line"><span class="comment">func Quote(s string) string</span></span><br><span class="line"><span class="comment">func QuoteRune(r rune) string</span></span><br><span class="line"><span class="comment">func QuoteRuneToASCII(r rune) string</span></span><br><span class="line"><span class="comment">func QuoteRuneToGraphic(r rune) string</span></span><br><span class="line"><span class="comment">func QuoteToASCII(s string) string</span></span><br><span class="line"><span class="comment">func QuoteToGraphic(s string) string</span></span><br><span class="line"><span class="comment">func Unquote(s string) (string, error)</span></span><br><span class="line"><span class="comment">func UnquoteChar(s string, quote byte) (value rune, multibyte bool, tail string, err error)</span></span><br><span class="line"><span class="comment">type NumError</span></span><br><span class="line"><span class="comment">func (e *NumError) Error() string</span></span><br><span class="line"><span class="comment">func (e *NumError) Unwrap() error</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    AppendBool根据b的值将&quot;true&quot;或&quot;false&quot;附加到dst返回扩展缓冲区</span></span><br><span class="line"><span class="comment">    *func AppendBool(dst []byte,b bool) []byte &#123;</span></span><br><span class="line"><span class="comment">    if b &#123;</span></span><br><span class="line"><span class="comment">    return append(dst, &quot;true&quot;...)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return append(dst, &quot;false&quot;...)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    b := []<span class="type">byte</span>(<span class="string">&quot;bool:&quot;</span>)</span><br><span class="line">    b = strconv.AppendBool(b,<span class="literal">true</span>)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    FormatBool根据b的值返回&quot;true&quot;或&quot;false&quot;</span></span><br><span class="line"><span class="comment">    *func FormatBool(b bool) string</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Itoa等效于FormatInt(int64(i),10)</span></span><br><span class="line"><span class="comment">    *func Itoa(i int) string</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    NumError记录转换失败</span></span><br><span class="line"><span class="comment">    *func (e *NumError) Error() string</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    str := <span class="string">&quot;Not a number&quot;</span></span><br><span class="line">    <span class="keyword">if</span> _,err := strconv.ParseFloat(str,<span class="number">64</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        e := err.(*strconv.NumError)</span><br><span class="line">        fmt.Println(<span class="string">&quot;Func:&quot;</span>, e.Func)</span><br><span class="line">fmt.Println(<span class="string">&quot;Num:&quot;</span>, e.Num)</span><br><span class="line">fmt.Println(<span class="string">&quot;Err:&quot;</span>, e.Err)</span><br><span class="line">fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Constants</span></span><br><span class="line"><span class="comment">Variables</span></span><br><span class="line"><span class="comment">func Copy(dst Writer, src Reader) (written int64, err error)</span></span><br><span class="line"><span class="comment">func CopyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error)</span></span><br><span class="line"><span class="comment">func CopyN(dst Writer, src Reader, n int64) (written int64, err error)</span></span><br><span class="line"><span class="comment">func Pipe() (*PipeReader, *PipeWriter)</span></span><br><span class="line"><span class="comment">func ReadAll(r Reader) ([]byte, error)</span></span><br><span class="line"><span class="comment">func ReadAtLeast(r Reader, buf []byte, min int) (n int, err error)</span></span><br><span class="line"><span class="comment">func ReadFull(r Reader, buf []byte) (n int, err error)</span></span><br><span class="line"><span class="comment">func WriteString(w Writer, s string) (n int, err error)</span></span><br><span class="line"><span class="comment">type ByteReader</span></span><br><span class="line"><span class="comment">type ByteScanner</span></span><br><span class="line"><span class="comment">type ByteWriter</span></span><br><span class="line"><span class="comment">type Closer</span></span><br><span class="line"><span class="comment">type LimitedReader</span></span><br><span class="line"><span class="comment">func (l *LimitedReader) Read(p []byte) (n int, err error)</span></span><br><span class="line"><span class="comment">type PipeReader</span></span><br><span class="line"><span class="comment">func (r *PipeReader) Close() error</span></span><br><span class="line"><span class="comment">func (r *PipeReader) CloseWithError(err error) error</span></span><br><span class="line"><span class="comment">func (r *PipeReader) Read(data []byte) (n int, err error)</span></span><br><span class="line"><span class="comment">type PipeWriter</span></span><br><span class="line"><span class="comment">func (w *PipeWriter) Close() error</span></span><br><span class="line"><span class="comment">func (w *PipeWriter) CloseWithError(err error) error</span></span><br><span class="line"><span class="comment">func (w *PipeWriter) Write(data []byte) (n int, err error)</span></span><br><span class="line"><span class="comment">type ReadCloser</span></span><br><span class="line"><span class="comment">func NopCloser(r Reader) ReadCloser</span></span><br><span class="line"><span class="comment">type ReadSeekCloser</span></span><br><span class="line"><span class="comment">type ReadSeeker</span></span><br><span class="line"><span class="comment">type ReadWriteCloser</span></span><br><span class="line"><span class="comment">type ReadWriteSeeker</span></span><br><span class="line"><span class="comment">type ReadWriter</span></span><br><span class="line"><span class="comment">type Reader</span></span><br><span class="line"><span class="comment">func LimitReader(r Reader, n int64) Reader</span></span><br><span class="line"><span class="comment">func MultiReader(readers ...Reader) Reader</span></span><br><span class="line"><span class="comment">func TeeReader(r Reader, w Writer) Reader</span></span><br><span class="line"><span class="comment">type ReaderAt</span></span><br><span class="line"><span class="comment">type ReaderFrom</span></span><br><span class="line"><span class="comment">type RuneReader</span></span><br><span class="line"><span class="comment">type RuneScanner</span></span><br><span class="line"><span class="comment">type SectionReader</span></span><br><span class="line"><span class="comment">func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader</span></span><br><span class="line"><span class="comment">func (s *SectionReader) Read(p []byte) (n int, err error)</span></span><br><span class="line"><span class="comment">func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error)</span></span><br><span class="line"><span class="comment">func (s *SectionReader) Seek(offset int64, whence int) (int64, error)</span></span><br><span class="line"><span class="comment">func (s *SectionReader) Size() int64</span></span><br><span class="line"><span class="comment">type Seeker</span></span><br><span class="line"><span class="comment">type StringWriter</span></span><br><span class="line"><span class="comment">type WriteCloser</span></span><br><span class="line"><span class="comment">type WriteSeeker</span></span><br><span class="line"><span class="comment">type Writer</span></span><br><span class="line"><span class="comment">func MultiWriter(writers ...Writer) Writer</span></span><br><span class="line"><span class="comment">type WriterAt</span></span><br><span class="line"><span class="comment">type WriterTo</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *func Copy(dst Writer,src Reader) (written int64,err error)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    r := strings.NewReader(<span class="string">&quot;some io.Reader stream to be read&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> _, err := io.Copy(os.Stdout, r); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *func Pipe() (*PipeReader,*PipeWriter)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    r,w := io.Pipe()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Fprint(w,<span class="string">&quot;some io.Reader stream to be read\n&quot;</span>)</span><br><span class="line">        w.Close()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">if</span> _,err := io.Copy(os.Stdout,r); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="log（提供日志操作的函数和方法）"><a href="#log（提供日志操作的函数和方法）" class="headerlink" title="log（提供日志操作的函数和方法）"></a>log（提供日志操作的函数和方法）</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Constants</span></span><br><span class="line"><span class="comment">func Fatal(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func Fatalf(format string, v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func Fatalln(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func Flags() int</span></span><br><span class="line"><span class="comment">func Output(calldepth int, s string) error</span></span><br><span class="line"><span class="comment">func Panic(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func Panicf(format string, v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func Panicln(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func Prefix() string</span></span><br><span class="line"><span class="comment">func Print(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func Printf(format string, v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func Println(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func SetFlags(flag int)</span></span><br><span class="line"><span class="comment">func SetOutput(w io.Writer)</span></span><br><span class="line"><span class="comment">func SetPrefix(prefix string)</span></span><br><span class="line"><span class="comment">func Writer() io.Writer</span></span><br><span class="line"><span class="comment">type Logger</span></span><br><span class="line"><span class="comment">func Default() *Logger</span></span><br><span class="line"><span class="comment">func New(out io.Writer, prefix string, flag int) *Logger</span></span><br><span class="line"><span class="comment">func (l *Logger) Fatal(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func (l *Logger) Fatalf(format string, v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func (l *Logger) Fatalln(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func (l *Logger) Flags() int</span></span><br><span class="line"><span class="comment">func (l *Logger) Output(calldepth int, s string) error</span></span><br><span class="line"><span class="comment">func (l *Logger) Panic(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func (l *Logger) Panicf(format string, v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func (l *Logger) Panicln(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func (l *Logger) Prefix() string</span></span><br><span class="line"><span class="comment">func (l *Logger) Print(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func (l *Logger) Printf(format string, v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func (l *Logger) Println(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">func (l *Logger) SetFlags(flag int)</span></span><br><span class="line"><span class="comment">func (l *Logger) SetOutput(w io.Writer)</span></span><br><span class="line"><span class="comment">func (l *Logger) SetPrefix(prefix string)</span></span><br><span class="line"><span class="comment">func (l *Logger) Writer() io.Writer</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Print类：跟fmt差不多，只是前面加了格式</span></span><br><span class="line">    <span class="comment">// Fatal类：日志输出后，系统调用os.exit(1)，整个程序退出，若后面有defer，也不执行</span></span><br><span class="line">    <span class="comment">// Panic类：日志输出后，发生Panic</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Fatal等价于&#123;Print(v...);os.Exit(1)&#125;</span></span><br><span class="line"><span class="comment">    *func Fatal(v ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    log.Fatal(<span class="string">&quot;hello啊树先生，执行后终止&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;你执行了吗？&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    SetFlags设置标准logger的输出选项</span></span><br><span class="line"><span class="comment">    *func SetFlags(flag int)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    log.SetFlags(log.Ldate|log.Ltime|log.LUTC)</span><br><span class="line">    log.Println(<span class="string">&quot;sddfgfgh&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    SetOutput设置标准logger的输出目的地，默认是标准错误输出</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    file,_ := os.Create(<span class="string">&quot;sdk/testLog&quot;</span>)</span><br><span class="line">    log.SetOutput(file)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sort（按照一定规则对元素进行相关排序）"><a href="#sort（按照一定规则对元素进行相关排序）" class="headerlink" title="sort（按照一定规则对元素进行相关排序）"></a>sort（按照一定规则对元素进行相关排序）</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">func Float64s(x []float64)</span></span><br><span class="line"><span class="comment">func Float64sAreSorted(x []float64) bool</span></span><br><span class="line"><span class="comment">func Ints(x []int)</span></span><br><span class="line"><span class="comment">func IntsAreSorted(x []int) bool</span></span><br><span class="line"><span class="comment">func IsSorted(data Interface) bool</span></span><br><span class="line"><span class="comment">func Search(n int, f func(int) bool) int</span></span><br><span class="line"><span class="comment">func SearchFloat64s(a []float64, x float64) int</span></span><br><span class="line"><span class="comment">func SearchInts(a []int, x int) int</span></span><br><span class="line"><span class="comment">func SearchStrings(a []string, x string) int</span></span><br><span class="line"><span class="comment">func Slice(x interface&#123;&#125;, less func(i, j int) bool)</span></span><br><span class="line"><span class="comment">func SliceIsSorted(x interface&#123;&#125;, less func(i, j int) bool) bool</span></span><br><span class="line"><span class="comment">func SliceStable(x interface&#123;&#125;, less func(i, j int) bool)</span></span><br><span class="line"><span class="comment">func Sort(data Interface)</span></span><br><span class="line"><span class="comment">func Stable(data Interface)</span></span><br><span class="line"><span class="comment">func Strings(x []string)</span></span><br><span class="line"><span class="comment">func StringsAreSorted(x []string) bool</span></span><br><span class="line"><span class="comment">type Float64Slice</span></span><br><span class="line"><span class="comment">func (x Float64Slice) Len() int</span></span><br><span class="line"><span class="comment">func (x Float64Slice) Less(i, j int) bool</span></span><br><span class="line"><span class="comment">func (p Float64Slice) Search(x float64) int</span></span><br><span class="line"><span class="comment">func (x Float64Slice) Sort()</span></span><br><span class="line"><span class="comment">func (x Float64Slice) Swap(i, j int)</span></span><br><span class="line"><span class="comment">type IntSlice</span></span><br><span class="line"><span class="comment">func (x IntSlice) Len() int</span></span><br><span class="line"><span class="comment">func (x IntSlice) Less(i, j int) bool</span></span><br><span class="line"><span class="comment">func (p IntSlice) Search(x int) int</span></span><br><span class="line"><span class="comment">func (x IntSlice) Sort()</span></span><br><span class="line"><span class="comment">func (x IntSlice) Swap(i, j int)</span></span><br><span class="line"><span class="comment">type Interface</span></span><br><span class="line"><span class="comment">func Reverse(data Interface) Interface</span></span><br><span class="line"><span class="comment">type StringSlice</span></span><br><span class="line"><span class="comment">func (x StringSlice) Len() int</span></span><br><span class="line"><span class="comment">func (x StringSlice) Less(i, j int) bool</span></span><br><span class="line"><span class="comment">func (p StringSlice) Search(x string) int</span></span><br><span class="line"><span class="comment">func (x StringSlice) Sort()</span></span><br><span class="line"><span class="comment">func (x StringSlice) Swap(i, j int)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Float64s按递增顺序对float64s的一部分进行排序，Not-a-number(NaN)值先于其他值排序</span></span><br><span class="line"><span class="comment">    *func Float64s(x []float64)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    s := []<span class="type">float64</span>&#123;math.Inf(<span class="number">1</span>), math.NaN(), math.Inf(<span class="number">-1</span>), <span class="number">0.0</span>&#125;</span><br><span class="line">sort.Float64s(s)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">    <span class="comment">/*输出：[NaN -Inf 0 +Inf]*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Float64sAreSorted报告切片x是否以递增的顺序排序，其中not-a-number(NaN)值位于任何其他值之前</span></span><br><span class="line"><span class="comment">    *func Float64sAreSorted(x []float64) bool</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Search使用二分法进行查找</span></span><br><span class="line"><span class="comment">    *func Search(n int,f func(int) bool) int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">21</span>,<span class="number">28</span>,<span class="number">36</span>,<span class="number">45</span>,<span class="number">55</span>&#125;</span><br><span class="line">    x := <span class="number">6</span></span><br><span class="line">    </span><br><span class="line">    i := sort.Search(<span class="built_in">len</span>(a),<span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;<span class="keyword">return</span> a[i] &gt;= x&#125;)</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(a) &amp;&amp; a[i] == x &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;found %d at index %d in %v\n&quot;</span>, x, i, a)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d not found in %v\n&quot;</span>, x, a)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    返回x在a中应该存在的位置，无论a中是否存在a中在递增顺序的a中搜索x，返回x的索引。如果查找不到，返回值是x应该插入a的位置（以保证a的递增顺序），返回值可以是len(a)</span></span><br><span class="line"><span class="comment">    *func SearchInts(a []int,x int) int&#123;</span></span><br><span class="line"><span class="comment">    return Search(len(a),func(i int) bool &#123;return a[i]&gt;=x&#125;)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    s := []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>&#125;</span><br><span class="line">index := sort.SearchInts(s, <span class="number">5</span>)</span><br><span class="line">fmt.Println(index)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    字符串按升序对字符串的一部分进行排序</span></span><br><span class="line"><span class="comment">    *func Strings(x []string)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    s := []<span class="type">string</span>&#123;<span class="string">&quot;Go&quot;</span>, <span class="string">&quot;Bravo&quot;</span>, <span class="string">&quot;Gopher&quot;</span>, <span class="string">&quot;Alpha&quot;</span>, <span class="string">&quot;Grin&quot;</span>, <span class="string">&quot;Delta&quot;</span>&#125;</span><br><span class="line">sort.Strings(s)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    求FloatSlice的数据类型的长度</span></span><br><span class="line"><span class="comment">    *func (x Float64Slice) Len() int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> x sort.Float64Slice</span><br><span class="line">x = []<span class="type">float64</span>&#123;<span class="number">74.3</span>, <span class="number">59.0</span>, math.Inf(<span class="number">1</span>), <span class="number">238.2</span>, <span class="number">-784.0</span>, <span class="number">2.3</span>, math.NaN(), math.NaN(), </span><br><span class="line">        math.Inf(<span class="number">-1</span>), <span class="number">9845.768</span>, <span class="number">-959.7485</span>, <span class="number">905</span>, <span class="number">7.8</span>, <span class="number">7.8</span>&#125;</span><br><span class="line">fmt.Println(x.Len())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OS（底层相关的函数和方法）"><a href="#OS（底层相关的函数和方法）" class="headerlink" title="OS（底层相关的函数和方法）"></a>OS（底层相关的函数和方法）</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Constants</span></span><br><span class="line"><span class="comment">Variables</span></span><br><span class="line"><span class="comment">func Chdir(dir string) error</span></span><br><span class="line"><span class="comment">func Chmod(name string, mode FileMode) error</span></span><br><span class="line"><span class="comment">func Chown(name string, uid, gid int) error</span></span><br><span class="line"><span class="comment">func Chtimes(name string, atime time.Time, mtime time.Time) error</span></span><br><span class="line"><span class="comment">func Clearenv()</span></span><br><span class="line"><span class="comment">func DirFS(dir string) fs.FS</span></span><br><span class="line"><span class="comment">func Environ() []string</span></span><br><span class="line"><span class="comment">func Executable() (string, error)</span></span><br><span class="line"><span class="comment">func Exit(code int)</span></span><br><span class="line"><span class="comment">func Expand(s string, mapping func(string) string) string</span></span><br><span class="line"><span class="comment">func ExpandEnv(s string) string</span></span><br><span class="line"><span class="comment">func Getegid() int</span></span><br><span class="line"><span class="comment">func Getenv(key string) string</span></span><br><span class="line"><span class="comment">func Geteuid() int</span></span><br><span class="line"><span class="comment">func Getgid() int</span></span><br><span class="line"><span class="comment">func Getgroups() ([]int, error)</span></span><br><span class="line"><span class="comment">func Getpagesize() int</span></span><br><span class="line"><span class="comment">func Getpid() int</span></span><br><span class="line"><span class="comment">func Getppid() int</span></span><br><span class="line"><span class="comment">func Getuid() int</span></span><br><span class="line"><span class="comment">func Getwd() (dir string, err error)</span></span><br><span class="line"><span class="comment">func Hostname() (name string, err error)</span></span><br><span class="line"><span class="comment">func IsExist(err error) bool</span></span><br><span class="line"><span class="comment">func IsNotExist(err error) bool</span></span><br><span class="line"><span class="comment">func IsPathSeparator(c uint8) bool</span></span><br><span class="line"><span class="comment">func IsPermission(err error) bool</span></span><br><span class="line"><span class="comment">func IsTimeout(err error) bool</span></span><br><span class="line"><span class="comment">func Lchown(name string, uid, gid int) error</span></span><br><span class="line"><span class="comment">func Link(oldname, newname string) error</span></span><br><span class="line"><span class="comment">func LookupEnv(key string) (string, bool)</span></span><br><span class="line"><span class="comment">func Mkdir(name string, perm FileMode) error</span></span><br><span class="line"><span class="comment">func MkdirAll(path string, perm FileMode) error</span></span><br><span class="line"><span class="comment">func MkdirTemp(dir, pattern string) (string, error)</span></span><br><span class="line"><span class="comment">func NewSyscallError(syscall string, err error) error</span></span><br><span class="line"><span class="comment">func Pipe() (r *File, w *File, err error)</span></span><br><span class="line"><span class="comment">func ReadFile(name string) ([]byte, error)</span></span><br><span class="line"><span class="comment">func Readlink(name string) (string, error)</span></span><br><span class="line"><span class="comment">func Remove(name string) error</span></span><br><span class="line"><span class="comment">func RemoveAll(path string) error</span></span><br><span class="line"><span class="comment">func Rename(oldpath, newpath string) error</span></span><br><span class="line"><span class="comment">func SameFile(fi1, fi2 FileInfo) bool</span></span><br><span class="line"><span class="comment">func Setenv(key, value string) error</span></span><br><span class="line"><span class="comment">func Symlink(oldname, newname string) error</span></span><br><span class="line"><span class="comment">func TempDir() string</span></span><br><span class="line"><span class="comment">func Truncate(name string, size int64) error</span></span><br><span class="line"><span class="comment">func Unsetenv(key string) error</span></span><br><span class="line"><span class="comment">func UserCacheDir() (string, error)</span></span><br><span class="line"><span class="comment">func UserConfigDir() (string, error)</span></span><br><span class="line"><span class="comment">func UserHomeDir() (string, error)</span></span><br><span class="line"><span class="comment">func WriteFile(name string, data []byte, perm FileMode) error</span></span><br><span class="line"><span class="comment">type DirEntry</span></span><br><span class="line"><span class="comment">func ReadDir(name string) ([]DirEntry, error)</span></span><br><span class="line"><span class="comment">type File</span></span><br><span class="line"><span class="comment">func Create(name string) (*File, error)</span></span><br><span class="line"><span class="comment">func CreateTemp(dir, pattern string) (*File, error)</span></span><br><span class="line"><span class="comment">func NewFile(fd uintptr, name string) *File</span></span><br><span class="line"><span class="comment">func Open(name string) (*File, error)</span></span><br><span class="line"><span class="comment">func OpenFile(name string, flag int, perm FileMode) (*File, error)</span></span><br><span class="line"><span class="comment">func (f *File) Chdir() error</span></span><br><span class="line"><span class="comment">func (f *File) Chmod(mode FileMode) error</span></span><br><span class="line"><span class="comment">func (f *File) Chown(uid, gid int) error</span></span><br><span class="line"><span class="comment">func (f *File) Close() error</span></span><br><span class="line"><span class="comment">func (f *File) Fd() uintptr</span></span><br><span class="line"><span class="comment">func (f *File) Name() string</span></span><br><span class="line"><span class="comment">func (f *File) Read(b []byte) (n int, err error)</span></span><br><span class="line"><span class="comment">func (f *File) ReadAt(b []byte, off int64) (n int, err error)</span></span><br><span class="line"><span class="comment">func (f *File) ReadDir(n int) ([]DirEntry, error)</span></span><br><span class="line"><span class="comment">func (f *File) ReadFrom(r io.Reader) (n int64, err error)</span></span><br><span class="line"><span class="comment">func (f *File) Readdir(n int) ([]FileInfo, error)</span></span><br><span class="line"><span class="comment">func (f *File) Readdirnames(n int) (names []string, err error)</span></span><br><span class="line"><span class="comment">func (f *File) Seek(offset int64, whence int) (ret int64, err error)</span></span><br><span class="line"><span class="comment">func (f *File) SetDeadline(t time.Time) error</span></span><br><span class="line"><span class="comment">func (f *File) SetReadDeadline(t time.Time) error</span></span><br><span class="line"><span class="comment">func (f *File) SetWriteDeadline(t time.Time) error</span></span><br><span class="line"><span class="comment">func (f *File) Stat() (FileInfo, error)</span></span><br><span class="line"><span class="comment">func (f *File) Sync() error</span></span><br><span class="line"><span class="comment">func (f *File) SyscallConn() (syscall.RawConn, error)</span></span><br><span class="line"><span class="comment">func (f *File) Truncate(size int64) error</span></span><br><span class="line"><span class="comment">func (f *File) Write(b []byte) (n int, err error)</span></span><br><span class="line"><span class="comment">func (f *File) WriteAt(b []byte, off int64) (n int, err error)</span></span><br><span class="line"><span class="comment">func (f *File) WriteString(s string) (n int, err error)</span></span><br><span class="line"><span class="comment">type FileInfo</span></span><br><span class="line"><span class="comment">func Lstat(name string) (FileInfo, error)</span></span><br><span class="line"><span class="comment">func Stat(name string) (FileInfo, error)</span></span><br><span class="line"><span class="comment">type FileMode</span></span><br><span class="line"><span class="comment">type LinkError</span></span><br><span class="line"><span class="comment">func (e *LinkError) Error() string</span></span><br><span class="line"><span class="comment">func (e *LinkError) Unwrap() error</span></span><br><span class="line"><span class="comment">type PathError</span></span><br><span class="line"><span class="comment">type ProcAttr</span></span><br><span class="line"><span class="comment">type Process</span></span><br><span class="line"><span class="comment">func FindProcess(pid int) (*Process, error)</span></span><br><span class="line"><span class="comment">func StartProcess(name string, argv []string, attr *ProcAttr) (*Process, error)</span></span><br><span class="line"><span class="comment">func (p *Process) Kill() error</span></span><br><span class="line"><span class="comment">func (p *Process) Release() error</span></span><br><span class="line"><span class="comment">func (p *Process) Signal(sig Signal) error</span></span><br><span class="line"><span class="comment">func (p *Process) Wait() (*ProcessState, error)</span></span><br><span class="line"><span class="comment">type ProcessState</span></span><br><span class="line"><span class="comment">func (p *ProcessState) ExitCode() int</span></span><br><span class="line"><span class="comment">func (p *ProcessState) Exited() bool</span></span><br><span class="line"><span class="comment">func (p *ProcessState) Pid() int</span></span><br><span class="line"><span class="comment">func (p *ProcessState) String() string</span></span><br><span class="line"><span class="comment">func (p *ProcessState) Success() bool</span></span><br><span class="line"><span class="comment">func (p *ProcessState) Sys() interface&#123;&#125;</span></span><br><span class="line"><span class="comment">func (p *ProcessState) SysUsage() interface&#123;&#125;</span></span><br><span class="line"><span class="comment">func (p *ProcessState) SystemTime() time.Duration</span></span><br><span class="line"><span class="comment">func (p *ProcessState) UserTime() time.Duration</span></span><br><span class="line"><span class="comment">type Signal</span></span><br><span class="line"><span class="comment">type SyscallError</span></span><br><span class="line"><span class="comment">func (e *SyscallError) Error() string</span></span><br><span class="line"><span class="comment">func (e *SyscallError) Timeout() bool</span></span><br><span class="line"><span class="comment">func (e *SyscallError) Unwrap() error</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Chdir将当前工作目录更改为指定的目录，若有错，将是*PathError类型</span></span><br><span class="line"><span class="comment">    *func Chdir(dir string) error</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    beforeDir,_ := os.Getwd()</span><br><span class="line">    fmt.Println(beforeDir)</span><br><span class="line">    err := os.Chdir(<span class="string">&quot;sdk/test&quot;</span>)</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    latestDir,_ := os.Getwd()</span><br><span class="line">    fmt.Println(latestDir)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Chmod更改文件模式，若文件是符号链接将更改链接目标的模式</span></span><br><span class="line"><span class="comment">    *func Chmod(name string,mode FileMode) error</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> err := os.Chmod(<span class="string">&quot;sdk/test.txt&quot;</span>,<span class="number">0644</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Chown 更改文件的uid（用户唯一标识符）和gid（用户组唯一标识符），若文件是符号链接则会更改链接目标</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> err := os.Lchown(FilePath, <span class="number">501</span>, <span class="number">20</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Chtimes 更改指定文件的访问和修改时间，类似于Unix utime()或utimes()函数</span></span><br><span class="line"><span class="comment">    *func Chtimes(name string, atime time.Time, mtime time.Time) error</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    mtime := time.Date(<span class="number">2006</span>,time.February,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>,time.UTC)</span><br><span class="line">    atime := time.Date(<span class="number">2007</span>,time.March,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,time.UTC)</span><br><span class="line">    <span class="keyword">if</span> err := os.Chtimes(<span class="string">&quot;some-filename&quot;</span>, atime, mtime); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Clearenv 删除所有环境变量</span></span><br><span class="line"><span class="comment">    *func Clearenv()</span></span><br><span class="line"><span class="comment">        DirFS返回文件系统操作对象</span></span><br><span class="line"><span class="comment">    *func DirFS(dir string) fs.FS</span></span><br><span class="line"><span class="comment">    Executable可执行文件返回启动当前进程的可执行文件的路径名称</span></span><br><span class="line"><span class="comment">    *func Executable() (string,error)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">*Expand根据映射函数替换字符串中的$&#123;var&#125;或$var。例如，os.ExpandEnv(s)</span></span><br><span class="line"><span class="comment">*等效于os.Expand(s，os.Getenv)。</span></span><br><span class="line"><span class="comment">*func Expand(s string, mapping func(string) string) string</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">mapper := <span class="function"><span class="keyword">func</span><span class="params">(placeholderName <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> placeholderName &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;DAY_PART&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;morning&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;NAME&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Gopher&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(os.Expand(<span class="string">&quot;Good $&#123;DAY_PART&#125;, $NAME!&quot;</span>, mapper))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ExpandEnv根据当前环境变量的值替换字符串中的$&#123;var&#125;或$var，未定义变量的引用将替换为空字符串</span></span><br><span class="line"><span class="comment">    *func ExpandEnv(s string) string</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    os.Setenv(<span class="string">&quot;NAME&quot;</span>, <span class="string">&quot;gopher&quot;</span>)</span><br><span class="line">os.Setenv(<span class="string">&quot;BURROW&quot;</span>, <span class="string">&quot;/usr/gopher&quot;</span>)</span><br><span class="line">fmt.Println(os.ExpandEnv(<span class="string">&quot;$NAME lives in $&#123;BURROW&#125;.&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Getegid 返回调用者的数字有效组ID</span></span><br><span class="line"><span class="comment">    *func Getegid() int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Hostname返回内核提供的主机名</span></span><br><span class="line"><span class="comment">    func Hostname() (name string,err error)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Constants</span></span><br><span class="line"><span class="comment">func After(d Duration) &lt;-chan Time</span></span><br><span class="line"><span class="comment">func Sleep(d Duration)</span></span><br><span class="line"><span class="comment">func Tick(d Duration) &lt;-chan Time</span></span><br><span class="line"><span class="comment">type Duration</span></span><br><span class="line"><span class="comment">func ParseDuration(s string) (Duration, error)</span></span><br><span class="line"><span class="comment">func Since(t Time) Duration</span></span><br><span class="line"><span class="comment">func Until(t Time) Duration</span></span><br><span class="line"><span class="comment">func (d Duration) Hours() float64</span></span><br><span class="line"><span class="comment">func (d Duration) Microseconds() int64</span></span><br><span class="line"><span class="comment">func (d Duration) Milliseconds() int64</span></span><br><span class="line"><span class="comment">func (d Duration) Minutes() float64</span></span><br><span class="line"><span class="comment">func (d Duration) Nanoseconds() int64</span></span><br><span class="line"><span class="comment">func (d Duration) Round(m Duration) Duration</span></span><br><span class="line"><span class="comment">func (d Duration) Seconds() float64</span></span><br><span class="line"><span class="comment">func (d Duration) String() string</span></span><br><span class="line"><span class="comment">func (d Duration) Truncate(m Duration) Duration</span></span><br><span class="line"><span class="comment">type Location</span></span><br><span class="line"><span class="comment">func FixedZone(name string, offset int) *Location</span></span><br><span class="line"><span class="comment">func LoadLocation(name string) (*Location, error)</span></span><br><span class="line"><span class="comment">func LoadLocationFromTZData(name string, data []byte) (*Location, error)</span></span><br><span class="line"><span class="comment">func (l *Location) String() string</span></span><br><span class="line"><span class="comment">type Month</span></span><br><span class="line"><span class="comment">func (m Month) String() string</span></span><br><span class="line"><span class="comment">type ParseError</span></span><br><span class="line"><span class="comment">func (e *ParseError) Error() string</span></span><br><span class="line"><span class="comment">type Ticker</span></span><br><span class="line"><span class="comment">func NewTicker(d Duration) *Ticker</span></span><br><span class="line"><span class="comment">func (t *Ticker) Reset(d Duration)</span></span><br><span class="line"><span class="comment">func (t *Ticker) Stop()</span></span><br><span class="line"><span class="comment">type Time</span></span><br><span class="line"><span class="comment">func Date(year int, month Month, day, hour, min, sec, nsec int, loc *Location) Time</span></span><br><span class="line"><span class="comment">func Now() Time</span></span><br><span class="line"><span class="comment">func Parse(layout, value string) (Time, error)</span></span><br><span class="line"><span class="comment">func ParseInLocation(layout, value string, loc *Location) (Time, error)</span></span><br><span class="line"><span class="comment">func Unix(sec int64, nsec int64) Time</span></span><br><span class="line"><span class="comment">func (t Time) Add(d Duration) Time</span></span><br><span class="line"><span class="comment">func (t Time) AddDate(years int, months int, days int) Time</span></span><br><span class="line"><span class="comment">func (t Time) After(u Time) bool</span></span><br><span class="line"><span class="comment">func (t Time) AppendFormat(b []byte, layout string) []byte</span></span><br><span class="line"><span class="comment">func (t Time) Before(u Time) bool</span></span><br><span class="line"><span class="comment">func (t Time) Clock() (hour, min, sec int)</span></span><br><span class="line"><span class="comment">func (t Time) Date() (year int, month Month, day int)</span></span><br><span class="line"><span class="comment">func (t Time) Day() int</span></span><br><span class="line"><span class="comment">func (t Time) Equal(u Time) bool</span></span><br><span class="line"><span class="comment">func (t Time) Format(layout string) string</span></span><br><span class="line"><span class="comment">func (t *Time) GobDecode(data []byte) error</span></span><br><span class="line"><span class="comment">func (t Time) GobEncode() ([]byte, error)</span></span><br><span class="line"><span class="comment">func (t Time) Hour() int</span></span><br><span class="line"><span class="comment">func (t Time) ISOWeek() (year, week int)</span></span><br><span class="line"><span class="comment">func (t Time) In(loc *Location) Time</span></span><br><span class="line"><span class="comment">func (t Time) IsZero() bool</span></span><br><span class="line"><span class="comment">func (t Time) Local() Time</span></span><br><span class="line"><span class="comment">func (t Time) Location() *Location</span></span><br><span class="line"><span class="comment">func (t Time) MarshalBinary() ([]byte, error)</span></span><br><span class="line"><span class="comment">func (t Time) MarshalJSON() ([]byte, error)</span></span><br><span class="line"><span class="comment">func (t Time) MarshalText() ([]byte, error)</span></span><br><span class="line"><span class="comment">func (t Time) Minute() int</span></span><br><span class="line"><span class="comment">func (t Time) Month() Month</span></span><br><span class="line"><span class="comment">func (t Time) Nanosecond() int</span></span><br><span class="line"><span class="comment">func (t Time) Round(d Duration) Time</span></span><br><span class="line"><span class="comment">func (t Time) Second() int</span></span><br><span class="line"><span class="comment">func (t Time) String() string</span></span><br><span class="line"><span class="comment">func (t Time) Sub(u Time) Duration</span></span><br><span class="line"><span class="comment">func (t Time) Truncate(d Duration) Time</span></span><br><span class="line"><span class="comment">func (t Time) UTC() Time</span></span><br><span class="line"><span class="comment">func (t Time) Unix() int64</span></span><br><span class="line"><span class="comment">func (t Time) UnixNano() int64</span></span><br><span class="line"><span class="comment">func (t *Time) UnmarshalBinary(data []byte) error</span></span><br><span class="line"><span class="comment">func (t *Time) UnmarshalJSON(data []byte) error</span></span><br><span class="line"><span class="comment">func (t *Time) UnmarshalText(data []byte) error</span></span><br><span class="line"><span class="comment">func (t Time) Weekday() Weekday</span></span><br><span class="line"><span class="comment">func (t Time) Year() int</span></span><br><span class="line"><span class="comment">func (t Time) YearDay() int</span></span><br><span class="line"><span class="comment">func (t Time) Zone() (name string, offset int)</span></span><br><span class="line"><span class="comment">type Timer</span></span><br><span class="line"><span class="comment">func AfterFunc(d Duration, f func()) *Timer</span></span><br><span class="line"><span class="comment">func NewTimer(d Duration) *Timer</span></span><br><span class="line"><span class="comment">func (t *Timer) Reset(d Duration) bool</span></span><br><span class="line"><span class="comment">func (t *Timer) Stop() bool</span></span><br><span class="line"><span class="comment">type Weekday</span></span><br><span class="line"><span class="comment">func (d Weekday) String() string</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Since返回从t到现在经过的时间，等价于time.Now().Sub(t)</span></span><br><span class="line"><span class="comment">    *func Since(t Time) Duration</span></span><br><span class="line"><span class="comment">        Weekday返回由t指定的星期几</span></span><br><span class="line"><span class="comment">    *func (t Time) Weekday() Weekday</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="exec（实现终端命令、脚本调用功能）"><a href="#exec（实现终端命令、脚本调用功能）" class="headerlink" title="exec（实现终端命令、脚本调用功能）"></a>exec（实现终端命令、脚本调用功能）</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Variables</span></span><br><span class="line"><span class="comment">func LookPath(file string) (string, error)</span></span><br><span class="line"><span class="comment">type Cmd</span></span><br><span class="line"><span class="comment">func Command(name string, arg ...string) *Cmd</span></span><br><span class="line"><span class="comment">func CommandContext(ctx context.Context, name string, arg ...string) *Cmd</span></span><br><span class="line"><span class="comment">func (c *Cmd) CombinedOutput() ([]byte, error)</span></span><br><span class="line"><span class="comment">func (c *Cmd) Output() ([]byte, error)</span></span><br><span class="line"><span class="comment">func (c *Cmd) Run() error</span></span><br><span class="line"><span class="comment">func (c *Cmd) Start() error</span></span><br><span class="line"><span class="comment">func (c *Cmd) StderrPipe() (io.ReadCloser, error)</span></span><br><span class="line"><span class="comment">func (c *Cmd) StdinPipe() (io.WriteCloser, error)</span></span><br><span class="line"><span class="comment">func (c *Cmd) StdoutPipe() (io.ReadCloser, error)</span></span><br><span class="line"><span class="comment">func (c *Cmd) String() string</span></span><br><span class="line"><span class="comment">func (c *Cmd) Wait() error</span></span><br><span class="line"><span class="comment">type Error</span></span><br><span class="line"><span class="comment">func (e *Error) Error() string</span></span><br><span class="line"><span class="comment">func (e *Error) Unwrap() error</span></span><br><span class="line"><span class="comment">type ExitError</span></span><br><span class="line"><span class="comment">func (e *ExitError) Error() string</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Command返回Cmd结构以执行具有给定参数的命名程序</span></span><br><span class="line"><span class="comment">    *func Command(name string,arg ...string) *cmd</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    CommandContext类似于Command，但包含上下文，若上下文在命令本身完成之前完成，则提供的上下文用于终止进程（通过调用os.Process.Kill）</span></span><br><span class="line"><span class="comment">    *func CommandContext(ctx context.Context,name string,arg ...string) *Cmd</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), <span class="number">100</span>*time.Millisecond)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := exec.CommandContext(ctx, <span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;5&quot;</span>).Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// This will fail after 100 milliseconds. The 5 second sleep</span></span><br><span class="line"><span class="comment">// will be interrupted.</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    CombinedOutput运行命令并返回其组合的标准输出和标准错误</span></span><br><span class="line"><span class="comment">    *func (c *Cmd) CombineOutput() ([]byte,error)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thinkphp笔记</title>
      <link href="/2023/02/03/thinkphp%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/03/thinkphp%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><h4 id="URL设计"><a href="#URL设计" class="headerlink" title="URL设计"></a>URL设计</h4><p>ThinkPHP<code>5.0</code>在没有启用路由的情况下典型的URL访问规则是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://serverName/index.php（或者其它应用入口文件）/模块/控制器/操作/[参数名/参数值...]</span><br></pre></td></tr></table></figure><p>命令行模式下面的访问规则是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php.exe index.php(或者其它应用入口文件） 模块/控制器/操作/[参数名/参数值...]</span><br></pre></td></tr></table></figure><p>注意：<code>5.0</code>取消了URL模式的概念，并且<strong>普通模式的URL访问不再支持</strong>，但参数可以支持普通方式传值，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php.exe index.php(或者其它应用入口文件） 模块/控制器/操作?参数名=参数值&amp;...</span><br></pre></td></tr></table></figure><p>如果不支持PATHINFO的服务器可以使用兼容模式访问如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://serverName/index.php（或者其它应用入口文件）?s=/模块/控制器/操作/[参数名/参数值...]</span><br></pre></td></tr></table></figure><p><strong>默认情况下，<code>URL</code>不区分大小写</strong></p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>标准应用和模块目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─application           应用目录（可设置）</span><br><span class="line">│  ├─common             公共模块目录（可选）</span><br><span class="line">│  ├─common.php         公共函数文件</span><br><span class="line">│  ├─route.php          路由配置文件</span><br><span class="line">│  ├─database.php       数据库配置文件</span><br><span class="line">│  ├─config.php         应用配置文件</span><br><span class="line">│  ├─module1            模块1目录</span><br><span class="line">│  │  ├─config.php      模块配置文件</span><br><span class="line">│  │  ├─common.php      模块函数文件</span><br><span class="line">│  │  ├─controller      控制器目录</span><br><span class="line">│  │  ├─model           模型目录（可选）</span><br><span class="line">│  │  ├─view            视图目录（可选）</span><br><span class="line">│  │  └─ ...            更多类库目录</span><br><span class="line">│  │ </span><br><span class="line">│  ├─module2            模块2目录</span><br><span class="line">│  │  ├─config.php      模块配置文件</span><br><span class="line">│  │  ├─common.php      模块函数文件</span><br><span class="line">│  │  ├─controller      控制器目录</span><br><span class="line">│  │  ├─model           模型目录（可选）</span><br><span class="line">│  │  ├─view            视图目录（可选）</span><br><span class="line">│  │  └─ ...            更多类库目录</span><br></pre></td></tr></table></figure><p><code>common</code>模块是一个特殊的模块，默认是禁止直接访问的，一般用于放置一些公共的类库用于其他模块的继承。</p><h4 id="模块类库"><a href="#模块类库" class="headerlink" title="模块类库"></a>模块类库</h4><p>一个模块下面的类库文件的命名空间统一以<code>app\模块名</code>开头，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// index模块的Index控制器类</span><br><span class="line">app\index\controller\Index</span><br><span class="line">// index模块的User模型类</span><br><span class="line">app\index\model\User</span><br></pre></td></tr></table></figure><p>其中<code>app</code>可以通过定义的方式更改，例如我们在应用配置文件中修改：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;app_namespace&#x27;</span> =&gt; <span class="string">&#x27;application&#x27;</span>,</span><br></pre></td></tr></table></figure><p>那么，index模块的类库命名空间则变成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// index模块的Index控制器类</span><br><span class="line">application\index\controller\Index</span><br><span class="line">// index模块的User模型类</span><br><span class="line">application\index\model\User</span><br></pre></td></tr></table></figure><h4 id="模块和控制器隐藏"><a href="#模块和控制器隐藏" class="headerlink" title="模块和控制器隐藏"></a>模块和控制器隐藏</h4><p>默认采用多模块的支持，多个模块的情况下必须在URL地址中标识当前模块，如果只有一个模块的话，可以进行模块绑定，在应用的入口文件中添加如下代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定当前访问到index模块</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;BIND_MODULE&#x27;</span>,<span class="string">&#x27;index&#x27;</span>);</span><br></pre></td></tr></table></figure><p>绑定后，我们的URL访问地址则变成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://serverName/index.php/控制器/操作/[参数名/参数值...]</span><br></pre></td></tr></table></figure><p>若模块和控制器都只有一个，则可以在应用公共文件中绑定模块和控制器：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定当前访问到index模块的index控制器</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;BIND_MODULE&#x27;</span>,<span class="string">&#x27;index/index&#x27;</span>);</span><br></pre></td></tr></table></figure><p>设置后，我们的URL访问地址则变成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://serverName/index.php/操作/[参数名/参数值...]</span><br></pre></td></tr></table></figure><p>访问的模块是<code>index</code>模块，控制器是<code>Index</code>控制器。</p><p>若应用只有单一模块，则先在应用配置文件中定义：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关闭多模块设计</span></span><br><span class="line"><span class="string">&#x27;app_multi_module&#x27;</span>  =&gt;  <span class="literal">false</span>,</span><br></pre></td></tr></table></figure><p>然后，调整应用目录的结构为如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─application        应用目录（可设置）</span><br><span class="line">│  ├─controller      控制器目录</span><br><span class="line">│  ├─model           模型目录</span><br><span class="line">│  ├─view            视图目录</span><br><span class="line">│  ├─ ...            更多类库目录</span><br><span class="line">│  ├─common.php      函数文件</span><br><span class="line">│  ├─route.php       路由配置文件</span><br><span class="line">│  ├─database.php    数据库配置文件</span><br><span class="line">│  └─config.php      配置文件</span><br></pre></td></tr></table></figure><p>同时，单一模块设计下的应用类库的命名空间也有所调整:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app\index\controller\Index==&gt;app\controller\Index</span><br><span class="line">app\index\model\User==&gt;app\model\User</span><br></pre></td></tr></table></figure><h4 id="根命名空间（类库包）"><a href="#根命名空间（类库包）" class="headerlink" title="根命名空间（类库包）"></a>根命名空间（类库包）</h4><p>以<code>\think\cache\driver\File</code>类为例，<code>think</code>即根命名空间，对应初始命名空间目thinkphp/library/think`，可以理解为一个根命名空间对应了一个类库包。系统内置的几个根命名空间（类库包）如下：</p><table><thead><tr><th align="left">名称</th><th align="left">描述</th><th align="left">类库目录</th></tr></thead><tbody><tr><td align="left">think</td><td align="left">系统核心类库</td><td align="left">thinkphp/library/think</td></tr><tr><td align="left">traits</td><td align="left">系统Trait类库</td><td align="left">thinkphp/library/traits</td></tr><tr><td align="left">app</td><td align="left">应用类库</td><td align="left">application</td></tr></tbody></table><h4 id="数据输出"><a href="#数据输出" class="headerlink" title="数据输出"></a>数据输出</h4><p>输出采用<code>Response</code>类统一处理，而不是直接在控制器中进行输出，通过设置<code>default_return_type</code>或者动态设置不同类型的<code>Response</code>输出就可以自动进行数据转换处理：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;default_return_type&#x27;</span> =&gt; <span class="string">&#x27;json&#x27;</span></span><br></pre></td></tr></table></figure><p>还可以在控制器中明确指定输出类型的方式：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;thinkphp&#x27;</span>,<span class="string">&#x27;url&#x27;</span>=&gt;<span class="string">&#x27;thinkphp.cn&#x27;</span>];</span><br><span class="line">        <span class="comment">// 指定json数据输出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&#x27;data&#x27;</span>=&gt;<span class="variable">$data</span>,<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">1</span>,<span class="string">&#x27;message&#x27;</span>=&gt;<span class="string">&#x27;操作完成&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心支持的数据类型包括<code>view</code>、<code>xml</code>、<code>json</code>和<code>jsonp</code>，其他类型需要扩展。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h4><p>系统默认的配置文件目录就是应用目录，也就是默认的<code>application</code>下面，并分为应用配置（整个应用有效）和模块配置（仅针对该模块有效）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─application         应用目录</span><br><span class="line">│  ├─config.php       应用配置文件</span><br><span class="line">│  ├─database.php     数据库配置文件</span><br><span class="line">│  ├─route.php        路由配置文件</span><br><span class="line">│  ├─index            index模块配置文件目录</span><br><span class="line">│  │  ├─config.php    index模块配置文件</span><br><span class="line">│  │  └─database.php  index模块数据库配置文件</span><br></pre></td></tr></table></figure><p>若不希望配置文件放到应用目录下面，可以在入口文件中定义独立的配置目录，添加<code>CONF_PATH</code>常量定义即可：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义配置文件目录和应用目录同级</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;CONF_PATH&#x27;</span>, <span class="keyword">__DIR__</span>.<span class="string">&#x27;/../config/&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─application         应用目录</span><br><span class="line">├─config              配置目录</span><br><span class="line">│  ├─config.php       应用配置文件</span><br><span class="line">│  ├─database.php     数据库配置文件</span><br><span class="line">│  ├─route.php        路由配置文件</span><br><span class="line">│  ├─index            index模块配置文件目录</span><br><span class="line">│  │  ├─config.php    index模块配置文件</span><br><span class="line">│  │  └─database.php  index模块数据库配置文件</span><br></pre></td></tr></table></figure><h4 id="配置格式"><a href="#配置格式" class="headerlink" title="配置格式"></a>配置格式</h4><p>默认方式为php数组方式定义配置文件，可以在入口文件定义<code>CONF_EXT</code>常量更改为其它的配置类型：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更改配置格式为ini格式</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;CONF_EXT&#x27;</span>, <span class="string">&#x27;.ini&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="配置加载"><a href="#配置加载" class="headerlink" title="配置加载"></a>配置加载</h4><p>在thinkphp中应用配置文件的加载顺序为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">惯例配置-&gt;应用配置-&gt;扩展配置-&gt;场景配置-&gt;模块配置-&gt;动态配置</span><br></pre></td></tr></table></figure><p>因后面的配置会覆盖之前的同名配置（在没有生效的前提下），故配置的优先顺序为从右到左</p><h5 id="惯例配置"><a href="#惯例配置" class="headerlink" title="惯例配置"></a>惯例配置</h5><p>框架内置一个惯例配置文件（<code>thinkphp/convention.php</code>）</p><h5 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h5><p>应用初始化时首先加载的公共配置文件，默认在<code>application/config.php</code></p><h5 id="扩展配置"><a href="#扩展配置" class="headerlink" title="扩展配置"></a>扩展配置</h5><p>扩展配置文件由<code>extra_config_list</code>配置参数定义的额外的配置文件，默认加载<code>database</code>和<code>validate</code>两个扩展配置文件</p><p><font color=red><code>V5.0.1</code>开始，取消了该配置参数，扩展配置文件直接放入<code>application/extra</code>目录会自动加载。</font></p><h5 id="场景配置"><a href="#场景配置" class="headerlink" title="场景配置"></a>场景配置</h5><p>举个例子，在公司和家里分别设置不同的数据库测试环境。那么可以这样处理，在公司环境中，在应用配置文件中配置：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;app_status&#x27;</span>=&gt;<span class="string">&#x27;office&#x27;</span></span><br></pre></td></tr></table></figure><p>则自动加载该状态对应的配置文件（默认位于<code>application/office.php</code>）</p><p><font color=red>场景配置文件和应用配置文件<code>config.php</code>是一样的定义</font></p><p>当回家后修改定义为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;app_status&#x27;</span>=&gt;<span class="string">&#x27;home&#x27;</span></span><br></pre></td></tr></table></figure><p>则自动加载该状态对应的配置文件（位于<code>application/home.php</code>）</p><h5 id="模块配置"><a href="#模块配置" class="headerlink" title="模块配置"></a>模块配置</h5><p>每个模块会自动加载自己的配置文件（位于<code>application/当前模块名/config.php</code>）</p><p>模块还可以支持独立的状态配置文件，命名规范为：<code>application/当前模块名/应用状态.php</code></p><p>如果应用配置文件比较大，想分成几个单独的配置文件或需要加载额外的配置文件的话，可以考虑采用扩展配置或动态配置</p><p><font size=5>加载配置文件</font></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Config</span>::<span class="title function_ invoke__">load</span>(<span class="string">&#x27;配置文件名&#x27;</span>);</span><br></pre></td></tr></table></figure><p>配置文件一般位于<code>APP_PATH</code>目录下面，若需要加载其它位置的配置文件，需要使用完整路径，例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Config</span>::<span class="title function_ invoke__">load</span>(APP_PATH.<span class="string">&#x27;config/config.php&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>parse</code>方法除了支持读取配置文件外，也支持直接传入配置内容，如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$config</span> = <span class="string">&#x27;var1=val</span></span><br><span class="line"><span class="string">var2=val&#x27;</span>;</span><br><span class="line"><span class="title class_">Config</span>::<span class="title function_ invoke__">parse</span>(<span class="variable">$config</span>,<span class="string">&#x27;ini&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="读取配置参数"><a href="#读取配置参数" class="headerlink" title="读取配置参数"></a>读取配置参数</h4><p>设置完配置参数后就可以使用get方法或助手函数<code>config</code>读取配置：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title class_">Config</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;配置参数&#x27;</span>);或<span class="keyword">echo</span> <span class="title function_ invoke__">config</span>(<span class="string">&#x27;配置参数&#x27;</span>);</span><br></pre></td></tr></table></figure><p>读取所有配置参数：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">dump</span>(<span class="title class_">Config</span>::<span class="title function_ invoke__">get</span>());或<span class="title function_ invoke__">dump</span>(<span class="title function_ invoke__">config</span>());</span><br></pre></td></tr></table></figure><p>判断是否存在某个设置参数：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Config</span>::<span class="title function_ invoke__">has</span>(<span class="string">&#x27;配置参数&#x27;</span>);或<span class="title function_ invoke__">config</span>(<span class="string">&#x27;?配置参数&#x27;</span>);</span><br></pre></td></tr></table></figure><p>读取二级配置：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title class_">Config</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;配置参数.二级参数&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">config</span>(<span class="string">&#x27;配置参数.二级参数&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="动态配置参数"><a href="#动态配置参数" class="headerlink" title="动态配置参数"></a>动态配置参数</h4><p>使用<code>set</code>方法动态设置参数，如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Config</span>::<span class="title function_ invoke__">set</span>(<span class="string">&#x27;配置参数&#x27;</span>,<span class="string">&#x27;配置值&#x27;</span>); 或<span class="title function_ invoke__">config</span>(<span class="string">&#x27;配置参数&#x27;</span>,<span class="string">&#x27;配置值&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Config</span>::<span class="title function_ invoke__">set</span>([</span><br><span class="line">    <span class="string">&#x27;配置参数1&#x27;</span>=&gt;<span class="string">&#x27;配置值&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;配置参数2&#x27;</span>=&gt;<span class="string">&#x27;配置值&#x27;</span></span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 或者使用助手函数</span></span><br><span class="line"><span class="title function_ invoke__">config</span>([</span><br><span class="line">    <span class="string">&#x27;配置参数1&#x27;</span>=&gt;<span class="string">&#x27;配置值&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;配置参数2&#x27;</span>=&gt;<span class="string">&#x27;配置值&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h4 id="独立配置文件"><a href="#独立配置文件" class="headerlink" title="独立配置文件"></a>独立配置文件</h4><p>将扩展配置文件放入<code>application/extra</code>目录，即可自动读取扩展配置文件</p><p><font color=#5bc0de>自动读取的配置文件都是二级配置参数，一级配置名称就是扩展配置的文件名</font></p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="路由定义"><a href="#路由定义" class="headerlink" title="路由定义"></a>路由定义</h4><h5 id="注册路由规则"><a href="#注册路由规则" class="headerlink" title="注册路由规则"></a>注册路由规则</h5><p>路由定义采用<code>\think\Route</code>类的<code>rule</code>方法注册，通常在应用的路由配置文件<code>application/route.php</code>进行注册，格式是：<font color=#5bc0de>Router::rule(‘路由表达式’,’路由地址’,’请求类型’,’路由参数(数组)’,’变量规则(数组)’);</font></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Router</span>;</span><br><span class="line"><span class="comment">//注册路由到index模块的News控制器的read操作</span></span><br><span class="line"><span class="title class_">Router</span>::<span class="title function_ invoke__">rule</span>(<span class="string">&#x27;new/:id&#x27;</span>,<span class="string">&#x27;index/News/read&#x27;</span>);<span class="comment">//可以在第三个参数指定请求类型</span></span><br></pre></td></tr></table></figure><p>当我们访问：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://serverName/new/5</span><br></pre></td></tr></table></figure><p>会自动路由到：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://serverName/index/news/read/id/5</span><br></pre></td></tr></table></figure><p>系统提供了为不同的请求类型定义路由规则的简化方法，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Route::get(&#x27;new/:id&#x27;,&#x27;News/read&#x27;); // 定义GET请求路由规则</span><br><span class="line">Route::post(&#x27;new/:id&#x27;,&#x27;News/update&#x27;); // 定义POST请求路由规则</span><br><span class="line">Route::put(&#x27;new/:id&#x27;,&#x27;News/update&#x27;); // 定义PUT请求路由规则</span><br><span class="line">Route::delete(&#x27;new/:id&#x27;,&#x27;News/delete&#x27;); // 定义DELETE请求路由规则</span><br><span class="line">Route::any(&#x27;new/:id&#x27;,&#x27;News/read&#x27;); // 所有请求都支持的路由规则</span><br></pre></td></tr></table></figure><p>如果要定义get和post请求支持的路由规则，也可以用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Route::rule(&#x27;new/:id&#x27;,&#x27;News/read&#x27;,&#x27;GET|POST&#x27;);</span><br></pre></td></tr></table></figure><p>也可以批量注册路由规则，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Route::rule([&#x27;new/:id&#x27;=&gt;&#x27;News/read&#x27;,&#x27;blog/:name&#x27;=&gt;&#x27;Blog/detail&#x27;]);</span><br><span class="line">Route::get([&#x27;new/:id&#x27;=&gt;&#x27;News/read&#x27;,&#x27;blog/:name&#x27;=&gt;&#x27;Blog/detail&#x27;]);</span><br><span class="line">Route::post([&#x27;new/:id&#x27;=&gt;&#x27;News/update&#x27;,&#x27;blog/:name&#x27;=&gt;&#x27;Blog/detail&#x27;]);</span><br></pre></td></tr></table></figure><p>若希望所有的路由定义都是完全匹配的话，可以直接配置</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启路由定义的全局完全匹配</span></span><br><span class="line"><span class="string">&#x27;route_complete_match&#x27;</span>  =&gt;  <span class="literal">true</span>,</span><br></pre></td></tr></table></figure><p>若个别路由不需要使用完整匹配，可以添加路由参数覆盖定义：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">rule</span>(<span class="string">&#x27;new/:id&#x27;</span>,<span class="string">&#x27;News/read&#x27;</span>,<span class="string">&#x27;GET|POST&#x27;</span>,[<span class="string">&#x27;complete_match&#x27;</span> =&gt; <span class="literal">false</span>]);</span><br></pre></td></tr></table></figure><p>默认情况下，只会加载一个路由配置文件<code>route.php</code>，若需要定义多个路由文件，可以修改<code>route_config_file</code>配置参数，如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义路由配置文件（数组）</span></span><br><span class="line"><span class="string">&#x27;route_config_file&#x27;</span> =&gt;  [<span class="string">&#x27;route&#x27;</span>, <span class="string">&#x27;route1&#x27;</span>, <span class="string">&#x27;route2&#x27;</span>],</span><br></pre></td></tr></table></figure><h4 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h4><p>设置路由匹配的条件参数，主要用于验证当前的路由规则是否有效，主要包括：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">method</td><td align="left">请求类型检测，支持多个请求类型</td></tr><tr><td align="left">ext</td><td align="left">URL后缀检测，支持匹配多个后缀</td></tr><tr><td align="left">deny_ext</td><td align="left">URL禁止后缀检测，支持匹配多个后缀</td></tr><tr><td align="left">https</td><td align="left">检测是否https请求</td></tr><tr><td align="left">domain</td><td align="left">域名检测</td></tr><tr><td align="left">before_behavior</td><td align="left">前置行为（检测）</td></tr><tr><td align="left">after_behavior</td><td align="left">后置行为（执行）</td></tr><tr><td align="left">callback</td><td align="left">自定义检测方法</td></tr><tr><td align="left">merge_extra_vars</td><td align="left">合并额外参数</td></tr><tr><td align="left">bind_model</td><td align="left">绑定模型（<code>V5.0.1+</code>）</td></tr><tr><td align="left">cache</td><td align="left">请求缓存（<code>V5.0.1+</code>）</td></tr><tr><td align="left">param_depr</td><td align="left">路由参数分隔符（<code>V5.0.2+</code>）</td></tr><tr><td align="left">ajax</td><td align="left">Ajax检测（<code>V5.0.2+</code>）</td></tr><tr><td align="left">pjax</td><td align="left">Pjax检测（<code>V5.0.2+</code>）</td></tr></tbody></table><h4 id="资源路由"><a href="#资源路由" class="headerlink" title="资源路由"></a>资源路由</h4><p>设置<code>RESTFUL</code>请求资源方式如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Router</span>::<span class="title function_ invoke__">resource</span>(<span class="string">&#x27;blog&#x27;</span>,<span class="string">&#x27;index/blog&#x27;</span>);</span><br></pre></td></tr></table></figure><p>或者在路由配置文件中使用<code>__rest__</code>添加资源路由定义：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">//定义资源路由</span></span><br><span class="line">    <span class="string">&#x27;__rest__&#x27;</span>=&gt;[</span><br><span class="line">        <span class="comment">//指向index模块的blog控制器</span></span><br><span class="line">        <span class="string">&#x27;blog&#x27;</span>=&gt;<span class="string">&#x27;index/blog&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//定义普通路由</span></span><br><span class="line">    <span class="string">&#x27;hello/:id&#x27;</span>=&gt;<span class="string">&#x27;index/hello&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>设置后会自动注册7个路由规则，如下：</p><table><thead><tr><th align="left">标识</th><th align="left">请求类型</th><th align="left">生成路由规则</th><th align="left">对应操作方法（默认）</th></tr></thead><tbody><tr><td align="left">index</td><td align="left">GET</td><td align="left"><code>blog</code></td><td align="left">index</td></tr><tr><td align="left">create</td><td align="left">GET</td><td align="left"><code>blog/create</code></td><td align="left">create</td></tr><tr><td align="left">save</td><td align="left">POST</td><td align="left"><code>blog</code></td><td align="left">save</td></tr><tr><td align="left">read</td><td align="left">GET</td><td align="left"><code>blog/:id</code></td><td align="left">read</td></tr><tr><td align="left">edit</td><td align="left">GET</td><td align="left"><code>blog/:id/edit</code></td><td align="left">edit</td></tr><tr><td align="left">update</td><td align="left">PUT</td><td align="left"><code>blog/:id</code></td><td align="left">update</td></tr><tr><td align="left">delete</td><td align="left">DELETE</td><td align="left"><code>blog/:id</code></td><td align="left">delete</td></tr></tbody></table><p>上面的设置，会对应index模块的blog控制器，对应方法如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$id</span></span>)</span>&#123;</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params"><span class="variable">$id</span></span>)</span>&#123;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以改变默认的id参数名，例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">resource</span>(<span class="string">&#x27;blog&#x27;</span>,<span class="string">&#x27;index/blog&#x27;</span>,[<span class="string">&#x27;var&#x27;</span>=&gt;[<span class="string">&#x27;blog&#x27;</span>=&gt;<span class="string">&#x27;blog_id&#x27;</span>]]);</span><br></pre></td></tr></table></figure><p>因此blog控制器对应方法调整为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$blog_id</span></span>)</span>&#123;</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params"><span class="variable">$blog_id</span></span>)</span>&#123;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在定义资源路由的时候限定执行的方法（标识），例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只允许index操作</span></span><br><span class="line"><span class="title class_">Router</span>::<span class="title function_ invoke__">resource</span>(<span class="string">&#x27;blog&#x27;</span>,<span class="string">&#x27;index/blog&#x27;</span>,[<span class="string">&#x27;only&#x27;</span>=&gt;[<span class="string">&#x27;index&#x27;</span>]]);</span><br><span class="line"><span class="comment">//排除index操作</span></span><br><span class="line"><span class="title class_">Router</span>::<span class="title function_ invoke__">resource</span>(<span class="string">&#x27;blog&#x27;</span>,<span class="string">&#x27;index/blog&#x27;</span>,[<span class="string">&#x27;except&#x27;</span>=&gt;[<span class="string">&#x27;index&#x27;</span>]]);</span><br></pre></td></tr></table></figure><p>资源路由的标识不可更改，但生成的路由规则和对应操作方法可以修改：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">rest</span>(<span class="string">&#x27;create&#x27;</span>,[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/add&#x27;</span>,<span class="string">&#x27;add&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>设置之后，URL访问变为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://serverName/blog/create</span><br><span class="line">变成</span><br><span class="line">http://serverName/blog/add</span><br></pre></td></tr></table></figure><p>创建blog页面的对应的操作方法也变成了add。</p><p>支持批量更改，如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">rest</span>([</span><br><span class="line">    <span class="string">&#x27;save&#x27;</span>   =&gt; [<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;store&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;update&#x27;</span> =&gt; [<span class="string">&#x27;PUT&#x27;</span>, <span class="string">&#x27;/:id&#x27;</span>, <span class="string">&#x27;save&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;delete&#x27;</span> =&gt; [<span class="string">&#x27;DELETE&#x27;</span>, <span class="string">&#x27;/:id&#x27;</span>, <span class="string">&#x27;destory&#x27;</span>],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h4 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h4><p>将相同路由合并分组，提高路由匹配的效率，不必每次都遍历完整的路由规则。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;blog/:id&#x27;</span> =&gt; [<span class="string">&#x27;Blog/read&#x27;</span>,[<span class="string">&#x27;method&#x27;</span>=&gt;<span class="string">&#x27;get&#x27;</span>],[<span class="string">&#x27;id&#x27;</span>=&gt;<span class="string">&#x27;\d+&#x27;</span>]],</span><br><span class="line"><span class="string">&#x27;blog/:name&#x27;</span> =&gt; [<span class="string">&#x27;Blog/read&#x27;</span>, [<span class="string">&#x27;method&#x27;</span>=&gt;<span class="string">&#x27;post&#x27;</span>]],</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;[blog]&#x27;</span> =&gt; [</span><br><span class="line">    <span class="string">&#x27;:id&#x27;</span> =&gt; [<span class="string">&#x27;Blog/read&#x27;</span>,[<span class="string">&#x27;method&#x27;</span>=&gt;<span class="string">&#x27;get&#x27;</span>],[<span class="string">&#x27;id&#x27;</span>=&gt;<span class="string">&#x27;\d+&#x27;</span>]],</span><br><span class="line">    <span class="string">&#x27;:name&#x27;</span> =&gt; [<span class="string">&#x27;Blog/read&#x27;</span>, [<span class="string">&#x27;method&#x27;</span>=&gt;<span class="string">&#x27;post&#x27;</span>]],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>可以使用<code>Route</code>类的<code>group</code>方法进行注册，如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;blog&#x27;</span>,[</span><br><span class="line">    <span class="string">&#x27;:id&#x27;</span> =&gt; [<span class="string">&#x27;Blog/read&#x27;</span>,[<span class="string">&#x27;method&#x27;</span>=&gt;<span class="string">&#x27;get&#x27;</span>],[<span class="string">&#x27;id&#x27;</span>=&gt;<span class="string">&#x27;\d+&#x27;</span>]],</span><br><span class="line">    <span class="string">&#x27;:name&#x27;</span> =&gt; [<span class="string">&#x27;Blog/read&#x27;</span>,[<span class="string">&#x27;method&#x27;</span>=&gt;<span class="string">&#x27;post&#x27;</span>]],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>还可以给分组路由定义一些公用的路由设置参数，例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;blog&#x27;</span>,[</span><br><span class="line">    <span class="string">&#x27;:id&#x27;</span> =&gt; [<span class="string">&#x27;Blog/read&#x27;</span>,[],[<span class="string">&#x27;id =&gt;&#x27;</span>\d+<span class="string">&#x27;]],</span></span><br><span class="line"><span class="string">    &#x27;</span>:name<span class="string">&#x27; =&gt; [&#x27;</span>Blog/read<span class="string">&#x27;, []],</span></span><br><span class="line"><span class="string">],[&#x27;</span>method<span class="string">&#x27;=&gt;&#x27;</span>get<span class="string">&#x27;,&#x27;</span>ext<span class="string">&#x27;=&gt;&#x27;</span>html<span class="string">&#x27;]);</span></span><br></pre></td></tr></table></figure><p>支持用闭包的方式注册路由分组：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;blog&#x27;</span>,function()&#123;</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">any</span>(<span class="string">&#x27;:id&#x27;</span>,<span class="string">&#x27;blog/read&#x27;</span>,[],[<span class="string">&#x27;id&#x27;</span>=&gt;<span class="string">&#x27;\d+&#x27;</span>]);</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">any</span>(<span class="string">&#x27;:name&#x27;</span>,<span class="string">&#x27;blog/read&#x27;</span>,[],[<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;\w+&#x27;</span>]);</span><br><span class="line">&#125;,[<span class="string">&#x27;method&#x27;</span>=&gt;<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;ext&#x27;</span>=&gt;<span class="string">&#x27;html&#x27;</span>]);</span><br></pre></td></tr></table></figure><h4 id="MISS路由"><a href="#MISS路由" class="headerlink" title="MISS路由"></a>MISS路由</h4><p>若希望在没有匹配到所有路由规则后执行一条设定的路由，可以使用<code>MISS</code>，只需要在路由配置文件中定义：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">&#x27;new/:id&#x27;</span> =&gt; <span class="string">&#x27;News/read&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;blog/:id&#x27;</span> =&gt; [<span class="string">&#x27;Blog/update&#x27;</span>,[<span class="string">&#x27;method&#x27;</span> =&gt; <span class="string">&#x27;post|put&#x27;</span>], [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;\d+&#x27;</span>]],</span><br><span class="line">    <span class="string">&#x27;__miss__&#x27;</span>  =&gt; <span class="string">&#x27;public/miss&#x27;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>或者使用<code>miss</code>方法注册路由</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">miss</span>(<span class="string">&#x27;public/miss&#x27;</span>)</span><br></pre></td></tr></table></figure><p>分组支持独立的<code>MISS</code>路由，例如如下定义：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">&#x27;[blog]&#x27;</span> =&gt;  [</span><br><span class="line">        <span class="string">&#x27;edit/:id&#x27;</span>  =&gt; [<span class="string">&#x27;Blog/edit&#x27;</span>,[<span class="string">&#x27;method&#x27;</span> =&gt; <span class="string">&#x27;get&#x27;</span>], [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;\d+&#x27;</span>]],</span><br><span class="line">        <span class="string">&#x27;:id&#x27;</span>       =&gt; [<span class="string">&#x27;Blog/read&#x27;</span>,[<span class="string">&#x27;method&#x27;</span> =&gt; <span class="string">&#x27;get&#x27;</span>], [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;\d+&#x27;</span>]],</span><br><span class="line">        <span class="string">&#x27;__miss__&#x27;</span>  =&gt; <span class="string">&#x27;blog/miss&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;new/:id&#x27;</span>   =&gt; <span class="string">&#x27;News/read&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;__miss__&#x27;</span>  =&gt; <span class="string">&#x27;public/miss&#x27;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="闭包支持"><a href="#闭包支持" class="headerlink" title="闭包支持"></a>闭包支持</h4><p>可以使用闭包的方式定义一些特殊需求的路由，不去执行控制器的操作方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;hello/:name&#x27;</span>,function(<span class="variable">$name</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;Hello,&#x27;</span>.<span class="variable">$name</span> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当访问URL地址为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://serverName/hello/thinkphp</span><br></pre></td></tr></table></figure><p>则浏览器输出的结果是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello,thinkphp</span><br></pre></td></tr></table></figure><h4 id="域名路由"><a href="#域名路由" class="headerlink" title="域名路由"></a>域名路由</h4><p>定义域名部署规则支持两种方式：动态注册和配置定义</p><h5 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h5><p>可以在应用的公共文件或配置文件中动态注册域名部署规则，如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// blog子域名绑定到blog模块</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">domain</span>(<span class="string">&#x27;blog&#x27;</span>,<span class="string">&#x27;blog&#x27;</span>);</span><br><span class="line"><span class="comment">// 完整域名绑定到admin模块</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">domain</span>(<span class="string">&#x27;admin.thinkphp.cn&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"><span class="comment">// IP绑定到admin模块</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">domain</span>(<span class="string">&#x27;114.23.4.5&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>);</span><br></pre></td></tr></table></figure><p>blog子域名绑定后，URL访问规则变成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 原来的URL访问</span><br><span class="line">http://www.thinkphp.cn/blog/article/read/id/5</span><br><span class="line">// 绑定到blog子域名访问</span><br><span class="line">http://blog.thinkphp.cn/article/read/id/5</span><br></pre></td></tr></table></figure><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gin框架笔记</title>
      <link href="/2023/02/03/gin%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/03/gin%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="自定义模版函数"><a href="#自定义模版函数" class="headerlink" title="自定义模版函数"></a>自定义模版函数</h4><blockquote><p>main.go</p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建一个默认的路由引擎</span></span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.SetFuncMap(template.FuncMap&#123;</span><br><span class="line"><span class="string">&quot;safe&quot;</span>: <span class="function"><span class="keyword">func</span><span class="params">(str <span class="type">string</span>)</span></span> template.HTML &#123;</span><br><span class="line"><span class="keyword">return</span> template.HTML(str)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">router.LoadHTMLFiles(<span class="string">&quot;./index.tmpl&quot;</span>)</span><br><span class="line"></span><br><span class="line">router.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;index.tmpl&quot;</span>, <span class="string">&quot;&lt;a href=&#x27;https://liwenzhou.com&#x27;&gt;李文周的博客&lt;/a&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>index.tmpl</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改模板引擎的标识符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; . | safe &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="静态文件处理"><a href="#静态文件处理" class="headerlink" title="静态文件处理"></a>静态文件处理</h4><p>当渲染的html文件中引用了静态文件时，按照以下方式在渲染页面前调用<strong>gin.static</strong>方法即可</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.Static(<span class="string">&quot;/static&quot;</span>, <span class="string">&quot;./static&quot;</span>)</span><br><span class="line">r.LoadHTMLGlob(<span class="string">&quot;templates/**/*&quot;</span>)</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JSON、XML、YMAL、protobuf渲染"><a href="#JSON、XML、YMAL、protobuf渲染" class="headerlink" title="JSON、XML、YMAL、protobuf渲染"></a>JSON、XML、YMAL、protobuf渲染</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin/testdata/protoexample&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"><span class="comment">//gin.H是map[string]interface&#123;&#125;的缩写</span></span><br><span class="line">r.GET(<span class="string">&quot;/someJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">//方式一：自己拼接</span></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello world!&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/someXML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">//方式一：自己拼接</span></span><br><span class="line">c.XML(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello world!&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/moreJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">//方式二：使用结构体</span></span><br><span class="line"><span class="keyword">var</span> msg <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="type">string</span></span><br><span class="line">Message <span class="type">string</span></span><br><span class="line">Age     <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">msg.Name = <span class="string">&quot;小王子&quot;</span></span><br><span class="line">msg.Message = <span class="string">&quot;Hello world!&quot;</span></span><br><span class="line">msg.Age = <span class="number">18</span></span><br><span class="line">c.JSON(http.StatusOK, msg)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/moreXML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">//方式二：使用结构体</span></span><br><span class="line"><span class="keyword">type</span> message <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Message <span class="type">string</span></span><br><span class="line">Age     <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> msg message</span><br><span class="line">msg.Name = <span class="string">&quot;小王子&quot;</span></span><br><span class="line">msg.Message = <span class="string">&quot;Hello world!&quot;</span></span><br><span class="line">msg.Age = <span class="number">18</span></span><br><span class="line">c.XML(http.StatusOK, msg)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/someYAML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.YAML(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;ok&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/someProtoBuf&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">reps := []<span class="type">int64</span>&#123;<span class="type">int64</span>(<span class="number">1</span>), <span class="type">int64</span>(<span class="number">2</span>)&#125;</span><br><span class="line">label := <span class="string">&quot;test&quot;</span></span><br><span class="line">data := &amp;protoexample.Test&#123;</span><br><span class="line">Label: &amp;label,</span><br><span class="line">Reps:  reps,</span><br><span class="line">&#125;</span><br><span class="line">c.ProtoBuf(http.StatusOK, data)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h4><h5 id="获取querystring参数"><a href="#获取querystring参数" class="headerlink" title="获取querystring参数"></a>获取querystring参数</h5><p>querystring指的是URL中？后面携带的参数；获取请求的querystring参数方法：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/user/search&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">username := c.DefaultQuery(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;小王子&quot;</span>)</span><br><span class="line">address := c.Query(<span class="string">&quot;address&quot;</span>)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>:  <span class="string">&quot;ok&quot;</span>,</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line"><span class="string">&quot;address&quot;</span>:  address,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取form参数"><a href="#获取form参数" class="headerlink" title="获取form参数"></a>获取form参数</h5><p>使用c.PostForm获取请求数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username := c.PostForm(&quot;username&quot;)</span><br><span class="line">address := c.PostForm(&quot;address&quot;)</span><br></pre></td></tr></table></figure><h5 id="获取Map参数（字典参数）"><a href="#获取Map参数（字典参数）" class="headerlink" title="获取Map参数（字典参数）"></a>获取Map参数（字典参数）</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.POST(<span class="string">&quot;/post&quot;</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.context)</span></span>&#123;</span><br><span class="line">    ids := c.QueryMap(<span class="string">&quot;ids&quot;</span>)</span><br><span class="line">    names := c.PostFormMap(<span class="string">&quot;names&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    c.JSON(http.StatusOK,gin.H&#123;</span><br><span class="line">        <span class="string">&quot;ids&quot;</span>: ids,</span><br><span class="line">        <span class="string">&quot;names&quot;</span>: names,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -g &quot;http://localhost:9999/post?ids[Jack]=001&amp;ids[Tom]=002&quot; -X POST -d &#x27;names[a]=Sam&amp;names[b]=David&#x27;</span><br><span class="line"></span><br><span class="line">&#123;&quot;ids&quot;:&#123;&quot;Jack&quot;:&quot;001&quot;,&quot;Tom&quot;:&quot;002&quot;&#125;,&quot;names&quot;:&#123;&quot;a&quot;:&quot;Sam&quot;,&quot;b&quot;:&quot;David&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="获取json参数"><a href="#获取json参数" class="headerlink" title="获取json参数"></a>获取json参数</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.POST(<span class="string">&quot;/json&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">b, _ := c.GetRawData() <span class="comment">//从c.Request.Body读取请求数据</span></span><br><span class="line"><span class="comment">//定义map或结构体</span></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">_ = json.Unmarshal(b, &amp;m)</span><br><span class="line">c.JSON(http.StatusOK, m)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取path参数"><a href="#获取path参数" class="headerlink" title="获取path参数"></a>获取path参数</h5><p>请求的参数通过URL路径传递，例如：/user/search/小王子/沙河。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/user/search/:username/:address&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">username := c.Param(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">address := c.Param(<span class="string">&quot;address&quot;</span>)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>:  <span class="string">&quot;ok&quot;</span>,</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line"><span class="string">&quot;address&quot;</span>:  address,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h5><p>为了能够更方便地获取相关参数，可以基于请求的Content-Type识别请求数据类型并利用反射机制自动提取请求中Querystring、form表单、JSON、XML等参数到结构体中，下面代码演示了.ShouldBind()强大的功能，它能够基于请求自动提取JSON、form表单和Querystring类型的数据，并把值绑定到指定结构体对象。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> &#123;</span><br><span class="line">User     <span class="type">string</span> <span class="string">`form:&quot;user&quot; json:&quot;user&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`form:&quot;password&quot; json:&quot;password&quot; binding:&quot;required&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.POST(<span class="string">&quot;/loginJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> login Login</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBind(&amp;login); err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;login info:%#v\n&quot;</span>, login)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;user&quot;</span>:     login.User,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: login.Password,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//绑定form表单示例</span></span><br><span class="line">router.POST(<span class="string">&quot;/loginForm&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> login Login</span><br><span class="line"><span class="comment">//ShouldBind()会根据请求的Content-type自行选择绑定器</span></span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBind(&amp;login); err == <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;user&quot;</span>:     login.User,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: login.Password,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//绑定QueryString示例</span></span><br><span class="line">router.GET(<span class="string">&quot;/loginQuery&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> login Login</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBind(&amp;login); err == <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;user&quot;</span>:     login.User,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: login.Password,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">router.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ShouldBind会按照下面的顺序解析请求中数据完成绑定：</p><ol><li>若是GET请求，只使用Form绑定引擎（query）</li><li>若是POST请求，首先检查content-type是否为JSON或XML，然后再使用Form（form-data）</li></ol><h4 id="在gin框架中使用JWT"><a href="#在gin框架中使用JWT" class="headerlink" title="在gin框架中使用JWT"></a>在gin框架中使用JWT</h4><p>JWT全称JSON Web Token是一种跨域认证解决方案，属于一个开放的标准，规定了一种Token实现方式，多用于前后端分离项目和OAuth2.0业务场景下</p><p><strong>为什么要使用JWT：</strong>用户可能使用浏览器也可能使用app访问服务，有时候还需要支持第三方登录，因此Cookie-Session模式有些力不从心了；JWT即基于Token的轻量级认证模式，认证通过后会生成一个JSON对象，经过签名后得到一个token（令牌）再发回给用户，用户后续请求只需带上该token，服务端解密后就能获取用户相关信息</p><h5 id="JWT的使用"><a href="#JWT的使用" class="headerlink" title="JWT的使用"></a>JWT的使用</h5><p>若直接使用JWT中默认的字段，没有其他定制化的需求则可以直接使用这个包中的和方法快速生成和解析token</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用于签名的字符串</span></span><br><span class="line"><span class="keyword">var</span> mySigningKey = []<span class="type">byte</span>(<span class="string">&quot;liwenzhou.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GenRegisteredClaims 使用默认声明创建jwt</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenRegisteredClaims</span><span class="params">()</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// 创建 Claims</span></span><br><span class="line">claims := &amp;jwt.RegisteredClaims&#123;</span><br><span class="line">ExpiresAt: jwt.NewNumericDate(time.Now().Add(time.Hour * <span class="number">24</span>)), <span class="comment">// 过期时间</span></span><br><span class="line">Issuer:    <span class="string">&quot;qimi&quot;</span>,                                             <span class="comment">// 签发人</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成token对象</span></span><br><span class="line">token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line"><span class="comment">// 生成签名字符串</span></span><br><span class="line"><span class="keyword">return</span> token.SignedString(mySigningKey)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ParseRegisteredClaims 解析jwt</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ValidateRegisteredClaims</span><span class="params">(tokenString <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">// 解析token</span></span><br><span class="line">token, err := jwt.Parse(tokenString, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> mySigningKey, <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">// 解析token失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> token.Valid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用HTTP服务压测工具"><a href="#常用HTTP服务压测工具" class="headerlink" title="常用HTTP服务压测工具"></a>常用HTTP服务压测工具</h4><h5 id="压测相关术语"><a href="#压测相关术语" class="headerlink" title="压测相关术语"></a>压测相关术语</h5><ul><li>响应时间（RT）：指系统对请求作出响应的时间</li><li>吞吐量（Throughput）：指系统在单位时间内处理请求的数量</li><li>QPS每秒查询率（Query Per Second）：一台服务器每秒能够响应的查询次数，是对一个特定查询服务器在规定时间内处理流量多少的衡量标准</li><li>TPS（TransactionPerSecond）：每秒钟系统能够处理的交易或事务的数量</li><li>并发连接数：某个时刻服务器所接受的请求总数</li></ul><h5 id="压力测试工具"><a href="#压力测试工具" class="headerlink" title="压力测试工具"></a>压力测试工具</h5><h6 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h6><p><strong>ab</strong>：Apache Bench，指定同时连接数、请求数及URL，即可测试网站或网站程序的性能，通过ab发送请求模拟多个访问者同时对某一URL地址进行访问，可以得到每秒传送字节数、每秒处理请求数、每请求处理时间等数据</p><p>命令格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ab [options] [http://]hostname[:port]/path</span><br></pre></td></tr></table></figure><p>常用参数如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-n requests 总请求数</span><br><span class="line">-c concurrency 一次产生的请求数，可以理解为并发数</span><br><span class="line">-t timelimit 测试所进行的最大秒数, 可以当做请求的超时时间</span><br><span class="line">-p postfile 包含了需要POST的数据的文件</span><br><span class="line">-T content-type POST数据所使用的Content-type头信息</span><br></pre></td></tr></table></figure><p>例如测试某个POST请求接口：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ab -n 10000 -c 100 -t 10 -p post.json -T &quot;application/json&quot; &quot;http://127.0.0.1:8080/api/v1/post&quot;</span><br></pre></td></tr></table></figure><h6 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a>wrk</h6><p><strong>wrk</strong>：比ab功能更加强大，可以通过编写lua脚本来支持更复杂的测试场景</p><p>常用参数如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-c --conections：保持的连接数</span><br><span class="line">-d --duration：压测持续时间(s)</span><br><span class="line">-t --threads：使用的线程总数</span><br><span class="line">-s --script：加载lua脚本</span><br><span class="line">-H --header：在请求头部添加一些参数</span><br><span class="line">--latency 打印详细的延迟统计信息</span><br><span class="line">--timeout 请求的最大超时时间(s)</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wrk -t8 -c100 -d30s --latency http://127.0.0.1:8080/api/v1/posts?size=10</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Running 30s test @ http://127.0.0.1:8080/api/v1/posts?size=10</span><br><span class="line">  8 threads and 100 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency    14.55ms    2.02ms  31.59ms   76.70%</span><br><span class="line">    Req/Sec   828.16     85.69     0.97k    60.46%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%   14.44ms</span><br><span class="line">     75%   15.76ms</span><br><span class="line">     90%   16.63ms</span><br><span class="line">     99%   21.07ms</span><br><span class="line">  198091 requests in 30.05s, 29.66MB read</span><br><span class="line">Requests/sec:   6592.29</span><br><span class="line">Transfer/sec:      0.99MB</span><br></pre></td></tr></table></figure><h6 id="go-wrk"><a href="#go-wrk" class="headerlink" title="go-wrk"></a>go-wrk</h6><p>go-wrk：go语言版本的wrk</p><p>安装方式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/adeven/go-wrk</span><br></pre></td></tr></table></figure><p>使用方法同<code>wrk</code>类似，基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go-wrk [flags] url</span><br></pre></td></tr></table></figure><p>常用参数如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-H=&quot;User-Agent: go-wrk 0.1 bechmark\nContent-Type: text/html;&quot;: 由&#x27;\n&#x27;分隔的请求头</span><br><span class="line">-c=100: 使用的最大连接数</span><br><span class="line">-k=true: 是否禁用keep-alives</span><br><span class="line">-i=false: if TLS security checks are disabled</span><br><span class="line">-m=&quot;GET&quot;: HTTP请求方法</span><br><span class="line">-n=1000: 请求总数</span><br><span class="line">-t=1: 使用的线程数</span><br><span class="line">-b=&quot;&quot; HTTP请求体</span><br><span class="line">-s=&quot;&quot; 如果指定，它将计算响应中包含搜索到的字符串s的频率</span><br></pre></td></tr></table></figure><p>执行测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go-wrk -t=8 -c=100 -n=10000 &quot;http://127.0.0.1:8080/api/v1/posts?size=10&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==========================BENCHMARK==========================</span><br><span class="line">URL:                            http://127.0.0.1:8080/api/v1/posts?size=10</span><br><span class="line"></span><br><span class="line">Used Connections:               100</span><br><span class="line">Used Threads:                   8</span><br><span class="line">Total number of calls:          10000</span><br><span class="line"></span><br><span class="line">===========================TIMINGS===========================</span><br><span class="line">Total time passed:              2.74s</span><br><span class="line">Avg time per request:           27.11ms</span><br><span class="line">Requests per second:            3644.53</span><br><span class="line">Median time per request:        26.88ms</span><br><span class="line">99th percentile time:           39.16ms</span><br><span class="line">Slowest time for request:       45.00ms</span><br><span class="line"></span><br><span class="line">=============================DATA=============================</span><br><span class="line">Total response body sizes:              340000</span><br><span class="line">Avg response body per request:          34.00 Byte</span><br><span class="line">Transfer rate per second:               123914.11 Byte/s (0.12 MByte/s)</span><br><span class="line">==========================RESPONSES==========================</span><br><span class="line">20X Responses:          10000   (100.00%)</span><br><span class="line">30X Responses:          0       (0.00%)</span><br><span class="line">40X Responses:          0       (0.00%)</span><br><span class="line">50X Responses:          0       (0.00%)</span><br><span class="line">Errors:                 0       (0.00%)</span><br></pre></td></tr></table></figure><h4 id="常用限流策略—漏桶和令牌桶"><a href="#常用限流策略—漏桶和令牌桶" class="headerlink" title="常用限流策略—漏桶和令牌桶"></a>常用限流策略—漏桶和令牌桶</h4><h5 id="漏桶"><a href="#漏桶" class="headerlink" title="漏桶"></a>漏桶</h5><p>将请求比作水，以限定的速度处理请求；当请求来的过猛时会导致直接溢出，即拒绝服务</p><h6 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/uber-go/ratelimit</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;go.uber.org/ratelimit&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rl := ratelimit.New(<span class="number">100</span>) <span class="comment">// per second</span></span><br><span class="line"></span><br><span class="line">    prev := time.Now()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        now := rl.Take()</span><br><span class="line">        fmt.Println(i, now.Sub(prev))</span><br><span class="line">        prev = now</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Take()</code>方法会返回漏桶下一次滴水时间</p><h5 id="令牌桶"><a href="#令牌桶" class="headerlink" title="令牌桶"></a>令牌桶</h5><p>以恒定的速度往桶里放入令牌，若请求需要被处理，则需要先从桶里获取一个令牌，没有令牌可取时则拒绝服务</p><h6 id="开源库-1"><a href="#开源库-1" class="headerlink" title="开源库"></a>开源库</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/juju/ratelimit</span><br></pre></td></tr></table></figure><h6 id="创建令牌桶的方法"><a href="#创建令牌桶的方法" class="headerlink" title="创建令牌桶的方法"></a>创建令牌桶的方法</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建指定填充速率和容量大小的令牌桶</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBucket</span><span class="params">(fillInterval time.Duration,capacity <span class="type">int64</span>)</span></span> *Bucket</span><br><span class="line"><span class="comment">//创建指定填充速率、容量大小和每次填充的令牌数的令牌桶</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBucketWithQuantum</span><span class="params">(fillInterval time.Duration,capacity,quantum <span class="type">int64</span>)</span></span> *Bucket</span><br><span class="line"><span class="comment">//创建填充速度为指定速率和容量大小的令牌桶</span></span><br><span class="line"><span class="comment">// NewBucketWithRate(0.1, 200) 表示每秒填充20个令牌</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBucketWithRate</span><span class="params">(rate <span class="type">float64</span>，capacity <span class="type">int64</span>)</span></span> *Bucket</span><br></pre></td></tr></table></figure><p>取出令牌的方法如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取token(非阻塞)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tb *Bucket)</span></span> Take(count <span class="type">int64</span>) time.Duration</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tb *Bucket)</span></span> TakeAvailable(count <span class="type">int64</span>) <span class="type">int64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最多等maxWait时间取token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tb *Bucket)</span></span> TakeMaxDuration(count <span class="type">int64</span>,maxWait time.Duration) (time.Duration, <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//取token(阻塞)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tb *Bucket)</span></span> Wait(count <span class="type">int64</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tb *Bucket)</span></span> WaitMaxDuration(count <span class="type">int64</span>,maxWait time.Duration) <span class="type">bool</span></span><br></pre></td></tr></table></figure><p>没有必要生成令牌放入桶中，只需要每次取令牌的时候计算一下当前是否有足够的令牌即可，具体计算方式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前令牌数 = 上一次剩余的令牌数 + (本次取令牌的时刻-上一次取令牌的时刻)/放置令牌的时间间隔 * 每次放置的令牌数</span><br></pre></td></tr></table></figure><h5 id="漏桶和令牌桶区别"><a href="#漏桶和令牌桶区别" class="headerlink" title="漏桶和令牌桶区别"></a>漏桶和令牌桶区别</h5><p>漏桶可以限制数据的传输速率，令牌桶能够限制数据的平均传输速率的同时还允许某种程度的突发传输；通常需要将漏桶和令牌桶结合起来使用</p><h5 id="gin框架中使用限流中间件"><a href="#gin框架中使用限流中间件" class="headerlink" title="gin框架中使用限流中间件"></a>gin框架中使用限流中间件</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RateLimitMiddleware</span><span class="params">(fillInterval time.Duration, <span class="built_in">cap</span> <span class="type">int64</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">bucket := ratelimit.NewBucket(fillInterval, <span class="built_in">cap</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果取不到令牌就中断本次请求返回 rate limit...</span></span><br><span class="line"><span class="keyword">if</span> bucket.TakeAvailable(<span class="number">1</span>) &lt; <span class="number">1</span> &#123;</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;rate limit...&quot;</span>)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.Next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go常用组件技巧_liwenzhou</title>
      <link href="/2023/02/03/go%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E6%8A%80%E5%B7%A7-liwenzhou/"/>
      <url>/2023/02/03/go%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E6%8A%80%E5%B7%A7-liwenzhou/</url>
      
        <content type="html"><![CDATA[<h4 id="json技巧"><a href="#json技巧" class="headerlink" title="json技巧"></a>json技巧</h4><h5 id="忽略某个字段"><a href="#忽略某个字段" class="headerlink" title="忽略某个字段"></a>忽略某个字段</h5><p>如果想在json序列化/反序列化时忽略结构体的某个字段，可以按如下方式在tag中添加<code>-</code></p><h5 id="忽略空值字段"><a href="#忽略空值字段" class="headerlink" title="忽略空值字段"></a>忽略空值字段</h5><p>当struct中字段没有值时，<code>json.Marshal()</code>序列化时默认输出字段的对应类型零值，若想要忽略这些字段可以添加<code>omitempty</code>tag，定义的结构体如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在tag中添加omitempty忽略空值</span></span><br><span class="line"><span class="comment">// 注意这里 hobby,omitempty 合起来是json tag值，中间用英文逗号分隔</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span>   <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Email <span class="type">string</span>   <span class="string">`json:&quot;email,omitempty&quot;`</span></span><br><span class="line">Hobby []<span class="type">string</span> <span class="string">`json:&quot;hobby,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="忽略嵌套结构体空值字段"><a href="#忽略嵌套结构体空值字段" class="headerlink" title="忽略嵌套结构体空值字段"></a>忽略嵌套结构体空值字段</h5><p>以下结构体嵌套示例：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span>   <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Email <span class="type">string</span>   <span class="string">`json:&quot;email,omitempty&quot;`</span></span><br><span class="line">Hobby []<span class="type">string</span> <span class="string">`json:&quot;hobby,omitempty&quot;`</span></span><br><span class="line">Profile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Profile <span class="keyword">struct</span> &#123;</span><br><span class="line">Website <span class="type">string</span> <span class="string">`json:&quot;site&quot;`</span></span><br><span class="line">Slogan  <span class="type">string</span> <span class="string">`json:&quot;slogan&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名嵌套<code>Porfile</code>时序列化后的json串为单层的：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;七米&quot;</span>,<span class="string">&quot;hobby&quot;</span>:[<span class="string">&quot;足球&quot;</span>,<span class="string">&quot;双色球&quot;</span>],<span class="string">&quot;site&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;slogan&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>若想要变成嵌套的json串，需要改为具名嵌套或定义字段tag</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="type">string</span>   <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Email   <span class="type">string</span>   <span class="string">`json:&quot;email,omitempty&quot;`</span></span><br><span class="line">Hobby   []<span class="type">string</span> <span class="string">`json:&quot;hobby,omitempty&quot;`</span></span><br><span class="line">Profile <span class="string">`json:&quot;profile&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;七米&quot;</span>,<span class="string">&quot;hobby&quot;</span>:[<span class="string">&quot;足球&quot;</span>,<span class="string">&quot;双色球&quot;</span>],<span class="string">&quot;profile&quot;</span>:&#123;<span class="string">&quot;site&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;slogan&quot;</span>:<span class="string">&quot;&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>想要在嵌套的结构体为空值时忽略该字段，仅添加<code>omitempty</code>是不够的，还需要使用嵌套的结构体指针：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="type">string</span>   <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Email    <span class="type">string</span>   <span class="string">`json:&quot;email,omitempty&quot;`</span></span><br><span class="line">Hobby    []<span class="type">string</span> <span class="string">`json:&quot;hobby,omitempty&quot;`</span></span><br><span class="line">Profile <span class="string">`json:&quot;profile,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// str:&#123;&quot;name&quot;:&quot;七米&quot;,&quot;hobby&quot;:[&quot;足球&quot;,&quot;双色球&quot;],&quot;profile&quot;:&#123;&quot;site&quot;:&quot;&quot;,&quot;slogan&quot;:&quot;&quot;&#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="type">string</span>   <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Email    <span class="type">string</span>   <span class="string">`json:&quot;email,omitempty&quot;`</span></span><br><span class="line">Hobby    []<span class="type">string</span> <span class="string">`json:&quot;hobby,omitempty&quot;`</span></span><br><span class="line">*Profile <span class="string">`json:&quot;profile,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// str:&#123;&quot;name&quot;:&quot;七米&quot;,&quot;hobby&quot;:[&quot;足球&quot;,&quot;双色球&quot;]&#125;</span></span><br></pre></td></tr></table></figure><h5 id="不修改原结构体忽略空值字段"><a href="#不修改原结构体忽略空值字段" class="headerlink" title="不修改原结构体忽略空值字段"></a>不修改原结构体忽略空值字段</h5><p>若需要json序列化<code>User</code>，但不想把密码页序列化，又不想修改<code>User</code>结构体，这个时候我们就可以创建另外一个结构体<code>PublicUser</code>匿名嵌套原<code>User</code>，同时指定<code>Password</code>字段为匿名结构体指针类型，并添加<code>omitempty</code>tag：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PublicUser <span class="keyword">struct</span> &#123;</span><br><span class="line">*User             <span class="comment">// 匿名嵌套</span></span><br><span class="line">Password *<span class="keyword">struct</span>&#123;&#125; <span class="string">`json:&quot;password,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="处理字符串格式数字"><a href="#处理字符串格式数字" class="headerlink" title="处理字符串格式数字"></a>处理字符串格式数字</h5><p>前端传来的json数据可能会使用字符串类型的数字，此时可以在结构体tag中添加<code>string</code>解析相应字段的数据</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Card <span class="keyword">struct</span> &#123;</span><br><span class="line">ID    <span class="type">int64</span>   <span class="string">`json:&quot;id,string&quot;`</span>    <span class="comment">// 添加string tag</span></span><br><span class="line">Score <span class="type">float64</span> <span class="string">`json:&quot;score,string&quot;`</span> <span class="comment">// 添加string tag</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intAndStringDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">jsonStr1 := <span class="string">`&#123;&quot;id&quot;: &quot;1234567&quot;,&quot;score&quot;: &quot;88.50&quot;&#125;`</span></span><br><span class="line"><span class="keyword">var</span> c1 Card</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal([]<span class="type">byte</span>(jsonStr1), &amp;c1); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;json.Unmarsha jsonStr1 failed, err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;c1:%#v\n&quot;</span>, c1) <span class="comment">// c1:main.Card&#123;ID:1234567, Score:88.5&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="整数变浮点数"><a href="#整数变浮点数" class="headerlink" title="整数变浮点数"></a>整数变浮点数</h5><p>JSON协议无整型和浮点型之分，统称number。json字符串数字Go反序列化后都会变成float64类型；将JSON格式数据反序列化为<code>map[string]interface&#123;&#125;</code>时，都会变成科学计数法浮点数，此时需要使用decode</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// useNumberDemo 使用json.UseNumber</span></span><br><span class="line"><span class="comment">// 解决将JSON数据反序列化成map[string]interface&#123;&#125;时</span></span><br><span class="line"><span class="comment">// 数字变为科学计数法表示的浮点数问题</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">useNumberDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">ID <span class="type">int64</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name <span class="type">string</span> <span class="string">`json:&quot;q1mi&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line">s := student&#123;ID: <span class="number">123456789</span>,Name: <span class="string">&quot;q1mi&quot;</span>&#125;</span><br><span class="line">b, _ := json.Marshal(s)</span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// decode</span></span><br><span class="line">json.Unmarshal(b, &amp;m)</span><br><span class="line">fmt.Printf(<span class="string">&quot;id:%#v\n&quot;</span>, m[<span class="string">&quot;id&quot;</span>])  <span class="comment">// 1.23456789e+08</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;id type:%T\n&quot;</span>, m[<span class="string">&quot;id&quot;</span>])  <span class="comment">//float64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use Number decode</span></span><br><span class="line">decoder := json.NewDecoder(bytes.NewReader(b))</span><br><span class="line">decoder.UseNumber()</span><br><span class="line">decoder.Decode(&amp;m)</span><br><span class="line">fmt.Printf(<span class="string">&quot;id:%#v\n&quot;</span>, m[<span class="string">&quot;id&quot;</span>])  <span class="comment">// &quot;123456789&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;id type:%T\n&quot;</span>, m[<span class="string">&quot;id&quot;</span>]) <span class="comment">// json.Number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用匿名结构体添加字段"><a href="#使用匿名结构体添加字段" class="headerlink" title="使用匿名结构体添加字段"></a>使用匿名结构体添加字段</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type UserInfo struct &#123;</span><br><span class="line">ID   int    `json:&quot;id&quot;`</span><br><span class="line">Name string `json:&quot;name&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u1 := UserInfo&#123;</span><br><span class="line">ID:   123456,</span><br><span class="line">Name: &quot;七米&quot;,</span><br><span class="line">&#125;</span><br><span class="line">// 使用匿名结构体内嵌User并添加额外字段Token</span><br><span class="line">b, err := json.Marshal(struct &#123;</span><br><span class="line">*UserInfo</span><br><span class="line">Token string `json:&quot;token&quot;`</span><br><span class="line">&#125;&#123;</span><br><span class="line">&amp;u1,</span><br><span class="line">&quot;91je3a4s72d1da96h&quot;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="结构体转map-string-interface"><a href="#结构体转map-string-interface" class="headerlink" title="结构体转map[string]interface{}"></a>结构体转map[string]interface{}</h4><p>json包在序列化空接口存放的数字类型（整型、浮点型等）都会序列化成float64</p><h5 id="使用第三方库structs"><a href="#使用第三方库structs" class="headerlink" title="使用第三方库structs"></a>使用第三方库structs</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/fatih/structs</span><br></pre></td></tr></table></figure><h5 id="使用反射"><a href="#使用反射" class="headerlink" title="使用反射"></a>使用反射</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ToMap 结构体转为Map[string]interface&#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToMap</span><span class="params">(in <span class="keyword">interface</span>&#123;&#125;, tagName <span class="type">string</span>)</span></span> (<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>)&#123;</span><br><span class="line">    out := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">    </span><br><span class="line">    v := reflect.ValueOf(in)</span><br><span class="line">    <span class="keyword">if</span> v.Kind() == reflect.Ptr &#123;</span><br><span class="line">        v = v.Elem()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> v.Kind() != reflect.Struct &#123;  <span class="comment">// 非结构体返回错误提示</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;ToMap only accepts struct or struct pointer; got %T&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    t := v.Type()</span><br><span class="line">    <span class="comment">//遍历结构体字段</span></span><br><span class="line">    <span class="comment">//指定tagName值为map中key；字段值为map中value</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; v.NumField(); i++ &#123;</span><br><span class="line">        fi := t.Field(i)</span><br><span class="line">        <span class="keyword">if</span> tagValue := fi.Tag.Get(tagName); tagValue != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">            out[tagValue] = v.Field(i).Interface()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go语言配置管理器–Viper"><a href="#Go语言配置管理器–Viper" class="headerlink" title="Go语言配置管理器–Viper"></a>Go语言配置管理器–Viper</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/spf13/viper</span><br></pre></td></tr></table></figure><h5 id="什么是Viper"><a href="#什么是Viper" class="headerlink" title="什么是Viper"></a>什么是Viper</h5><p>被用于处理所有类型的配置需求和格式：</p><ul><li>设置默认值</li><li>从<code>JSON</code>、<code>TOML</code>、<code>YAML</code>、<code>HCL</code>、<code>envfile</code>和<code>Java properties</code>格式的配置文件读取配置信息</li><li>实时监控和重新读取配置文件（可选）</li><li>从环境变量中读取</li><li>从远程配置系统（etcd或Consul）读取并监控配置变化</li><li>从命令行参数读取配置</li><li>从buffer读取配置</li><li>显式配置值</li></ul><p>Viper会按照下面的优先级，每个项目的优先级都高于它下面的项目：</p><ul><li>显示调用<code>set</code>设置值</li><li>命令行参数（flag）</li><li>环境变量</li><li>配置文件</li><li>key/value存储</li><li>默认值</li></ul><p><strong>目前Viper配置的键是大小写不敏感的</strong></p><p>下面是一个如何使用Viper搜索和读取配置文件的示例：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.SetConfigFile(<span class="string">&quot;./config.yaml&quot;</span>) <span class="comment">// 指定配置文件路径</span></span><br><span class="line">viper.SetConfigName(<span class="string">&quot;config&quot;</span>) <span class="comment">// 配置文件名称(无扩展名)</span></span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>) <span class="comment">// 如果配置文件的名称中没有扩展名，则需要配置此项</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;/etc/appname/&quot;</span>)   <span class="comment">// 查找配置文件所在的路径</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;$HOME/.appname&quot;</span>)  <span class="comment">// 多次调用以添加多个搜索路径</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)               <span class="comment">// 还可以在工作目录中查找配置</span></span><br><span class="line">err := viper.ReadInConfig() <span class="comment">// 查找并读取配置文件</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">// 处理读取配置文件的错误</span></span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;Fatal error config file: %s \n&quot;</span>, err))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在加载配置文件出错时可以像下面这样处理找不到配置文件的特定情况：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _, ok := err.(viper.ConfigFileNotFoundError); ok &#123;</span><br><span class="line">        <span class="comment">// 配置文件未找到错误；如果需要可以忽略</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 配置文件被找到，但产生了另外的错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置文件找到并成功解析</span></span><br></pre></td></tr></table></figure><h5 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h5><ul><li>WriteConfig - 将当前的<code>viper</code>配置写入预定义的路径并覆盖（如果存在的话）。如果没有预定义的路径，则报错。</li><li>SafeWriteConfig - 将当前的<code>viper</code>配置写入预定义的路径。如果没有预定义的路径，则报错。如果存在，将不会覆盖当前的配置文件。</li><li>WriteConfigAs - 将当前的<code>viper</code>配置写入给定的文件路径。将覆盖给定的文件(如果它存在的话)。</li><li>SafeWriteConfigAs - 将当前的<code>viper</code>配置写入给定的文件路径。不会覆盖给定的文件(如果它存在的话)。</li></ul><p>标记为<code>safe</code>的所有方法都不会覆盖任何文件，而是直接创建（如果不存在），而默认行为是创建或截断。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.WriteConfig() <span class="comment">// 将当前配置写入“viper.AddConfigPath()”和“viper.SetConfigName”设置的预定义路径</span></span><br><span class="line">viper.SafeWriteConfig()</span><br><span class="line">viper.WriteConfigAs(<span class="string">&quot;/path/to/my/.config&quot;</span>)</span><br><span class="line">viper.SafeWriteConfigAs(<span class="string">&quot;/path/to/my/.config&quot;</span>) <span class="comment">// 因为该配置文件写入过，所以会报错</span></span><br><span class="line">viper.SafeWriteConfigAs(<span class="string">&quot;/path/to/my/.other_config&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="监控并重新读取配置文件"><a href="#监控并重新读取配置文件" class="headerlink" title="监控并重新读取配置文件"></a>监控并重新读取配置文件</h5><p><font color=red>首先确保在调用<code>WatchConfig()</code>前添加了所有配置路径</font></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.WatchConfig()</span><br><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(e fsnotify.Event)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 配置文件发生变更之后会调用的回调函数</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Config file changed:&quot;</span>, e.Name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="从io-Reader读取配置"><a href="#从io-Reader读取配置" class="headerlink" title="从io.Reader读取配置"></a>从io.Reader读取配置</h5><p>Viper预先定义了许多配置源，如文件、环境变量、标志和远程K/V存储，但不受其约束。可以实现自己所需的配置源并将其提供给viper</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)<span class="comment">//或viper.SetConfigType(&quot;YAML&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//任何需要将此配置添加到程序中的方法</span></span><br><span class="line"><span class="keyword">var</span> yamlExample = []<span class="type">byte</span>(<span class="string">`</span></span><br><span class="line"><span class="string">    Hacker: true</span></span><br><span class="line"><span class="string">    name: steve</span></span><br><span class="line"><span class="string">    hobbies:</span></span><br><span class="line"><span class="string">    - skateboarding</span></span><br><span class="line"><span class="string">    - snowboarding</span></span><br><span class="line"><span class="string">    - go</span></span><br><span class="line"><span class="string">    clothing:</span></span><br><span class="line"><span class="string">      jacket: leather</span></span><br><span class="line"><span class="string">      trousers: denim</span></span><br><span class="line"><span class="string">    age: 35</span></span><br><span class="line"><span class="string">    eyes : brown</span></span><br><span class="line"><span class="string">    beard: true</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line"></span><br><span class="line">viper.ReadConfig(bytes.NewBuffer(yamlExample))</span><br><span class="line">viper.Get(<span class="string">&quot;name&quot;</span>)<span class="comment">//得到name的设置值</span></span><br></pre></td></tr></table></figure><h5 id="覆盖设置"><a href="#覆盖设置" class="headerlink" title="覆盖设置"></a>覆盖设置</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.Set(<span class="string">&quot;Verbose&quot;</span>,<span class="literal">true</span>)</span><br><span class="line">Viper.Set(<span class="string">&quot;LogFile&quot;</span>,LogFile)</span><br></pre></td></tr></table></figure><h5 id="注册和使用别名"><a href="#注册和使用别名" class="headerlink" title="注册和使用别名"></a>注册和使用别名</h5><p>允许多个键引用单个值</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.RegisterAlias(<span class="string">&quot;loud&quot;</span>,<span class="string">&quot;Verbose&quot;</span>)<span class="comment">//注册别名</span></span><br><span class="line"></span><br><span class="line">viper.Set(<span class="string">&quot;Verbose&quot;</span>,<span class="literal">true</span>)</span><br><span class="line">viper.Set(<span class="string">&quot;loud&quot;</span>,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">viper.GetBool(<span class="string">&quot;loud&quot;</span>)<span class="comment">//true</span></span><br><span class="line">viper.GetBool(<span class="string">&quot;Verbose&quot;</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="远程Key-Value存储支持"><a href="#远程Key-Value存储支持" class="headerlink" title="远程Key/Value存储支持"></a>远程Key/Value存储支持</h5><p>在Viper中启用远程支持，需要在代码中匿名导入<code>viper/remote</code>包</p><p><code>import _ &quot;github.com/spf13/viper/remote&quot;</code></p><p>Viper读取从Key/Value存储（例如etcd或Consul）中的路径检索到的配置字符串（如<code>JSON</code>、<code>TOML</code>、<code>YAML</code>、<code>HCL</code>、<code>envfile</code>和<code>Java properties</code>格式）（译注：也就是说Viper加载配置值的优先级为：磁盘上的配置文件&gt;命令行标志位&gt;环境变量&gt;远程Key/Value存储&gt;默认值。）</p><h5 id="远程Key-Value存储示例-未加密"><a href="#远程Key-Value存储示例-未加密" class="headerlink" title="远程Key/Value存储示例-未加密"></a>远程Key/Value存储示例-未加密</h5><p><code>etcd</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.AddRemoteProvide(<span class="string">&quot;etcd&quot;</span>,<span class="string">&quot;http://127.0.0.1:4001&quot;</span>,<span class="string">&quot;/config/hugo.json&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;json&quot;</span>)<span class="comment">//因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 &quot;json&quot;, &quot;toml&quot;, &quot;yaml&quot;, &quot;yml&quot;, &quot;properties&quot;, &quot;props&quot;, &quot;prop&quot;, &quot;env&quot;, &quot;dotenv&quot;</span></span><br><span class="line">err := viper.ReadRemoteConfig()</span><br></pre></td></tr></table></figure><p><code>Consul</code></p><p>需要在Consul Key/Value存储中设置一个Key保存包含所需配置的JSON值。例如，创建一个key<code>MY_CONSUL_KEY</code>将下面的值存入Consul key/value 存储：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">8080</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;liwenzhou.com&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.AddRemoteProvider(<span class="string">&quot;consul&quot;</span>,<span class="string">&quot;localhost:8500&quot;</span>,<span class="string">&quot;MY_CONSUL_KEY&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;json&quot;</span>)<span class="comment">//需要显示设置成json</span></span><br><span class="line">err := viper.ReadRemoteConfig()</span><br><span class="line"></span><br><span class="line">fmt.Println(viper.Get(<span class="string">&quot;port&quot;</span>)) <span class="comment">// 8080</span></span><br><span class="line">fmt.Println(viper.Get(<span class="string">&quot;hostname&quot;</span>)) <span class="comment">// liwenzhou.com</span></span><br></pre></td></tr></table></figure><p><code>Firestore</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.AddRemoteProvider(<span class="string">&quot;firestore&quot;</span>, <span class="string">&quot;google-cloud-project-id&quot;</span>, <span class="string">&quot;collection/document&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;json&quot;</span>)</span><br><span class="line">err := viper.ReadRemoteConfig()</span><br></pre></td></tr></table></figure><h5 id="远程Key-Value存储示例-加密"><a href="#远程Key-Value存储示例-加密" class="headerlink" title="远程Key/Value存储示例-加密"></a>远程Key/Value存储示例-加密</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.AddSecureRemoteProvider(<span class="string">&quot;etcd&quot;</span>,<span class="string">&quot;http://127.0.0.1:4001&quot;</span>,<span class="string">&quot;/config/hugo.json&quot;</span>,<span class="string">&quot;/etc/secrets/mykeyring.gpg&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;json&quot;</span>) <span class="comment">// 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 &quot;json&quot;, &quot;toml&quot;, &quot;yaml&quot;, &quot;yml&quot;, &quot;properties&quot;, &quot;props&quot;, &quot;prop&quot;, &quot;env&quot;, &quot;dotenv&quot;</span></span><br><span class="line">err := viper.ReadRemoteConfig()</span><br></pre></td></tr></table></figure><h5 id="监控etcd中的更改-未加密"><a href="#监控etcd中的更改-未加密" class="headerlink" title="监控etcd中的更改-未加密"></a>监控etcd中的更改-未加密</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> runtime_viper = viper.New()</span><br><span class="line"></span><br><span class="line">runtime_viper.AddRemoteProvider(<span class="string">&quot;etcd&quot;</span>, <span class="string">&quot;http://127.0.0.1:4001&quot;</span>, <span class="string">&quot;/config/hugo.yml&quot;</span>)</span><br><span class="line">runtime_viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一次从远程读取配置</span></span><br><span class="line">err := runtime_viper.ReadRemoteConfig()</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">runtime_viper.Unmarshal(&amp;runtime_conf)</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启一个单独的goroutine一直监控远端的变更</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">5</span>)<span class="comment">//每次请求后延迟一下</span></span><br><span class="line">        <span class="comment">//目前只测试了etcd支持</span></span><br><span class="line">        err := runtime_viper.WatchRemoteConfig()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Errorf(<span class="string">&quot;unable to read remote config: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将新配置反序列化到运行时的配置结构体中。可以借助channel实现一个通知系统更改的信号</span></span><br><span class="line">        runtime_viper.Unmarshal(&amp;runtime_conf)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="从Viper中获取值的方法"><a href="#从Viper中获取值的方法" class="headerlink" title="从Viper中获取值的方法"></a>从Viper中获取值的方法</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Get(key <span class="type">string</span>) : <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">GetBool(key <span class="type">string</span>) : <span class="type">bool</span></span><br><span class="line">GetFloat64(key <span class="type">string</span>) : <span class="type">float64</span></span><br><span class="line">GetInt(key <span class="type">string</span>) : <span class="type">int</span></span><br><span class="line">GetIntSlice(key <span class="type">string</span>) : []<span class="type">int</span></span><br><span class="line">GetString(key <span class="type">string</span>) : <span class="type">string</span></span><br><span class="line">GetStringMap(key <span class="type">string</span>) : <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">GetStringMapString(key <span class="type">string</span>) : <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">GetStringSlice(key <span class="type">string</span>) : []<span class="type">string</span></span><br><span class="line">GetTime(key <span class="type">string</span>) : time.Time</span><br><span class="line">GetDuration(key <span class="type">string</span>) : time.Duration</span><br><span class="line">IsSet(key <span class="type">string</span>) : <span class="type">bool</span></span><br><span class="line">AllSettings() : <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>每一个Get方法找不到值的时候都会返回零值，为了检查特定的键是否存在，应使用<code>IsSet()</code>方法</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.GetString(<span class="string">&quot;logfile&quot;</span>)<span class="comment">//不区分大小写的设置和获取，读取环境变量时区分大小写</span></span><br><span class="line"><span class="keyword">if</span> viper.GetBool(<span class="string">&quot;verbose&quot;</span>) &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;verbose enabled&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="访问嵌套的键"><a href="#访问嵌套的键" class="headerlink" title="访问嵌套的键"></a>访问嵌套的键</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">5799</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;datastore&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">3099</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;warehouse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;198.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">2112</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">GetString(<span class="string">&quot;datastore.metric.host&quot;</span>) <span class="comment">// (返回 “127.0.0.1”)</span></span><br></pre></td></tr></table></figure><p>这遵守上面建立的优先规则；搜索路径将遍历其余配置注册表，直到找到为止。(译注：因为Viper支持从多种配置来源，例如磁盘上的配置文件&gt;命令行标志位&gt;环境变量&gt;远程Key/Value存储&gt;默认值，我们在查找一个配置的时候如果在当前配置源中没找到，就会继续从后续的配置源查找，直到找到为止。)</p><p>例如，在给定此配置文件的情况下，<code>datastore.metric.host</code>和<code>datastore.metric.port</code>均已定义（并且可以被覆盖）。如果另外在默认值中定义了<code>datastore.metric.protocol</code>，Viper也会找到它。</p><p>然而，如果<code>datastore.metric</code>被直接赋值覆盖（被flag，环境变量，<code>set()</code>方法等等…），那么<code>datastore.metric</code>的所有子键都将变为未定义状态，它们被高优先级配置级别“遮蔽”（shadowed）了。</p><p>最后，如果存在与分隔的键路径匹配的键，则返回其值。例如：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;datastore.metric.host&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;host&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        <span class="string">&quot;port&quot;</span>: <span class="number">5799</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;datastore&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;metric&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;host&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;port&quot;</span>: <span class="number">3099</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;warehouse&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;host&quot;</span>: <span class="string">&quot;198.0.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;port&quot;</span>: <span class="number">2112</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetString(<span class="string">&quot;datastore.metric.host&quot;</span>) <span class="comment">// 返回 &quot;0.0.0.0&quot;</span></span><br></pre></td></tr></table></figure><h5 id="提取子树"><a href="#提取子树" class="headerlink" title="提取子树"></a>提取子树</h5><p>从Viper中提取子树。</p><p>例如，<code>viper</code>实例现在代表了以下配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">cache1:</span></span><br><span class="line">    <span class="attr">max-items:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">item-size:</span> <span class="number">64</span></span><br><span class="line">  <span class="attr">cache2:</span></span><br><span class="line">    <span class="attr">max-items:</span> <span class="number">200</span></span><br><span class="line">    <span class="attr">item-size:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>执行后：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">subv := viper.Sub(<span class="string">&quot;app.cache1&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>subv</code>现在就代表：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">max-items:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">item-size:</span> <span class="number">64</span></span><br></pre></td></tr></table></figure><h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><p>可以选择将所有或特定的值解析到结构体、map等</p><p>有两种方法可以做到这一点：</p><ul><li><code>Unmarshal(rawVal interface&#123;&#125;) : error</code></li><li><code>UnmarshalKey(key string, rawVal interface&#123;&#125;) : error</code></li></ul><p>举个例子：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">    Port <span class="type">int</span></span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    PathMap <span class="type">string</span> <span class="string">`mapstructure:&quot;path_map&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> C config</span><br><span class="line"></span><br><span class="line">err := viper.Unmarshal(&amp;C)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;unable to decode into struct, %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要解析的键本身就包含<code>.</code>(默认的键分隔符）的配置，则需要修改分隔符：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v := viper.NewWithOptions(viper.KeyDelimiter(<span class="string">&quot;::&quot;</span>))</span><br><span class="line">v.SetDefault(<span class="string">&quot;chart::values&quot;</span>,<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;ingress&quot;</span>: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;annotations&quot;</span>: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">            <span class="string">&quot;traefik.frontend.rule.type&quot;</span>:                 <span class="string">&quot;PathPrefix&quot;</span>,</span><br><span class="line">            <span class="string">&quot;traefik.ingress.kubernetes.io/ssl-redirect&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">    Chart <span class="keyword">struct</span> &#123;</span><br><span class="line">        Values <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> C config</span><br><span class="line"></span><br><span class="line">v.Unmarshal(&amp;C)</span><br></pre></td></tr></table></figure><h5 id="序列化成字符串"><a href="#序列化成字符串" class="headerlink" title="序列化成字符串"></a>序列化成字符串</h5><p>可能需要将viper中保存的所有设置序列化到一个字符串而不是写入到一个文件中，可以将序列化器与<code>AllSettings()</code>返回的配置一起使用</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">yaml <span class="string">&quot;gopkg.in/yaml.v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">yamlStringSettings</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    c := viper.AllSettings()</span><br><span class="line">    bs,err := yaml.Marshal(c)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;unable to marshal config to YAML: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(bs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="viper示例"><a href="#viper示例" class="headerlink" title="viper示例"></a>viper示例</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    viper.SetConfigFile(<span class="string">&quot;./conf/config.yaml&quot;</span>)<span class="comment">//指定配置文件路径</span></span><br><span class="line">    err := viper.ReadInConfig()<span class="comment">//读取配置信息</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;                    <span class="comment">// 读取配置信息失败</span></span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;Fatal error config file: %s \n&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//监控配置文件变化</span></span><br><span class="line">    viper.WatchConfig()</span><br><span class="line">    </span><br><span class="line">    r := gin.Default</span><br><span class="line">    <span class="comment">// 访问/version的返回值会随配置文件的变化而变化</span></span><br><span class="line">    r.GET(<span class="string">&quot;/version&quot;</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">        c.String(http.StatusOK,viper.GetString(<span class="string">&quot;version&quot;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err := r.Run(</span><br><span class="line">fmt.Sprintf(<span class="string">&quot;:%d&quot;</span>, viper.GetInt(<span class="string">&quot;port&quot;</span>))); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用结构体变量保存配置信息"><a href="#使用结构体变量保存配置信息" class="headerlink" title="使用结构体变量保存配置信息"></a>使用结构体变量保存配置信息</h5><p><code>viper</code>加载完配置信息后使用结构体变量保存配置信息</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/fsnotify/fsnotify&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">Port    <span class="type">int</span>    <span class="string">`mapstructure:&quot;port&quot;`</span></span><br><span class="line">Version <span class="type">string</span> <span class="string">`mapstructure:&quot;version&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Conf = <span class="built_in">new</span>(Config)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    viper.SetConfigFile(<span class="string">&quot;./conf/config.yaml&quot;</span>)<span class="comment">//指定配置文件路径</span></span><br><span class="line">    err := viper.ReadInConfig()<span class="comment">//读取配置信息</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;                           <span class="comment">// 读取配置信息失败</span></span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;Fatal error config file: %s \n&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//将读取的配置信息保存至全局变量Conf</span></span><br><span class="line">    <span class="keyword">if</span> err := viper.Unmarshal(Conf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;unmarshal conf failed, err:%s \n&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//监控配置文件变化</span></span><br><span class="line">    viper.WatchConfig()</span><br><span class="line">    <span class="comment">//配置文件变化后同步到全局变量</span></span><br><span class="line">    viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(in fsnotify.Event)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> err := viper.Unmarshal(Conf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;unmarshal conf failed, err:%s \n&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    r := gin.Default()</span><br><span class="line">    <span class="comment">// 访问/version的返回值会随配置文件的变化而变化</span></span><br><span class="line">    r.GET(<span class="string">&quot;/version&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(http.StatusOK, Conf.Version)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := r.Run(fmt.Sprintf(<span class="string">&quot;:%d&quot;</span>, Conf.Port)); err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取系统性能数据gopsutil库"><a href="#获取系统性能数据gopsutil库" class="headerlink" title="获取系统性能数据gopsutil库"></a>获取系统性能数据gopsutil库</h4><p>Go语言部署简单、性能好的特点非常适合做一些诸如采集系统信息和监控的服务，<a href="https://github.com/shirou/gopsutil">gopsutil</a>库是知名Python库：<a href="https://github.com/giampaolo/psutil">psutil</a>的一个Go语言版本的实现。</p><p><code>安装</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/shirou/gopsutil</span><br></pre></td></tr></table></figure><h5 id="采集CPU相关信息"><a href="#采集CPU相关信息" class="headerlink" title="采集CPU相关信息"></a>采集CPU相关信息</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/shirou/gopsutil/cpu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getCpuInfo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    cpuInfos,err := cpu.Info()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;get cpu info failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> _,ci := <span class="keyword">range</span> cpuInfos &#123;</span><br><span class="line">        fmt.Println(ci)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cpu使用率</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        percent,_ := cpu.Percent(time.second,<span class="literal">false</span>)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;cpu percent:%v\n&quot;</span>, percent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="采集CPU负载信息"><a href="#采集CPU负载信息" class="headerlink" title="采集CPU负载信息"></a>采集CPU负载信息</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/shirou/gopsutil/load&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getCpuLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">info, _ := load.Avg()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/shirou/gopsutil/mem&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mem info</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMemInfo</span><span class="params">()</span></span> &#123;</span><br><span class="line">memInfo, _ := mem.VirtualMemory()</span><br><span class="line">fmt.Printf(<span class="string">&quot;mem info:%v\n&quot;</span>, memInfo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/shirou/gopsutil/host&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// host info</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getHostInfo</span><span class="params">()</span></span> &#123;</span><br><span class="line">hInfo, _ := host.Info()</span><br><span class="line">fmt.Printf(<span class="string">&quot;host info:%v uptime:%v boottime:%v\n&quot;</span>, hInfo, hInfo.Uptime, hInfo.BootTime)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Disk"><a href="#Disk" class="headerlink" title="Disk"></a>Disk</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/shirou/gopsutil/disk&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDiskInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    parts,err := disk.Partitions(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;get Partitions failed, err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> _,part := <span class="keyword">range</span> parts &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;part:%v\n&quot;</span>,part.String())</span><br><span class="line">        diskInfo,_ := disk.Usage(part.Mountpoint)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;disk info:used:%v free:%v\n&quot;</span>,diskInfo.UsedPercent,diskInfo.Free)</span><br><span class="line">    &#125;</span><br><span class="line">    ioStat,_ := disk.IOCounters()</span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> ioStat &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%v:%v\n&quot;</span>, k, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="net-IO"><a href="#net-IO" class="headerlink" title="net IO"></a>net IO</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/shirou/gopsutil/net&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNetInfo</span><span class="params">()</span></span> &#123;</span><br><span class="line">info, _ := net.IOCounters(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">for</span> index, v := <span class="keyword">range</span> info &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v:%v send:%v recv:%v\n&quot;</span>, index, v, v.BytesSent, v.BytesRecv)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取本机IP的两种方式"><a href="#获取本机IP的两种方式" class="headerlink" title="获取本机IP的两种方式"></a>获取本机IP的两种方式</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetLocalIP</span><span class="params">()</span></span> (ip <span class="type">string</span>,err <span class="type">error</span>) &#123;</span><br><span class="line">    addr,err := net.InterfaceAddrs()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> _,addr := <span class="keyword">range</span> addrs &#123;</span><br><span class="line">        ipAddr,ok := addr.(*net.IPNet)</span><br><span class="line">        <span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span> ipAddr.IP.IsLoopback() &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !ipAddr.IP.IsGlobalUnicast() &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> ipAddr.IP.<span class="type">string</span>(),<span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetOutboundIP</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    conn,err := net.Dial(<span class="string">&quot;udp&quot;</span>,<span class="string">&quot;8.8.8.8:80&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">    </span><br><span class="line">    localAddr := conn.LocalAddr().(*net.UDPAddr)</span><br><span class="line">    fmt.Println(localAddr.String())</span><br><span class="line"><span class="keyword">return</span> localAddr.IP.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记</title>
      <link href="/2023/02/03/Java%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/03/Java%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><h4 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK JRE JVM"></a>JDK JRE JVM</h4><ul><li>JDK：Java Development Kit (Java开发者工具，包括 JRE，JVM)</li><li>JRE：Java Runtime Environment (Java运行时环境)</li><li>JVM：Java Virtual Machine (Java虚拟机，跨平台核心)</li></ul><p><img src="https://img-blog.csdnimg.cn/20210427081317290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZsbG93X3dpbmQ=,size_16,color_FFFFFF,t_70"></p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p><img src="https://img-blog.csdnimg.cn/20210427081748164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZsbG93X3dpbmQ=,size_16,color_FFFFFF,t_70"></p><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包</th><th>不同包的子类</th><th>同一个工程</th></tr></thead><tbody><tr><td>private</td><td>Yes</td><td></td><td></td><td></td></tr><tr><td>缺省</td><td>Yes</td><td>Yes</td><td></td><td></td></tr><tr><td>protected</td><td>Yes</td><td>Yes</td><td>Yes</td><td></td></tr><tr><td>public</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr></tbody></table><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><h5 id="什么是构造器"><a href="#什么是构造器" class="headerlink" title="什么是构造器"></a>什么是构造器</h5><p>构造器通常也叫构造方法、构造函数，构造器在每个项目中几乎无处不在。当你new一个对象时，就会调用构造器。构造器格式如下：[修饰符，比如public] 类名 (参数列表，可以没有参数){ //这里不能有return}</p><h5 id="构造器的注意事项"><a href="#构造器的注意事项" class="headerlink" title="构造器的注意事项"></a>构造器的注意事项</h5><ol><li>构造器的名称必须和类名一致</li><li>一个类中可以定义多个构造器，但是构造器的参数列表必须不同（重载）</li><li>若没有定义构造器，则Java系统会提供一个默认的构造器；定义后系统会将默认的构造器收回</li><li>构造器的作用：实例化对象，给对象赋初始值</li><li>代码游离块优先执行</li><li>构造方法中的参数可以根据需要自行定义，参数的不同构造方法构成重载</li><li>子类构造器默认调用父类无参构造器，若父类没有，则必须在子类构造器的第一行通过super关键字指定调用父类哪个构造器</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 构造方法名(参数)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*注意：</span></span><br><span class="line"><span class="comment">  1.构造方法没有返回值类型</span></span><br><span class="line"><span class="comment">  2.构造方法名必须和该类的类名保持一致，大小写都一样</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">()</span>&#123;&#125; <span class="comment">//无参的公有构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">(<span class="type">int</span> i)</span>&#123;&#125; <span class="comment">//参数类型为int的公有构造方法</span></span><br><span class="line">  ......</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">Fu</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span>&#123;&#125; <span class="comment">//无参的公有构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">(<span class="type">int</span> i)</span>&#123;&#125; <span class="comment">//参数类型为int的公有构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">(<span class="type">int</span> i,<span class="type">double</span> d)</span>&#123;&#125; <span class="comment">//参数类型为int和double的公有构造方法</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="构造器的使用"><a href="#构造器的使用" class="headerlink" title="构造器的使用"></a>构造器的使用</h5><ol><li>Demo demo = new Demo(); //这里是调用的是一个无参的构造方法，必须声明在方法中，最好声明在主方法</li><li>super、this关键字后的括号内填写参数</li></ol><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><h5 id="泛型的本质"><a href="#泛型的本质" class="headerlink" title="泛型的本质"></a>泛型的本质</h5><p>参数化类型，即给类型指定一个参数，然后在使用时再指定此参数具体的值，因此这个类型可以在使用时决定了。这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p><h5 id="为什么使用泛型"><a href="#为什么使用泛型" class="headerlink" title="为什么使用泛型"></a>为什么使用泛型</h5><p>泛型在编译的时候检查类型安全，且所有的强制转换都是自动和隐式的，提高代码的重用率</p><ol><li><p>保证了类型的安全性</p><p>在没有泛型之前，从集合中读取到的每一个对象都必须进行类型转换，如果不小心插入了错误的类型对象，在运行时的转换处理就会出错。</p><p><code>没有泛型的情况下使用集合：</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">noGeneric</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">names</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">names.add(<span class="string">&quot;mikechen的互联网架构&quot;</span>);</span><br><span class="line">names.add(<span class="number">123</span>); <span class="comment">//编译正常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>有泛型的情况下使用集合：</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useGeneric</span><span class="params">()</span> &#123;</span><br><span class="line">ArrayList&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">names.add(<span class="string">&quot;mikechen的互联网架构&quot;</span>);</span><br><span class="line">names.add(<span class="number">123</span>); <span class="comment">//编译不通过</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消除强制转换</p><p>以下没有泛型的代码段需要强制转换：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (String) list.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>当重写为使用泛型时，代码不需要强制转换：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(<span class="number">0</span>); <span class="comment">// no cast</span></span><br></pre></td></tr></table></figure></li><li><p>避免了不必要的装箱、拆箱操作，提高程序的性能</p><p>在非泛型编程中，将简单类型作为Object传递时会引起Boxing（装箱）和Unboxing（拆箱）操作，这两个过程都是具有很大开销的；引入泛型后不必进行了，因此效率相对较高。泛型变量固定了类型，使用的时候就已经知道是值类型还是引用类型，避免了不必要的装箱、拆箱操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">object a=<span class="number">1</span>;<span class="comment">//由于是object类型，会自动进行装箱操作。</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> b=(<span class="type">int</span>)a;<span class="comment">//强制转换，拆箱操作。这样一去一来，当次数多了以后会影响程序的运行效率。</span></span><br></pre></td></tr></table></figure><p>使用泛型后：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> T GetValue&lt;T&gt;(T a)</span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">　　<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Main</span><span class="params">()</span></span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">　　<span class="type">int</span> b=GetValue&lt;<span class="type">int</span>&gt;(<span class="number">1</span>);<span class="comment">//使用这个方法的时候已经指定了类型是int，所以不会有装箱和拆箱的操作。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提高了代码的重用性</p></li></ol><h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h5><p><code>定义格式</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1db3182a6d057494269abdce8295bc36.png"></p><p><strong>注意事项：泛型类型必须是引用类型（非基本数据类型）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T：任意类型 type</span><br><span class="line">E：集合中元素的类型 element</span><br><span class="line">K：key-value形式 key</span><br><span class="line">V： key-value形式 value</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/ed46d1a9cd3bd4a129b4cefffb49a7ef.png"></p><ul><li>方法声明中定义的形参只能在该方法里使用，而接口、类声明中定义的类型形参则可以在整个接口、类中使用。当调用fun()方法时，根据传入的实际对象，编译器就会判断出类型形参T所代表的实际类型。</li></ul><p>使用泛型时，前后定义的泛型类型必须保持一致，否则会编译异常；或者不指定类型，则new什么类型都可以。</p><h5 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/cbd36e763feb3d7b14c3820a3457d8bc.png"></p><h5 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h5><p><strong>Java泛型通配符是用于解决泛型之间引用传递问题的特殊语法</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/dd75905a8af533dd3f90a52877e8c84b.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示类型参数可以是任何类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span>&lt;?&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示类型参数必须是A或A的子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span>&lt;T <span class="keyword">extends</span> <span class="title class_">A</span>&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示类型参数必须是A或者是A的超类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span>&lt;T supers A&gt;&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h4><p>**Java反射机制（<code>Java Reflection</code>）是Java语言中一种<code>动态（运行时）访问、检测 &amp; 修改它本身</code>的能力，主要作用是<code>动态（运行时）获取类的完整结构信息 &amp; 调用对象的方法</code>**，即Java运行时通过创建一个类的反射对象，再对类进行相关操作：</p><ul><li>获取对象的成员变量&amp;赋值</li><li>调用对象的方法（含构造方法，有参/无参）</li><li>判断对象所属的类</li></ul><p><strong>一般情况下，我们使用某个类，都会知道这个类，以及要用它来做什么，可以直接通过<code>new</code>实例化创建对象，然后使用这个对象对类进行操作，这个就属于<code>正射</code></strong></p><p><strong>而<code>反射</code>则是一开始并不知道要初始化的是什么类，无法使用<code>new</code>来实例化创建对象，主要是通过JDK提供的反射API来实现，在运行时才知道要操作的是什么类，并且可以获取到类的完整构造以及调用对应的方法</strong></p><p><code>示例</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.justin.java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//一、正射调用过程</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;正射调用过程Student id:&quot;</span> + student.getId());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//二、反射调用过程</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.justin.java.lang.Student&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">studentConstructor</span> <span class="operator">=</span> clz.getConstructor();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">studentObj</span> <span class="operator">=</span> studentConstructor.newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Method</span> <span class="variable">setIdMethod</span> <span class="operator">=</span> clz.getMethod(<span class="string">&quot;setId&quot;</span>,<span class="type">int</span>.class);</span><br><span class="line">        setIdMethod.invoke(studentObj,<span class="number">2</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getIdMethod</span> <span class="operator">=</span> clz.getMethod(<span class="string">&quot;getId&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;正射调用过程Student id:&quot;</span> + getIdMethod.invoke(studentObj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正射调用过程Student id:1</span><br><span class="line">反射调用过程Student id:2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>获取一个类反射对象的主要过程</code></p><ul><li>获取类的<code>Class</code>实例对象</li><li>根据<code>Class</code>实例对象获取<code>Constructor</code>对象</li><li>根据<code>Constructor</code>对象的<code>newInstance</code>方法获取类的反射对象</li></ul><p><strong>获取到类的反射对象后就可以对类进行操作了</strong></p><ul><li>根据<code>Class</code>实例对象获取类的<code>Method</code>对象</li><li>根据<code>Method</code>对象的<code>invoke</code>方法调用到具体类的方法</li></ul><p><img src="https://img-blog.csdnimg.cn/54f7a810b4514da790958ce554d9c826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0p1c3RpblFpbg==,size_16,color_FFFFFF,t_70"></p><h5 id="反射机制使用场景"><a href="#反射机制使用场景" class="headerlink" title="反射机制使用场景"></a>反射机制使用场景</h5><p><img src="https://img-blog.csdnimg.cn/3a790d5d55bf44b1854eedb953c583d3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0p1c3RpblFpbg==,size_16,color_FFFFFF,t_70"></p><h6 id="实现简单工厂模式"><a href="#实现简单工厂模式" class="headerlink" title="实现简单工厂模式"></a>实现简单工厂模式</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实现简单工程模式的核心是创建一个工厂类，并且在内部定义了一个静态方法，传入不同的参数标识通过switch进行分组，通过new实例化创建不同的子类对象返回~</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>示例</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建抽象产品类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建具体产品类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了产品A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductB</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了产品B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductC</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了产品C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建简单工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现简单工厂模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pName 产品标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回具体的产品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title function_">createProduct</span><span class="params">(String pName)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (pName)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductC</span>();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用简单工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleFactory.createProduct(<span class="string">&quot;A&quot;</span>).show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有A这款产品，无法生产~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleFactory.createProduct(<span class="string">&quot;B&quot;</span>).show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有B这款产品，无法生产~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleFactory.createProduct(<span class="string">&quot;C&quot;</span>).show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有C这款产品，无法生产~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleFactory.createProduct(<span class="string">&quot;D&quot;</span>).show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有D这款产品，无法生产~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="简单工厂模式的优化"><a href="#简单工厂模式的优化" class="headerlink" title="简单工厂模式的优化"></a>简单工厂模式的优化</h6><ul><li><p>弊端：</p><ul><li>操作成本高：每增加一个接口的子类，必须修改工厂类的逻辑</li><li>系统复杂性提高：每增加一个接口的子类，都必须向工厂类添加逻辑</li></ul></li><li><p>优化思路：通过传入<code>子类全局定名（包名+类名）</code> 动态的创建不同的<code>子类对象实例</code>，从而使得在不增加产品接口子类和修改工厂类的逻辑的情况下还能实现了工厂类对子类实例对象的统一创建</p></li><li><p>优化步骤：</p><ul><li><p>创建工厂类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title function_">getInstance</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">realProduct</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">pClass</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">            realProduct = (Product) pClass.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> realProduct;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>调用工厂类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Product</span> <span class="variable">productA</span> <span class="operator">=</span> Factory.getInstance(<span class="string">&quot;com.justin.java.lang.ProductA&quot;</span>);</span><br><span class="line">            productA.show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有A这款产品，无法生产~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Product</span> <span class="variable">productB</span> <span class="operator">=</span> Factory.getInstance(<span class="string">&quot;com.justin.java.lang.ProductB&quot;</span>);</span><br><span class="line">            productB.show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有B这款产品，无法生产~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Product</span> <span class="variable">productC</span> <span class="operator">=</span> Factory.getInstance(<span class="string">&quot;com.justin.java.lang.ProductC&quot;</span>);</span><br><span class="line">            productC.show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有C这款产品，无法生产~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Product</span> <span class="variable">productD</span> <span class="operator">=</span> Factory.getInstance(<span class="string">&quot;com.justin.java.lang.ProductD&quot;</span>);</span><br><span class="line">            productD.show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有D这款产品，无法生产~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="String、StringBuffer和StringBuilder的区别"><a href="#String、StringBuffer和StringBuilder的区别" class="headerlink" title="String、StringBuffer和StringBuilder的区别"></a>String、StringBuffer和StringBuilder的区别</h4><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><p>string类是一个不可变类，一旦创建包括这个对象中的字符序列是不可改变的，直至对象被销毁</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">a = <span class="string">&quot;456&quot;</span>;</span><br><span class="line"><span class="comment">// 打印出来的a为456</span></span><br><span class="line">System.out.println(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190616102116187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzeHlwcg==,size_16,color_FFFFFF,t_70"></p><p>再次给a赋值时，不是对原来堆中实例对象重新赋值，而是生成新的示例对象并指向该对象，之前的实例对象任然存在，如果没有被再次引用，则会被垃圾回收。</p><h5 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h5><p>StringBuffer对象代表一个字符序列可变的字符串，通过append()、insert()、reverse()、setCharAt()、setLength()等方法可以改变该字符串对象的字符序列，若生成了最终想要的字符串，可以调用toString()方法将其转换为String对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">b.append(<span class="string">&quot;456&quot;</span>);</span><br><span class="line"><span class="comment">// b打印结果为：123456</span></span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190616102134212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzeHlwcg==,size_16,color_FFFFFF,t_70"></p><p>StringBuffer对象没有重新生成一个对象，可以在原来对象中连接新的字符串。</p><h5 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h5><p>StringBuilder类也代表可变字符串对象，和StringBuffer基本相似，两个类的构造器方法基本相同，不同的是：<strong>StringBuffer是线程安全的，而StringBuilder则没有实现线程安全功能，所以性能略高。</strong></p><h5 id="StringBuffer是如何实现线程安全的呢？"><a href="#StringBuffer是如何实现线程安全的呢？" class="headerlink" title="StringBuffer是如何实现线程安全的呢？"></a>StringBuffer是如何实现线程安全的呢？</h5><p>StringBuffer类中实现的方法：</p><p><img src="https://img-blog.csdnimg.cn/20190616102221263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzeHlwcg==,size_16,color_FFFFFF,t_70"></p><p>StringBuilder类中实现的方法：</p><p><img src="https://img-blog.csdnimg.cn/2019061610223156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzeHlwcg==,size_16,color_FFFFFF,t_70"></p><h5 id="Java9的改进"><a href="#Java9的改进" class="headerlink" title="Java9的改进"></a>Java9的改进</h5><p>Java9前采用char[]数组保存字符，字符串每个字符占2字节，Java9字符串采用byte[]数组再加一个encoding-flag字段保存字符，因此字符串每个字符只占1个字节，所以更节省空间，字符串功能方法也没有受到影响。</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><h5 id="位或运算符"><a href="#位或运算符" class="headerlink" title="|=位或运算符"></a>|=位或运算符</h5><p><code>|= 运算符和 += 这一类的运算符一样，拆解开就是 a = a | b</code></p><p>运算规则：两数转为二进制从高位开始比较，只要有一个数为1则为1</p><h5 id="amp-位与运算符"><a href="#amp-位与运算符" class="headerlink" title="&amp;=位与运算符"></a>&amp;=位与运算符</h5><p><code>&amp;= 运算符和 += 这一类的运算符一样，拆解开就是 a = a &amp; b</code></p><p>运算规则：两数转为二进制从高位开始比较，两个数都为1则为1</p><h5 id="位异或运算"><a href="#位异或运算" class="headerlink" title="^=位异或运算"></a>^=位异或运算</h5><p><code>^= 运算符和 += 这一类的运算符一样，拆解开就是 a = a^b</code></p><p>运算规则：两个数转为二进制，然后从高位开始比较，相同为0，不同为1</p><h5 id="位非运算符"><a href="#位非运算符" class="headerlink" title="~=位非运算符"></a>~=位非运算符</h5><p>运算规则：位为0则结果为1，位为1则结果为0</p><h3 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><p> JavaWeb 中，处理请求和发送响应的过程是由 Servlet 来完成，且其是为了解决实现动态页面而衍生的。</p><h5 id="Tomcat-和-Servlet-的关系"><a href="#Tomcat-和-Servlet-的关系" class="headerlink" title="Tomcat 和 Servlet 的关系"></a>Tomcat 和 Servlet 的关系</h5><p>Tomcat 是Web应用服务器，是一个Servlet/JSP容器。 Tomcat 作为 Servlet 容器，负责处理客户请求,把请求传送给 Servlet，并将 Servlet 的响应传送回客户，而 Servlet 是一种运行在支持 Java 语言的服务器上的组件。</p><h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><p>JSP（JavaServerPages）是一种动态网页开发技术。即在传统的HTML文件中插入Java代码和JSP标签，后缀名为.jsp。JSP与PHP、ASP等语言类似，都运行在服务端。通常返回给客户端的就是一个HTML文件，因此只要有浏览器就能查看JSP页面。JSP使用JSP标签在HTML网页中插入Java代码，是Servlet的扩展。</p><ul><li>Tomcat 将 Http 请求文本接收并解析，然后封装成 HttpServletRequest 类型的 request 对象，所有的 Http 头数据可以通过request 对象调用对应的方法查询到。</li><li>Tomcat 会将要响应的信息封装为 HttpServletResponse 类型的response 对象，设置 response 属性可以控制输出到浏览器的内容，然后将 response 交给 Tomcat，Tomcat 就会将其变成响应文本的格式发送给浏览器。</li></ul><h5 id="ActionContext、ServletContext、pageContext的区别"><a href="#ActionContext、ServletContext、pageContext的区别" class="headerlink" title="ActionContext、ServletContext、pageContext的区别"></a>ActionContext、ServletContext、pageContext的区别</h5><h6 id="ActionContext"><a href="#ActionContext" class="headerlink" title="ActionContext"></a>ActionContext</h6><p>当前Action的上下文环境，通过其可以获取到request、session、ServletContext等与Action有关的对象的引用</p><h6 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h6><p>域对象，即当前web应用的上下文</p><h6 id="pageContext"><a href="#pageContext" class="headerlink" title="pageContext"></a>pageContext</h6><p>可以通过pageContext获取其他域对象的应用，其也是一个域对象，作用范围为当前页面，当前页面结束时销毁</p><h4 id="JSP九大内置对象和四大作用域"><a href="#JSP九大内置对象和四大作用域" class="headerlink" title="JSP九大内置对象和四大作用域"></a>JSP九大内置对象和四大作用域</h4><h5 id="JSP的原理"><a href="#JSP的原理" class="headerlink" title="JSP的原理"></a>JSP的原理</h5><p><strong>jsp在编译后会转换为java类，在本质上就是一个Servlet</strong>，当浏览器访问<a href="http://localhost:8080/index.jsp%E3%80%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E7%8E%B0%E5%90%8E%E7%BC%80%E4%B8%BA.jsp%EF%BC%8C%E5%AE%83%E4%BC%9A%E6%A0%B9%E6%8D%AE%E8%B7%AF%E5%BE%84%E6%89%BE%E5%88%B0index.jsp%E2%BD%82%E4%BB%B6%EF%BC%8C%E4%BC%9A%E5%B0%86index.jsp%E7%BF%BB%E8%AF%91%E6%88%90index_jsp.java%E2%BD%82%E4%BB%B6%EF%BC%8C%E5%AF%B9%E8%BF%99%E4%B8%AAjava%E2%BD%82%E4%BB%B6%E8%BF%9B%E2%BE%8F%E7%BC%96%E8%AF%91%EF%BC%8C%E4%BA%A7%E2%BD%A3%E2%BC%80%E4%B8%AAindex_jsp.class%E2%BD%82%E4%BB%B6%EF%BC%8C%E5%B0%86class%E2%BD%82%E4%BB%B6%E5%8A%A0%E8%BD%BD%E8%BF%90%E2%BE%8F%E3%80%82">http://localhost:8080/index.jsp。服务器发现后缀为.jsp，它会根据路径找到index.jsp⽂件，会将index.jsp翻译成index_jsp.java⽂件，对这个java⽂件进⾏编译，产⽣⼀个index_jsp.class⽂件，将class⽂件加载运⾏。</a></p><h5 id="JSP九大内置对象"><a href="#JSP九大内置对象" class="headerlink" title="JSP九大内置对象"></a>JSP九大内置对象</h5><p><code>page、config、request、response、session、application、out、pageContext 、exception</code></p><h6 id="page页面对象"><a href="#page页面对象" class="headerlink" title="page页面对象"></a><strong>page页面对象</strong></h6><p>代表当前JSP页面，是当前JSP编译后的Servlet类的对象。相当于this</p><h6 id="config配置对象"><a href="#config配置对象" class="headerlink" title="config配置对象"></a><strong>config配置对象</strong></h6><p>主要作用是取得服务器的配置信息。通过 pageConext对象的 getServletConfig() ⽅法可以获取⼀个config对象。当⼀个Servlet 初始化时，容器把某些信息通过config对象传递给这个Servlet。</p><h6 id="request请求对象"><a href="#request请求对象" class="headerlink" title="request请求对象"></a><strong>request请求对象</strong></h6><p>request对象是HttpServletRequest类型的对象。该对象代表了客户端的请求消息，主要用于接收通过HTTP协议传送到服务器的数据（包括请求头消息，请求方式，请求参数等）。request对象的作用域为一次请求(一次请求可能包含一个页面，也可能包含多个页面)。</p><h6 id="response响应对象"><a href="#response响应对象" class="headerlink" title="response响应对象"></a><strong>response响应对象</strong></h6><p>response是HttpServletResponse类型的对象，代表的是客户端的响应，主要将JSP容器处理过的对象传回客户端。response对象作用域只在JSP页面内有效。</p><h6 id="session会话对象"><a href="#session会话对象" class="headerlink" title="session会话对象"></a><strong>session会话对象</strong></h6><p>session 对象是由服务器⾃动创建的与⽤户请求相关的对象。服务器为每个⽤户⽣成⼀个session对象，⽤于保存该⽤户的信息，跟踪⽤户的操作状态。session对象内部使⽤Map类来保存数据，因此保存数据的格式为“Key/value”。 session对象的value可以使复杂的对象类型，⽽不仅仅局限字符串类型。</p><h6 id="application全局对象"><a href="#application全局对象" class="headerlink" title="application全局对象"></a><strong>application全局对象</strong></h6><p>application对象可以将信息保存在服务器中，直到服务器关闭，否则application对象中保存的信息会在整个应用中都有效。与session对象相比，application对象生命周期更长，类似系统的 “全局变量”ServletContext。</p><h6 id="out输出对象"><a href="#out输出对象" class="headerlink" title="out输出对象"></a><strong>out输出对象</strong></h6><p>out 对象用于输出JSP页面的信息，且管理应⽤服务器上的输出缓冲区。在使⽤ out 对象输出数据时，可以对数据缓冲区进⾏操作，及时清除缓冲区中残余数据，为其他输出让出缓冲空间。数据输出完毕后，要及时关闭输出流。</p><h6 id="pageContext页面上下文对象"><a href="#pageContext页面上下文对象" class="headerlink" title="pageContext页面上下文对象"></a><strong>pageContext页面上下文对象</strong></h6><p>pageContext 对象的作⽤是取得任何范围的参数，通过它可以获取 JSP⻚⾯的out、request、reponse、session、application 等对象。pageContext对象的创建和初始化都是由容器来完成的，在JSP⻚⾯可以直接使⽤pageContext对象。</p><h6 id="exception异常对象"><a href="#exception异常对象" class="headerlink" title="exception异常对象"></a><strong>exception异常对象</strong></h6><p>表示发生异常对象，类型 Throwable。作用域：page。</p><h5 id="JSP四大作用域"><a href="#JSP四大作用域" class="headerlink" title="JSP四大作用域"></a>JSP四大作用域</h5><p><strong>JSP的四大作用域：pageContext、request、session、application</strong>。<br><strong>这四个是因为其能存储数据，所以是jsp的四大作用域</strong></p><h6 id="pageContext-1"><a href="#pageContext-1" class="headerlink" title="pageContext"></a>pageContext</h6><p>把变量放到pageContext里，则它的作用域是page，变量只能在当前页面生效。</p><h6 id="request"><a href="#request" class="headerlink" title="request"></a>request</h6><p>代表变量能在一次请求中生效，一次请求可能包含一个或多个页面，不同页面的跳转中都可以使用该变量。</p><h6 id="session"><a href="#session" class="headerlink" title="session"></a>session</h6><p>代表变量能在一次会话中生效，所谓当前会话，就是指从用户打开浏览器开始，到用户关闭浏览器这中间的过程。</p><h6 id="application"><a href="#application" class="headerlink" title="application"></a>application</h6><p>代表变量能在不同服务器下的都能够使用。列如：你用一个账号在谷歌游览器登录的CSDN后，在360，火狐…都能够登录，不用重复输入账号密码。只有当关闭了服务器或者手工删除了，才需要重新输入账号登录。</p><h4 id="Jar包和War包"><a href="#Jar包和War包" class="headerlink" title="Jar包和War包"></a>Jar包和War包</h4><p><code>JAR（Java Archive，Java归档文件）</code>与平台无关的文件格式，允许将许多文件组合压缩成一个压缩文件，JavaSE程序可以打包成Jar包；JAR文件格式以流行的ZIP文件格式为基础；即Jar包是已经完成的一些类，然后将其打包，可以将这些Jar包引入项目中。直接使用这些Jar包中的类和属性；Jar包一般放在lib目录下</p><p><code>WAR</code>是一个可以直接运行的web模块，常用于网站，打成包部署到容器中；以Tomcat为例，将War包放置在\webapps\目录下，然后启动Tomcat，该包会自动解压，相当于发布。</p><p>War包文件按照一定目录结构组织，根据其根目录下包含有html和jsp文件，或者包含有这两种文件的目录，另外还有WEB-INF目录，通常WEB-INF目录下含有一个web.xml文件和一个classes目录；web.xml是应用的配置文件，而classes目录则包含编译好的servlet类和jsp，或servlet所依赖的其他类（如JavaBean），通常这些所依赖的类也可以打包成jar包放在WEB-INF下的lib目录下，一个war包可以理解为是一个web项目，里面是项目的所有东西。</p><h5 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h5><p>WAR文件代表了一个Web应用程序，JAR是类的归档文件</p><p>WAR文件和JAR文件的文件格式是一样的，并且都是使用jar命令来创建</p><p>在开发阶段不适合使用WAR文件，因为在开发阶段，经常需要添加或删除Web应用程序的内容，更新 Servlet类文件，而每一次改动后，重新建立WAR文件将是一件浪费时间的事情。在产品发布阶段，使用WAR文件是比较合适的，因为在这个时候，几乎不需要再做什么改动了</p><p>在开发阶段，通常将Servlet源文件放到Web应用程序目录的src子目录下，以便和Web资源文件区分。在建立WAR文件时，只需要将src目录从Web应用程序目录中移走，就可以打包了</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud笔记</title>
      <link href="/2023/02/03/springcloud%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/03/springcloud%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><h5 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h5><p>提倡将单一的应用程序划分成一组小的服务，每个服务运行在自己独立的进程内；服务间互相协调，互相配置，采用轻量级的通信机制（HTTP）互相沟通</p><p>微服务化的核心即将传统的一站式应用拆分成一个一个服务，一个服务做一件事且能够自行单独启动或销毁，拥有自己独立的数据库，实现解耦</p><h5 id="微服务的优缺点"><a href="#微服务的优缺点" class="headerlink" title="微服务的优缺点"></a>微服务的优缺点</h5><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>是松耦合的，无论在开发阶段或部署阶段都是独立的</li><li>能够使用不同语言开发</li><li>易于和第三方集成</li><li>微服务易于被一个开发人员理解，修改和维护</li><li>允许利用和融合最新技术</li><li><strong>微服务只是业务逻辑的代码，不会和HTML，CSS，或其他的界面混合</strong></li><li><strong>每个微服务都有存储能力，可以有自己的数据库，也可以有统一的数据库</strong></li></ul><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ul><li>要处理分布式系统的复杂性</li><li>随着服务的增加，运维的压力也在增大</li><li>系统部署依赖问题</li><li>服务间通信成本问题</li><li>数据一致性问题</li><li>系统集成测试问题</li><li>性能和监控问题</li></ul><h5 id="微服务相关技术栈"><a href="#微服务相关技术栈" class="headerlink" title="微服务相关技术栈"></a>微服务相关技术栈</h5><table><thead><tr><th>微服务技术条目</th><th>落地技术</th></tr></thead><tbody><tr><td>服务开发</td><td>SpringBoot、Spring、SpringMVC等</td></tr><tr><td>服务配置与管理</td><td>Netfix公司的Archaius、阿里的Diamond等</td></tr><tr><td>服务注册与发现</td><td>Eureka、Consul、Zookeeper等</td></tr><tr><td>服务调用</td><td>Rest、PRC、gRPC</td></tr><tr><td>服务熔断器</td><td>Hystrix、Envoy等</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx等</td></tr><tr><td>服务接口调用(客户端调用服务的简化工具)</td><td>Fegin等</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMQ等</td></tr><tr><td>服务配置中心管理</td><td>SpringCloudConfig、Chef等</td></tr><tr><td>服务路由(API网关)</td><td>Zuul等</td></tr><tr><td>服务监控</td><td>Zabbix、Nagios、Metrics、Specatator等</td></tr><tr><td>全链路追踪</td><td>Zipkin、Brave、Dapper等</td></tr><tr><td>数据流操作开发包</td><td>SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息)</td></tr><tr><td>时间消息总栈</td><td>SpringCloud Bus</td></tr><tr><td>服务部署</td><td>Docker、OpenStack、Kubernetes等</td></tr></tbody></table><h4 id="SpringCloud-Rest学习环境搭建：服务提供者"><a href="#SpringCloud-Rest学习环境搭建：服务提供者" class="headerlink" title="SpringCloud Rest学习环境搭建：服务提供者"></a>SpringCloud Rest学习环境搭建：服务提供者</h4><h5 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h5><p>父工程为springcloud，其下有多个子mudule</p><p><img src="https://s1.ax1x.com/2023/02/03/pSsiikt.png"></p><p>springcloud-consumer-dept-80访问springcloud-provider-dept-8001下的controller使用REST方式，如<strong>DeptConsumerController.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptConsumerController</span> &#123;</span><br><span class="line">    <span class="comment">//消费者不应有service层，直接调用RestTemplate ... 注册到Spring中</span></span><br><span class="line">    <span class="comment">//使用RestTemplete先需要放入Spring容器中</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//服务提供方地址前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REST_URL_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="comment">// postForObject(服务提供方地址(接口),参数实体,返回类型.class)</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/add&quot;</span>, dep, Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// getForObject(服务提供方地址(接口),返回类型.class)</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/get/&quot;</span> + id, Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/list&quot;</span>, List.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ConfigBean.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigBean</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springcloud-provider-dept-8001的dao接口调用springcloud-api模块下的pojo，可使用在springcloud-provider-dept-8001的pom文件导入springcloud-api模块依赖的方式：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--我们需要拿到实体类，所以要配置api module--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.haust<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Eureka服务注册中心"><a href="#Eureka服务注册中心" class="headerlink" title="Eureka服务注册中心"></a>Eureka服务注册中心</h4><p>Eureka采用了C-S的架构设计，系统中的其他微服务，使用Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行</p><p><img src="https://s1.ax1x.com/2023/02/03/pSsi90A.png"></p><ul><li>和Dubbo架构对比</li></ul><p><img src="https://s1.ax1x.com/2023/02/03/pSsikff.png"></p><h5 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h5><p><code>eureka-server</code></p><ol><li><p>springcloud-eureka-7001 模块建立</p></li><li><p>pom.xml 配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导包~--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入Eureka Server依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">instance:</span></span><br><span class="line"><span class="comment"># Eureka服务端的实例名字</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># fetch-registry如果为false,则表示自己为注册中心,客户端的化为 ture</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Eureka监控页面~</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// @EnableEurekaServer 服务端的启动类，可以接受别人注册进来~</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServer_7001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动成功后访问 <a href="http://localhost:7001/">http://localhost:7001/</a> 得到以下页面</p><p><img src="https://s1.ax1x.com/2023/02/03/pSsiFtP.png"></p></li></ol><p><code>euraka-client</code></p><p><strong>调整之前创建的springlouc-provider-dept-8001</strong></p><ol><li><p>导入Eureca依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Eureka依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application中新增Eureca配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Eureka配置：配置服务注册中心地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">client:</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line"><span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>为主启动类添加@EnableEurekaClient注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// @EnableEurekaClient 开启Eureka客户端注解，在服务启动后自动向注册中心注册服务</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptProvider_8001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>先启动7001服务端后启动8001客户端，访问监控页<a href="http://localhost:7001/">http://localhost:7001/</a> </p><p><img src="https://s1.ax1x.com/2023/02/03/pSsipmd.png"></p><p>若停掉springcloud-provider-dept-8001 等<strong>30s</strong>后 监控会开启保护机制：</p><p><img src="https://s1.ax1x.com/2023/02/03/pSsiEp8.png"></p></li></ol><h5 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h5><p><strong>某时刻某微服务不可用，eureka不立即清理，依旧会对该微服务信息进行保存</strong></p><ul><li>默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（<strong>默认是90秒</strong>），但是，如果短时间内丢失大量的实例心跳，便会触发eureka server的自我保护机制，比如在开发测试时，需要频繁地重启微服务实例，但是我们很少会把eureka server一起重启（因为在开发过程中不会修改eureka注册中心）；</li><li>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务</li><li>但是我们在开发测试阶段，需要频繁地重启发布，若触发了保护机制，则旧的服务实例未被删除，这时请求有可能跑到旧的实例中，而该实例已经关闭了，这就导致请求错误，影响开发测试。所以，在开发测试阶段，我们可以把自我保护模式关闭，只需在eureka server配置文件中加上如下配置即可：eureka.server.enable-self-preservation=false【不推荐关闭自我保护机制】</li></ul><h5 id="集群环境配置"><a href="#集群环境配置" class="headerlink" title="集群环境配置"></a>集群环境配置</h5><p><img src="https://s1.ax1x.com/2023/02/03/pSsiV1S.png"></p><ol><li><p>初始化</p><p>新建springcloud-eureka-7002、springcloud-eureka-7003 模块</p><ol><li><p>为pom.xml添加依赖 (与springcloud-eureka-7001相同)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导包~--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入Eureka Server依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>application.yml配置(与springcloud-eureka-7001相同)</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># Eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># fetch-registry如果为false,则表示自己为注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 监控页面~</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>主启动类(与springcloud-eureka-7001相同)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// @EnableEurekaServer 服务端的启动类，可以接受别人注册进来~</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServer_7003</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7003.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>集群成员相互关联</p><p>配置一些自定义本机名字，找到本机hosts文件并打开</p><p><img src="https://s1.ax1x.com/2023/02/03/pSsieXQ.png"></p><p>修改application.yml的配置，如图为springcloud-eureka-7001配置，springcloud-eureka-7002/springcloud-eureka-7003同样分别修改为其对应的名称即可</p><p><img src="https://s1.ax1x.com/2023/02/03/pSsiZ6g.png"></p><p>在集群中使springcloud-eureka-7001关联springcloud-eureka-7002、springcloud-eureka-7003</p><p>完整的springcloud-eureka-7001下的application.yml如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#Eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#fetch-registry如果为false,则表示自己为注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#监控页面~</span></span><br><span class="line">      <span class="comment">#重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span></span><br><span class="line">      <span class="comment"># 单机： defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      <span class="comment"># 集群（关联）：7001关联7002、7003</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>springcloud-eureka-7002和springcloud-eureka-7003的配置方式类似</p><p>通过springcloud-provider-dept-8001下的yml配置文件，修改<strong>Eureka配置：配置服务注册中心地址</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Eureka配置：配置服务注册中心地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 注册中心地址7001-7003</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept-8001</span> <span class="comment">#修改Eureka上的默认描述信息</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样模拟集群就搭建好了，可以把一个项目挂载到三个服务器上了</p><p><img src="https://s1.ax1x.com/2023/02/03/pSsinmj.png"></p></li></ol><h5 id="对比和Zookeeper的区别"><a href="#对比和Zookeeper的区别" class="headerlink" title="对比和Zookeeper的区别"></a>对比和Zookeeper的区别</h5><h6 id="回顾CAP和ACID原则"><a href="#回顾CAP和ACID原则" class="headerlink" title="回顾CAP和ACID原则"></a>回顾CAP和ACID原则</h6><p>RDBMS (MySQL\Oracle\sqlServer) ===&gt; ACID</p><p>NoSQL (Redis\MongoDB) ===&gt; CAP</p><ul><li><strong>ACID是什么？</strong><ul><li>A (Atomicity) 原子性</li><li>C (Consistency) 一致性</li><li>I (Isolation) 隔离性</li><li>D (Durability) 持久性</li></ul></li><li><strong>CAP是什么?</strong><ul><li>C (Consistency) 强一致性</li><li>A (Availability) 可用性</li><li>P (Partition tolerance) 分区容错性</li></ul></li><li><strong>CAP理论的核心</strong><ul><li>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性</li><li>根据CAP原理，将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类<ul><li>CA：单点集群，满足一致性，可用性的系统，通常可扩展性较差</li><li>CP：满足一致性，分区容错的系统，通常性能不是特别高</li><li>AP：满足可用性，分区容错的系统，通常可能对一致性要求低一些</li></ul></li></ul></li><li>Zookeeper 保证的是 CP —&gt; 满足一致性；当向注册中心查询服务列表时，可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。但当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30-120s，且选举期间整个zookeeper集群是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因为网络问题使得zookeeper集群失去master节点是较大概率发生的事件，虽然服务最终能够恢复，但是，漫长的选举时间导致注册长期不可用，是不可容忍的。</li><li>Eureka 保证的是 AP —&gt; 满足可用性；Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在，就能保住注册服务的可用性，只不过查到的信息可能不是最新的，除此之外，Eureka还有之中自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：<ul><li>Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务</li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上 (即保证当前节点依然可用)</li><li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</li></ul></li></ul><h4 id="Ribbon：负载均衡（基于客户端）"><a href="#Ribbon：负载均衡（基于客户端）" class="headerlink" title="Ribbon：负载均衡（基于客户端）"></a>Ribbon：负载均衡（基于客户端）</h4><h5 id="负载均衡简单分类"><a href="#负载均衡简单分类" class="headerlink" title="负载均衡简单分类"></a>负载均衡简单分类</h5><h6 id="集中式LB"><a href="#集中式LB" class="headerlink" title="集中式LB"></a>集中式LB</h6><p>在服务的提供方和消费方之间使用独立的LB设施，如Nginx，由该设施负责将访问请求通过某种策略转发至提供方</p><h6 id="进程式LB"><a href="#进程式LB" class="headerlink" title="进程式LB"></a>进程式LB</h6><ul><li>将LB逻辑集成到消费方，消费方从服务注册中心获知哪些地址可用，然后自己再从这些地址中选出一个合适的服务器</li><li><strong>Ribbon属于进程内LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址</li></ul><h5 id="集成Ribbon"><a href="#集成Ribbon" class="headerlink" title="集成Ribbon"></a>集成Ribbon</h5><p>springcloud-consumer-dept-80向pom.xml中添加Ribbon和Eureka依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Ribbon--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Eureka: Ribbon需要从Eureka服务中心获取要拿什么--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在application.yml文件中配置Eureka</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">client:</span></span><br><span class="line"><span class="attr">register-with-eureka:</span> <span class="literal">false</span><span class="comment"># 不向Eureka注册自己</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line"><span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主启动类加上@EnableEurekaClient注解，开启Eureka</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Ribbon和Eureka整合后，客户端可以直接调用，不用关心IP地址和端口号</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span><span class="comment">//开启Eureka客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptConsumer_80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义Spring配置类：ConfigBean.java配置负载均衡实现RestTemplate</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigBean</span> &#123;</span><br><span class="line">    <span class="meta">@LoadBalanced</span><span class="comment">//配置负载均衡实现RestTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改conroller：DeptConsumerController.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Ribbon:我们这里的地址，应该是一个变量，通过服务名来访问</span></span><br><span class="line"><span class="comment">//private static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REST_URL_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;http://SPRINGCLOUD-PROVIDER-DEPT&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="使用Ribbon实现负载均衡"><a href="#使用Ribbon实现负载均衡" class="headerlink" title="使用Ribbon实现负载均衡"></a>使用Ribbon实现负载均衡</h5><p><img src="https://s1.ax1x.com/2023/02/03/pSsir9K.png"></p><ol><li>新建两个服务提供者Moudle：springcloud-provider-dept-8003、springcloud-provider-dept-8002</li><li>参照springcloud-provider-dept-8001 依次为另外两个Moudle添加pom.xml依赖 、resourece下的mybatis和application.yml配置，Java代码</li><li>启动所有服务测试(根据自身电脑配置决定启动服务的个数)，访问<a href="http://eureka7001.com:7002/%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C">http://eureka7001.com:7002/查看结果</a></li></ol><p><img src="https://s1.ax1x.com/2023/02/03/pSsiBh6.png"></p><p>多次测试访问<a href="http://localhost/consumer/dept/list%E5%8F%91%E7%8E%B0%E9%9A%8F%E6%9C%BA%E6%9F%90%E4%B8%AA%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E6%8F%90%E4%BE%9B%E6%9C%8D%E5%8A%A1%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%E5%8F%AB%E5%81%9A%E8%BD%AE%E8%AF%A2%EF%BC%8C%E8%BD%AE%E8%AF%A2%E7%AE%97%E6%B3%95%E5%9C%A8SpringCloud%E4%B8%AD%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E3%80%82">http://localhost/consumer/dept/list发现随机某个服务提供者提供服务，这种情况叫做轮询，轮询算法在SpringCloud中可以自定义。</a></p><h4 id="Feign：负载均衡（基于服务端）"><a href="#Feign：负载均衡（基于服务端）" class="headerlink" title="Feign：负载均衡（基于服务端）"></a>Feign：负载均衡（基于服务端）</h4><p>Feign默认集成了Ribbon，与Ribbon不同的是，通过Feign只需要定义服务绑定接口且以声明式的方法</p><p>Feign和Ribbon二者对比，前者显现出面向接口编程特点，代码看起来更清爽，而且Feign调用方式更符合SSM或者SprngBoot项目时，Controller层调用Service层的编程习惯</p><h4 id="Hystrix：服务熔断"><a href="#Hystrix：服务熔断" class="headerlink" title="Hystrix：服务熔断"></a>Hystrix：服务熔断</h4>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文档</title>
      <link href="/2023/01/30/hexo%E6%96%87%E6%A1%A3/"/>
      <url>/2023/01/30/hexo%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">网站标题</td></tr><tr><td align="left"><code>subtitle</code></td><td align="left">网站副标题</td></tr><tr><td align="left"><code>description</code></td><td align="left">网站描述</td></tr><tr><td align="left"><code>keywords</code></td><td align="left">网站的关键词，支持多个关键词</td></tr><tr><td align="left"><code>author</code></td><td align="left">作者</td></tr><tr><td align="left"><code>language</code></td><td align="left">网站使用的语言</td></tr><tr><td align="left"><code>timezone</code></td><td align="left">网站时区，Hexo 默认使用电脑的时区</td></tr></tbody></table><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><h5 id="new"><a href="#new" class="headerlink" title="new"></a>new</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章，如果没有设置<code>layout</code>，则默认使用<code>_config.yml</code>中的<code>default_layout</code>参数代替</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题决定文章文件的路径。对于独立页面，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page --path about/me &quot;About me&quot;</span><br></pre></td></tr></table></figure><h6 id="布局（layout）"><a href="#布局（layout）" class="headerlink" title="布局（layout）"></a>布局（layout）</h6><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code></p><table><thead><tr><th align="left">布局</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left"><code>post</code></td><td align="left"><code>source/_posts</code></td></tr><tr><td align="left"><code>page</code></td><td align="left"><code>source</code></td></tr><tr><td align="left"><code>draft</code></td><td align="left"><code>source/_drafts</code></td></tr></tbody></table><p>设置为草稿布局时可以通过<code>publish</code>命令将草稿移动到<code>source/_post</code>文件夹中，草稿默认不会显示在页面中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h6 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h6><p>新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内对应的文件来建立，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure><p>执行该指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章</p><h5 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h5><p>生成静态文件，该命令可以简写为<code>hexo g</code></p><h5 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;#发表草稿</span><br></pre></td></tr></table></figure><h5 id="server"><a href="#server" class="headerlink" title="server"></a>server</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>启动服务器，默认情况下，访问网址为： <code>http://localhost:4000/</code></p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h5 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站，该命令可以简写为<code>hexo d</code></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><h5 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件（db.json）和已生成的静态文件（public）</p><p>在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，可能需要运行该命令</p><h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><p>列出网站资料</p><h5 id="version"><a href="#version" class="headerlink" title="version"></a>version</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h4><p><code>Front-matter </code>是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量</p><h5 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h5><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">页面标题【必需】</td></tr><tr><td align="left"><code>date</code></td><td align="left">页面建立日期【必需】</td></tr><tr><td align="left">type</td><td align="left">标签、分类和友链三个页面需要配置【必需】</td></tr><tr><td align="left"><code>updated</code></td><td align="left">页面更新日期</td></tr><tr><td align="left"><code>description</code></td><td align="left">页面描述</td></tr><tr><td align="left">keywords</td><td align="left">页面关键字</td></tr><tr><td align="left"><code>comments</code></td><td align="left">评论模块【默认为true】</td></tr><tr><td align="left"><code>top_img</code></td><td align="left">页面顶部图片</td></tr><tr><td align="left"><code>aside</code></td><td align="left">显示侧边栏【默认为true】</td></tr><tr><td align="left"><code>aplayer</code></td><td align="left">在需要的页面加载aplayer的js和css，参考<code>音乐</code>配置</td></tr><tr><td align="left"><code>lang</code></td><td align="left">设置语言用于覆盖自动检测</td></tr></tbody></table><h5 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h5><p>部分参数参照page配置</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>tags</code></td><td>文章标签</td></tr><tr><td><code>categories</code></td><td>文章分类</td></tr><tr><td><code>top_img</code></td><td>文章顶部图片</td></tr><tr><td><code>cover</code></td><td>文章缩略图（若未设置top_img，文章页顶部将显示缩略图，可设为false/图片地址/留空）</td></tr><tr><td><code>sticky</code></td><td>文章置顶赋值，数值越大则置顶的优先级越大</td></tr><tr><td><code>copyright</code></td><td>转载文章不需要显示版权设置为<code>false</code></td></tr></tbody></table><h5 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h5><p>只有文章支持分类和标签，可以在 Front-matter 中设置。在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">- Life</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure><p>上述分类方法会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类，而不是并列分类</p><p>如果需要为文章添加多个分类，可以尝试以下 list 中的方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]</span><br></pre></td></tr></table></figure><p>此时同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类， <code>Life</code> 是一个没有子分类的分类</p><h5 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h5><p>除了 YAML 外，也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题扩展</title>
      <link href="/2023/01/30/butterfly%E4%B8%BB%E9%A2%98%E6%89%A9%E5%B1%95/"/>
      <url>/2023/01/30/butterfly%E4%B8%BB%E9%A2%98%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h4 id="Butterfly主题配置"><a href="#Butterfly主题配置" class="headerlink" title="Butterfly主题配置"></a>Butterfly主题配置</h4><h5 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h5><ul><li><p>移动到博客所在根目录</p></li><li><p>下载主题代码到themes中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式1：git方式安装</span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"></span><br><span class="line"># 方式2：npm方式安装</span><br><span class="line">npm i hexo-themebutterfly</span><br></pre></td></tr></table></figure></li><li><p>修改hexo的_config.yml文件，将主题改为butterfly</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>若重启、打开页面报如下错误，因没有<strong>pug</strong>以及 <strong>stylus</strong> 的渲染器，需要安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</span><br></pre></td></tr></table></figure></li><li><p>安装pub &amp; stylus</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>最后重启hexo即可</p></li></ul><h5 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h5><p>主题的配置在 <strong>/www/wwwroot/blog/themes/butterfly/_config.yml</strong> 文件中</p><h5 id="鼠标样式更改"><a href="#鼠标样式更改" class="headerlink" title="鼠标样式更改"></a>鼠标样式更改</h5><p>首先准备想要生成鼠标样式的图片，调整对应的像素大小，将图片类型转换为.cur（或直接在<a href="https://zhutix.com/tag/cursors/">鼠标指针 - 光标 - 电脑鼠标指针下载 - 致美化 - 漫锋网 (zhutix.com)</a>中找想要的样式），在主题路径source的css文件夹中新建一个mouse文件夹用于存放这些图片</p><h6 id="代码引入"><a href="#代码引入" class="headerlink" title="代码引入"></a>代码引入</h6><p>在butterfly主题的<code>_config.yml</code>文件中修改如下：</p><p><img src="https://s1.ax1x.com/2023/01/28/pSUjNCV.png"></p><p>在主题路径source中的css文件夹新建一个<code>mouse.css</code>文件，加入类似下列内容：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&#x27;./mouse/alternate.cur&#x27;</span>), auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 悬停图片时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 选择链接标签时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 选中输入框时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 悬停按钮时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 悬停列表标签时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 悬停页脚链接标签（例如页脚徽标）时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 悬停页码时的鼠标指针 */</span></span><br><span class="line"><span class="comment">/* 悬停菜单栏时的鼠标指针 */</span></span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">i</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#footer-wrap</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#pagination</span> <span class="selector-class">.page-number</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.site-page</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&#x27;./mouse/link.cur&#x27;</span>), auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新刷新即可看到鼠标样式已经生效</p><h5 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h5><h6 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h6 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h6><p>在<code>主配置文件</code>中插入类似下列代码：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">all</span> <span class="comment"># post:文章范围、page:页面范围、all:覆盖所有</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span> <span class="comment"># 内容是否包含每一篇文章的全部内容</span></span><br><span class="line">  <span class="attr">template:</span>  <span class="comment"># ./search.xml 指定定制的XML模板</span></span><br></pre></td></tr></table></figure><p>将butterfly配置文件中<code>local_search</code>的<code>enable</code>参数设为true表示开启本地搜索</p><h5 id="主题图片的更改"><a href="#主题图片的更改" class="headerlink" title="主题图片的更改"></a>主题图片的更改</h5><p><font color=red>图片的大小最好不要超过3M，否则会影响文章的打开速度</font></p><h6 id="网站logo"><a href="#网站logo" class="headerlink" title="网站logo"></a>网站logo</h6><p>将图片的名称更改为<code>favicon.png</code>替换掉source下的img中的原logo即可</p><h6 id="头像修改"><a href="#头像修改" class="headerlink" title="头像修改"></a>头像修改</h6><p>将图片的名称更改为<code>avatar.png</code>加入source下的img中，并将对应参数修改：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Avatar (头像)</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="comment">#是否一直旋转</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="主图修改"><a href="#主图修改" class="headerlink" title="主图修改"></a>主图修改</h5><p>将图片加入source下的img中，在配置文件中修改<code>index_img</code>参数的值为该路径</p><ul><li><code>default_top_img:</code>后面是当图片显示错误时的代替图片</li><li><code>index_img:</code>后是进入网站时显示的图像</li><li><code>archive_img:</code>是点击头像下面的文章进入的页面的顶部图</li><li><code>tag_img:</code>是点击头像下面的标签进入的页面的顶部图</li><li><code>category_img:</code>是点击头像下面的分类进入的页面的顶部图</li></ul><h6 id="随机图片的匹配"><a href="#随机图片的匹配" class="headerlink" title="随机图片的匹配"></a>随机图片的匹配</h6><p>此时设置了每一个分类，每一个标签页的图片，但是tags主页与categories主页都是原图，需要调整cover属性：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># display the cover or not</span></span><br><span class="line">  <span class="comment">#首页是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#侧边栏是否显示文章封面</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#归档页是否显示文章封面</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># the position of cover in home page</span></span><br><span class="line">  <span class="comment"># left/right/both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment">#当没有设置封面的时候，使用以下的照片</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">图片地址1</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">图片地址2</span></span><br><span class="line">     <span class="string">.....</span></span><br></pre></td></tr></table></figure><h6 id="错误页面的匹配"><a href="#错误页面的匹配" class="headerlink" title="错误页面的匹配"></a>错误页面的匹配</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Replace Broken Images</span></span><br><span class="line"><span class="comment">#在这里可以自定义所有图片不能显示的情况下显示的图片</span></span><br><span class="line"><span class="attr">error_img:</span></span><br><span class="line">  <span class="attr">flink:</span> <span class="string">/img/404.jpg</span></span><br><span class="line">  <span class="attr">post_page:</span> <span class="string">/img/404.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&#x27;页面丢失，联系博主进行解决吧&#x27;</span></span><br><span class="line">  <span class="comment">#图片的背景</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">链接地址</span></span><br></pre></td></tr></table></figure><h5 id="主页文章节选"><a href="#主页文章节选" class="headerlink" title="主页文章节选"></a>主页文章节选</h5><p>主页文章节选只支持自动节选和文章页description，修改主题配置文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">3</span><span class="comment">#1.只显示description，2.优先description，3.只显示自动节选，4.不显示文章内容</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure><h5 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h5><p>文章封面的获取顺序<code>Front-matter的cover</code>&gt;<code>配置文件的default_cover</code></p><h5 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>在butterfly的配置文件中将wordcount的enable参数设置为true</p><h5 id="标题栏标签完善"><a href="#标题栏标签完善" class="headerlink" title="标题栏标签完善"></a>标题栏标签完善</h5><p>hexo自带的标签包括分类，首页，标签等，且其默认配置了对应的目录：</p><p><img src="https://s1.ax1x.com/2023/01/30/pSdTrqI.png"></p><p>在source目录执行下面命令，建立标签页，其他的categories等也是相同的操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure><p>在生成路径的文件中增加type属性，内容与title相同并用双引号括住</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2023-01-30 11:27:08</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><p>打开主题路径下的配置文件配置对应的标签及相应图标：</p><p><img src="https://s1.ax1x.com/2023/01/30/pSdTzLR.png"></p><p>图标可以在阿里图标官网选择：<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a></p><p>找到想要的图标加入到购物车，添加至项目，将项目下载至本地，在主题的source/css文件下将红色标注的移动过去</p><p><img src="https://moonshuo.cn//images/202211011545280.png"></p><p>原css目录下的mouse.css（先前添加的鼠标样式）修改为style.css（将hexo配置文件中的inject参数也做对应修改）；将该iconfont.css中的内容添加进去：</p><p><img src="https://s1.ax1x.com/2023/01/30/pSwYKbV.png"></p><p>调整标题栏格式，重新部署即可：</p><p><img src="https://s1.ax1x.com/2023/01/30/pSwYlUU.png"></p><h5 id="设置透明度"><a href="#设置透明度" class="headerlink" title="设置透明度"></a>设置透明度</h5><p>在<code>style.css</code>中插入类似下列代码，背景图片最好与主图是同一张图片，否则会显得突兀，关于渐变色的设置可以在<a href="https://uigradients.com/#DigitalWater">Gradients</a>中选择：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 背景样式 */</span></span><br><span class="line"><span class="selector-id">#web_bg</span> &#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/index.jpg&quot;</span>),</span><br><span class="line"><span class="built_in">linear-gradient</span>(<span class="number">60deg</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">165</span>, <span class="number">150</span>, <span class="number">0.5</span>) <span class="number">5%</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">228</span>, <span class="number">255</span>, <span class="number">0.35</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 侧边栏个人信息卡片动态渐变色 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.card-widget</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>,</span><br><span class="line"><span class="number">#e8d8b9</span>,</span><br><span class="line"><span class="number">#eccec5</span>,</span><br><span class="line"><span class="number">#a3e9eb</span>,</span><br><span class="line"><span class="number">#bdbdf0</span>,</span><br><span class="line"><span class="number">#eec1ea</span>);</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgb</span>(<span class="number">66</span>, <span class="number">68</span>, <span class="number">68</span>);</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">400%</span> <span class="number">400%</span>;</span><br><span class="line">-webkit-<span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">-moz-<span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line"><span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> Gradient &#123;</span><br><span class="line"><span class="number">0%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">50%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">100%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-moz-keyframes</span> Gradient &#123;</span><br><span class="line"><span class="number">0%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">50%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">100%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> Gradient &#123;</span><br><span class="line"><span class="number">0%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">50%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">100%</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 个人信息Follow me按钮 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span>&gt;<span class="selector-id">#card-info-btn</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#3eb8be</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.sticky_layout</span>&gt;<span class="selector-class">.card-widget</span>,</span><br><span class="line"><span class="comment">/*分类页面*/</span></span><br><span class="line"><span class="selector-class">.layout</span>&gt;<span class="selector-id">#page</span>,</span><br><span class="line"><span class="comment">/*时间轴页面*/</span></span><br><span class="line"><span class="selector-class">.layout</span>&gt;<span class="selector-id">#archive</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">9</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="页脚设置"><a href="#页脚设置" class="headerlink" title="页脚设置"></a>页脚设置</h5><p>进入<code>….themes\butterfly\source\css\_layout\footer.styl</code>，把blue那行删掉</p><h6 id="更改底层文字"><a href="#更改底层文字" class="headerlink" title="更改底层文字"></a>更改底层文字</h6><p>在js文件夹下新建foot.js文件，复制下列代码并添加<a href="https://code.jquery.com/jquery-3.6.1.min.js">jquery.js文件</a>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态心跳</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    $(<span class="string">&#x27;.copyright&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;©2023 &lt;i class=&quot;fa-fw fas fa-heartbeat card-announcement-animation cc_pointer&quot;&gt;&lt;/i&gt; By dany\&#x27;s blog&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="title function_">show_date_time</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//本站运行时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show_date_time</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&#x27;.framework-info&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;本站已运行&lt;span id=&quot;span_dt_dt&quot; style=&quot;color: #fff;&quot;&gt;&lt;/span&gt;&#x27;</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="string">&quot;show_date_time()&quot;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="title class_">BirthDay</span>=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;1/28/2023 0:0:0&quot;</span>);</span><br><span class="line">today=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">timeold=(today.<span class="title function_">getTime</span>()-<span class="title class_">BirthDay</span>.<span class="title function_">getTime</span>());</span><br><span class="line">sectimeold=timeold/<span class="number">1000</span></span><br><span class="line">secondsold=<span class="title class_">Math</span>.<span class="title function_">floor</span>(sectimeold);</span><br><span class="line">msPerDay=<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span></span><br><span class="line">e_daysold=timeold/msPerDay</span><br><span class="line">daysold=<span class="title class_">Math</span>.<span class="title function_">floor</span>(e_daysold);</span><br><span class="line">e_hrsold=(e_daysold-daysold)*<span class="number">24</span>;</span><br><span class="line">hrsold=<span class="title class_">Math</span>.<span class="title function_">floor</span>(e_hrsold);</span><br><span class="line">e_minsold=(e_hrsold-hrsold)*<span class="number">60</span>;</span><br><span class="line">minsold=<span class="title class_">Math</span>.<span class="title function_">floor</span>((e_hrsold-hrsold)*<span class="number">60</span>);</span><br><span class="line">seconds=<span class="title class_">Math</span>.<span class="title function_">floor</span>((e_minsold-minsold)*<span class="number">60</span>);</span><br><span class="line">span_dt_dt.<span class="property">innerHTML</span>=<span class="string">&#x27;&lt;font style=color:#3eb8be&gt;&#x27;</span>+daysold+<span class="string">&#x27;&lt;/font&gt; 天 &lt;font style=color:#f391a9&gt;&#x27;</span>+hrsold+<span class="string">&#x27;&lt;/font&gt; 时 &lt;font style=color:#fdb933&gt;&#x27;</span>+minsold+<span class="string">&#x27;&lt;/font&gt; 分 &lt;font style=color:#a3cf62&gt;&#x27;</span>+seconds+<span class="string">&#x27;&lt;/font&gt; 秒&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主题配置文件中配置foot和jquery文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/style.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/jquery.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/foot.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="加载动画（butterfly4-5以上方案）"><a href="#加载动画（butterfly4-5以上方案）" class="headerlink" title="加载动画（butterfly4.5以上方案）"></a>加载动画（butterfly4.5以上方案）</h5><p>修改 <code>themes/butterfly/layout/includes/loading/fullpage-loading.pug</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#loading-box(onclick=&#x27;document.getElementById(&quot;loading-box&quot;).classList.add(&quot;loaded&quot;)&#x27;)</span><br><span class="line">  .loading-bg</span><br><span class="line">    div.loading-img</span><br><span class="line">    .loading-image-dot</span><br><span class="line"></span><br><span class="line">script.</span><br><span class="line">  const preloader = &#123;</span><br><span class="line">    endLoading: () =&gt; &#123;</span><br><span class="line">      document.body.style.overflow = &#x27;auto&#x27;;</span><br><span class="line">      document.getElementById(&#x27;loading-box&#x27;).classList.add(&quot;loaded&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    initLoading: () =&gt; &#123;</span><br><span class="line">      document.body.style.overflow = &#x27;&#x27;;</span><br><span class="line">      document.getElementById(&#x27;loading-box&#x27;).classList.remove(&quot;loaded&quot;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  window.addEventListener(&#x27;load&#x27;,()=&gt; &#123; preloader.endLoading() &#125;)</span><br><span class="line"></span><br><span class="line">  if (!&#123;theme.pjax &amp;&amp; theme.pjax.enable&#125;) &#123;</span><br><span class="line">    document.addEventListener(&#x27;pjax:send&#x27;, () =&gt; &#123; preloader.initLoading() &#125;)</span><br><span class="line">    document.addEventListener(&#x27;pjax:complete&#x27;, () =&gt; &#123; preloader.endLoading() &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>修改<code>themes/butterfly/layout/includes/loading/index.pug</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if theme.preloader.source === 1</span><br><span class="line">  include ./fullpage-loading.pug</span><br><span class="line">else if theme.preloader.source === 2</span><br><span class="line">  include ./pace.pug</span><br><span class="line">else</span><br><span class="line">  include ./fullpage-loading.pug</span><br><span class="line">  include ./pace.pug</span><br></pre></td></tr></table></figure><p>修改<code>themes/butterfly/source/css/_layout/loading.styl</code>, 注意其中颜色代码<code>--anzhiyu-card-bg</code>等需自行替换为自己的色值</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;preloader&#x27;</span>)</span><br><span class="line">  <span class="selector-class">.loading-bg</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(<span class="number">#fff</span>);</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1001</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#loading-box</span></span><br><span class="line">    <span class="selector-class">.loading-img</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">margin</span>: auto;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#f0f0f2</span>;</span><br><span class="line">      <span class="attribute">animation-duration</span>: .<span class="number">3s</span>;</span><br><span class="line">      <span class="attribute">animation-name</span>: loadingAction;</span><br><span class="line">      <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">      <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">    <span class="selector-class">.loading-image-dot</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#6bdf8f</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">6px</span> solid <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">18px</span>, <span class="number">24px</span>);</span><br><span class="line">    &amp;<span class="selector-class">.loaded</span></span><br><span class="line">      <span class="selector-class">.loading-bg</span></span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: -<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> loadingAction</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: .<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在自定义css文件中加入如下代码，图片最好转换为base64编码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.loading-img</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../img/avatar.png</span>) no-repeat center center;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后将主题配置文件中的<code>preloader</code>修改为<code>true</code></p><h5 id="导航栏修改"><a href="#导航栏修改" class="headerlink" title="导航栏修改"></a>导航栏修改</h5><p>在自定义css文件中加入下列代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 导航栏修改 */</span></span><br><span class="line"><span class="comment">/* 圆角隐藏 */</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 一级菜单居中 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: fit-content;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: row;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-main);</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-id">#nav-totop</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.totopbtn</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav-totop</span> <span class="selector-id">#percent</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-white);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">var</span>(--anzhiyu-main);</span><br><span class="line"><span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">35px</span>;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav-totop</span> <span class="selector-id">#percent</span>,</span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-id">#nav-totop</span> <span class="selector-id">#percent</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">var</span>(--card-bg);</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-id">#nav-totop</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">35px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.is-top-bar</span>) <span class="selector-id">#percent</span> &#123;</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.is-top-bar</span>) <span class="selector-id">#nav-totop</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">transition</span>: width <span class="number">0.3s</span>, opacity <span class="number">0.2s</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav-totop</span> <span class="selector-id">#percent</span> &#123;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav-totop</span><span class="selector-pseudo">:hover</span> <span class="selector-id">#percent</span> &#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span> <span class="selector-id">#nav</span> <span class="selector-id">#nav-right</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">0.5rem</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-id">#nav-totop</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav-button</span> &#123;</span><br><span class="line"><span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#menus</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span> <span class="selector-id">#nav</span> <span class="selector-class">.nav-button</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">35px</span>;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.site-page</span> &#123;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav</span> *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Aplayer音乐插件"><a href="#Aplayer音乐插件" class="headerlink" title="Aplayer音乐插件"></a>Aplayer音乐插件</h5><p>运行以下指令安装<code>hexo-tag-aplayer</code>插件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure><p>在hexo配置文件中新增配置项：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line"><span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>修改主题配置文件中关于Aplayer的配置内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;5183531430&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;false&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>\themes\butterfly\source\css</code>中新建一个<code>custom.css</code>添加css样式使Aplayer自动缩进隐藏，且在主题配置文件<code>inject</code>中加入该文件</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">66px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">/* 默认情况下缩进左侧66px，只留一点箭头部分 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">/* 鼠标悬停是左侧缩进归零，完全显示按钮 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/css/custom.css&quot;</span>  <span class="attr">media</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;this.media=&#x27;all&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于Aplayer的部分参数配置如下：</p><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td>data-id</td><td>必填，歌单id</td></tr><tr><td>data-server</td><td>必填，服务商：netease, tencent, kugou, xiami, baidu等</td></tr><tr><td>data-type</td><td>必填，歌单类型：song, playlist, album, search, artist等</td></tr><tr><td>data-fixed</td><td>enable fixed mode</td></tr><tr><td>data-mini</td><td>enable mini mode</td></tr><tr><td>data-autoplay</td><td>audio autoplay</td></tr><tr><td>data-theme</td><td><code>#2980b9</code>，main color</td></tr><tr><td>data-preload</td><td>values: ‘none’, ‘metadata’, ‘auto’</td></tr><tr><td>data-order</td><td>player play order, values: ‘list’, ‘random’</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot笔记</title>
      <link href="/2023/01/29/springboot%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/29/springboot%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="第一个SpringBoot程序"><a href="#第一个SpringBoot程序" class="headerlink" title="第一个SpringBoot程序"></a>第一个SpringBoot程序</h4><h5 id="创建基础项目说明"><a href="#创建基础项目说明" class="headerlink" title="创建基础项目说明"></a>创建基础项目说明</h5><h6 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h6><p>使用Spring Initializr 的 Web页面创建项目</p><p>①打开 <a href="https://start.spring.io/">https://start.spring.io/</a></p><p>②填写项目信息</p><p>③点击”Generate Project“按钮生成项目；下载此项目</p><p>④解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕</p><p>⑤如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪</p><h6 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h6><p>使用 IDEA 直接创建项目</p><p>①创建一个新项目</p><p>②选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p><p>③填写项目信息</p><p>④选择初始化的组件（初学勾选 Web 即可）</p><p>⑤填写项目路径</p><p>⑥等待项目构建成功</p><h6 id="项目结构分析"><a href="#项目结构分析" class="headerlink" title="项目结构分析"></a>项目结构分析</h6><p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件</p><p>1、程序的主启动类（程序的主入口）</p><p>2、一个 application.properties 配置文件（SpringBoot的核心配置文件）</p><p>3、一个 测试类</p><p>4、一个 pom.xml</p><p>编写一个http接口</p><p>①在主程序的同级目录下新建一个controller包<br>②在包中新建一个HelloController类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③编写完毕后，从主程序启动项目，浏览器发起请求，看页面返回；控制台输出了 Tomcat 访问的端口号！</p><h5 id="容器功能"><a href="#容器功能" class="headerlink" title="容器功能"></a>容器功能</h5><h6 id="常用组件及注解"><a href="#常用组件及注解" class="headerlink" title="常用组件及注解"></a>常用组件及注解</h6><ol><li><p>@Configuration    添加此注解等同向bean注入bean.xml文件</p><ul><li><p>对比原生添加组件方式的区别</p><p><code>原生组件添加到容器的方式</code></p><ol><li><p>需要在resources目录下创建一个xml配置文件</p></li><li><p>创建bean标签</p><p><img src="https://img-blog.csdnimg.cn/2021071505525410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzgzNzY5,size_16,color_FFFFFF,t_70"></p></li></ol><p><code>注解添加</code></p><ol><li>创建一个类</li><li>使用注解@Configuration，告诉SpringBoot这是一个配置类</li></ol><p>使用@bean注解构建user和pet对象</p><p><img src="https://img-blog.csdnimg.cn/2021071505531170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzgzNzY5,size_16,color_FFFFFF,t_70"></p></li><li><p>使用实例</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、配置类中使用@Bean标注在方法上给容器注册组件，默认单实例</span></span><br><span class="line"><span class="comment">2、配置类本身也是组件</span></span><br><span class="line"><span class="comment">3、proxyBeanMethod：代理bean的方法</span></span><br><span class="line"><span class="comment">Full(proxyBeanMethods = true)【保证每个@Bean方法被调用多少次返回的组件都是单实例的】</span></span><br><span class="line"><span class="comment">Lite(proxyBeanMethod = false)【每个@Bean方法被调用多少次返回的组件都是新创建的】</span></span><br><span class="line"><span class="comment">组件依赖必须使用Full模式默认，proxyBeanMethods = true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span><span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">//给容器添加组件，以方法名作为组件id，返回类型就是组件类型，返回值就是组件在容器中的实例</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        zhangsan.setPet(tomcatPet());<span class="comment">//User组件依赖Pet组件</span></span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(&quot;tom&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">tomcatPet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tomcat&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.boot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1、返回IOC容器</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class,args);</span><br><span class="line">        <span class="comment">//2、查看容器里的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3、从容器中获取组件</span></span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom01</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;tom&quot;</span>,Pet.class);</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom02</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;tom&quot;</span>,Pet.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;组件：&quot;</span>+(tom01 == tom02));</span><br><span class="line">        </span><br><span class="line">        <span class="type">MyConfig</span> <span class="variable">bean</span> <span class="operator">=</span> run.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Controller、@Service、@Repository、@Component</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller：控制器层（注入服务）</span><br><span class="line">@Service：服务层（注入dao）</span><br><span class="line">@Repository：dao持久层（实现dao访问）</span><br><span class="line">@Component：标注一个类为Spring容器的Bean（把普通pojo实例化到spring容器中，相当于配置文件中的&lt;bean id=&quot;&quot; class=&quot;&quot;/&gt;）</span><br></pre></td></tr></table></figure></li><li><p>@ComponentScan、@Import</p><ol><li><p>@ComponentScan注解的作用</p><p>@ComponentScan注解一般和@Configuration注解一起使用，主要作用为定义包扫描的规则，然后根据定义的规则找出哪些类需要自动装配到spring的bean容器中，然后交由spring进行统一管理</p></li><li><p>@ComponentScan注解属性介绍</p><p><code>value</code>：指定要扫描的包路径</p><p><code>excludeFilters（排除规则）</code>：excludeFilters=Filter[]指定包扫描的时候根据规则指定要排除的组件</p><p><code>includeFilters（包含规则）</code>：includeFilters=Filter[]指定包扫描的时候根据规则指定要包含的组件</p></li><li><p>使用实例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//includeFilters 包含Animal.class类可以被扫描到，包括其子类</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.spring&quot;</span></span><br><span class="line"><span class="meta">includeFilters = &#123;@ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE,classes = &#123;Animal.class&#125;)&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//excludeFilters 排除包含@Controller注解的类</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.spring&quot;</span></span><br><span class="line"><span class="meta">              ,excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">                  @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = &#123;Controller.class&#125;)&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p>@Import注解提供了三种用法</p><ol><li>@Import一个普通类，spring会将该类加载到spring容器中</li><li>@Import一个类，该类实现了ImportBeanDefinitionRegistrar接口，在重写的registerBeanDefinitions方法里面，能拿到BeanDefinitionRegistry bd的注册器，能手工往beanDefinitionMap中注册 beanDefinition</li><li>@Import一个类，该类实现了ImportSelector 重写selectImports方法，返回String[]数组对象，数组里的类都会注入到spring容器当中</li></ol></li><li><p>使用场景</p><p><code>import普通类</code></p><ol><li><p>自定义一个类，无任何注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写一个importConfig类 import该myClass类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(MyClass.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过AnnotationConfigApplicationContext 初始化spring容器</p><p><img src="https://img-blog.csdnimg.cn/aee98405add545bfac5cdda6318b510b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Lit5bm05Y2x5py655qE6ICB55S35Lq6,size_20,color_FFFFFF,t_70,g_se,x_16"></p></li></ol><p><code>实现ImportBeanDefinitionRegistrar</code></p><ol><li><p>创建一个普通类MyClassRegistry</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassRegistry</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyClassRegistry test方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建MyImportRegistry 实现ImportBeanDefinitionRegistrar接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportRegistry</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>();</span><br><span class="line">        bd.setBeanClass(MyClassRegistry.class);</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;myClassRegistry&quot;</span>,bd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>import该类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(MyImportRegistry.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportConfig</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>执行main方法，查看输出</p><p><img src="https://img-blog.csdnimg.cn/f1f654a234544847b28f25aff31a5538.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Lit5bm05Y2x5py655qE6ICB55S35Lq6,size_20,color_FFFFFF,t_70,g_se,x_16"></p></li></ol><p><code>实现ImportSelector</code></p><ol><li><p>创建一个普通类MyClassImport </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassImport</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;MyClassImport test方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建MyImportSelector实现ImportSelector接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;MyClassImport.class.getName()&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>import该类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportConfig</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>执行main方法，查看输出</p><p><img src="https://img-blog.csdnimg.cn/3839e967fd2942c5bbf40fb9ce17ae45.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Lit5bm05Y2x5py655qE6ICB55S35Lq6,size_20,color_FFFFFF,t_70,g_se,x_16"></p></li></ol></li></ol></li><li><p>@Override注解作用</p><ol><li>当作注释</li><li>表示对父类方法的重写</li><li>编译器可验证@Override下的方法名称是否为父类所有，若无就会报错</li></ol></li><li><p>@Conditional（条件装配注解）</p><p>条件装配：当满足Conditional指定的条件则进行组件注入</p></li></ol><h6 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h6><p>读取properties文件中的内容，将其封装到JavaBean中，以供随时使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getProperties</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        pps.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;a.properties&quot;</span>));</span><br><span class="line">        <span class="type">Enumeration</span> <span class="variable">enum1</span> <span class="operator">=</span> pps.propertyNames();<span class="comment">//得到配置文件的名字</span></span><br><span class="line">        <span class="keyword">while</span>(enum1.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">strKey</span> <span class="operator">=</span> (String) enum1.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">strValue</span> <span class="operator">=</span> pps.getProperty(strKey);</span><br><span class="line">            System.out.println(strKey + <span class="string">&quot;=&quot;</span> + strValue);</span><br><span class="line">            <span class="comment">//封装到JavaBean</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>@ConfigurationProperties</strong></p><p>要使用该注解必须声明组件注解@Component；通常是用来将properties和yml配置文件属性转化为bean对象使用；@Component+@ConfigurationProperties可以由@EnableConfigurationProperties替换</p><h4 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h4><h5 id="SpringBootApplication注解"><a href="#SpringBootApplication注解" class="headerlink" title="@SpringBootApplication注解"></a>@SpringBootApplication注解</h5><p>标注该类是一个SpringBoot应用；关键功能由@Import提供，其导入的AutoConfigurationImportSelector的selectImports()方法通过SpringFactoriesLoader.loadFactoryNames()扫描有META-INF/spring.factories的jar包</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span> (</span><br><span class="line">excludeFilters = &#123;<span class="meta">@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">        classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">    )</span>,<span class="meta">@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">        classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">    )</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="EnableAutoConfiguration注解：开启自动配置"><a href="#EnableAutoConfiguration注解：开启自动配置" class="headerlink" title="@EnableAutoConfiguration注解：开启自动配置"></a>@EnableAutoConfiguration注解：开启自动配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="AutoConfigurationPackage注解"><a href="#AutoConfigurationPackage注解" class="headerlink" title="@AutoConfigurationPackage注解"></a>@AutoConfigurationPackage注解</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span></span><br><span class="line"><span class="comment">//利用Registrar导入一系列组件</span></span><br><span class="line"><span class="comment">//将指定一个包下所有组件导入</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="Import-AutoConfigurationImportSelector-class-注解"><a href="#Import-AutoConfigurationImportSelector-class-注解" class="headerlink" title="@Import({AutoConfigurationImportSelector.class})注解"></a>@Import({AutoConfigurationImportSelector.class})注解</h6><p>AutoConfigurationImportSelector ：自动配置导入选择器</p><p>自动配置真正实现是从classpath中搜寻所有的META-INF/spring.factories配置文件 ，将其中对应的 org.springframework.boot.autoconfigure包下的配置项通过反射实例化为对应标注了@Configuration的JavaConfig形式IOC容器配置类，然后将这些都汇总成为一个实例并加载到IOC容器中</p><h5 id="自动配置生效"><a href="#自动配置生效" class="headerlink" title="自动配置生效"></a>自动配置生效</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ConditionalOnBean：当容器里有指定的bean的条件下。</span><br><span class="line"></span><br><span class="line">@ConditionalOnMissingBean：当容器里不存在指定bean的条件下。</span><br><span class="line"></span><br><span class="line">@ConditionalOnClass：当类路径下有指定类的条件下。</span><br><span class="line"></span><br><span class="line">@ConditionalOnMissingClass：当类路径下不存在指定类的条件下。</span><br><span class="line"></span><br><span class="line">@ConditionalOnProperty：指定的属性是否有指定的值，比如@ConditionalOnProperties(prefix=”xxx.xxx”, value=”enable”, matchIfMissing=true)，代表当xxx.xxx为enable时条件的布尔值为true，如果没有设置的情况下也为true。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>以ServletWebServerFactoryAutoConfiguration配置类为例，解释一下全局配置文件中的属性如何生效，比如：server.port=8081，是如何生效的（当然不配置也会有默认值，这个默认值来自于org.apache.catalina.startup.Tomcat）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ServletRequest.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ServerProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123;</span></span><br><span class="line"><span class="meta">    ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span></span><br><span class="line"><span class="meta">    ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span></span><br><span class="line"><span class="meta">    ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span></span><br><span class="line"><span class="meta">    ServletWebServerFactoryConfiguration.EmbeddedUndertow.class</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletWebServerFactoryAutoConfiguration</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ServletWebServerFactoryAutoConfiguration类上，有个@EnableConfigurationProperties注解：<strong>开启配置属性</strong></p><p>后面的参数是一个ServerProperties类，这就是约定大于配置的最终落地点</p><p>springboot所有自动配置在启动时扫描并加载，扫描了<code>spring.properties</code>配置文件，所有配置类都在这里，但是不一定生效，要判断条件是否成立，只要导入对应的start就有了对应的启动器，有了启动器自动装配就会生效，此时配置成功</p><p><strong>步骤：</strong></p><ol><li>SpringBoot在启动时从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值</li><li>将这些值作为自动配置类导入容器，自动配置类生效</li><li>整个J2EE整体解决方案和自动配置都在springboot-autoconfigure的jar包中</li><li>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）@Bean给容器中导入这个场景需要的所有组件， 并配置好这些组件 @Configuration</li><li>自动配置类免去手动编写配置注入功能组件等工作</li></ol><h4 id="SpringBoot配置文件"><a href="#SpringBoot配置文件" class="headerlink" title="SpringBoot配置文件"></a>SpringBoot配置文件</h4><ul><li>application.properties<ul><li>语法结构：key=value</li></ul></li><li>application.yaml<ul><li>语法结构：key:空格value</li></ul></li></ul><p><strong>原始实体对象赋值方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//注册bean到容器中，使得这个类可以被扫描到</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;阿黄&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;18&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span><span class="comment">//将Dog类自动注入</span></span><br><span class="line">    Dog dog;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span>&#123;System.out.println(dog);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>通过yaml文件赋值</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">qinjiang</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">birth:</span> <span class="number">2000</span><span class="string">/01/01</span></span><br><span class="line"><span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line"><span class="attr">lists:</span> [<span class="string">code</span>,<span class="string">girl</span>,<span class="string">music</span>]</span><br><span class="line"><span class="attr">dog:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@ConfigurationProperties作用：</span></span><br><span class="line"><span class="comment">默认从全局配置文件中获取值</span></span><br><span class="line"><span class="comment">将配置文件中配置的每一个属性的值映射到该组件中；</span></span><br><span class="line"><span class="comment">告诉SpringBoot将本类所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment">参数 prefix = “person”: 将配置文件中person下面的所有属性一一对应</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>@PropertySource</strong>：加载指定的配置文件</p><p><strong>使用示例</strong></p><p>首先在resources目录下新建一个person.properties文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:person.properties&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>若yaml和properties同时配置了端口且没有激活其它环境，默认会使用properties配置文件</strong></p><h4 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h4><h5 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">    <span class="comment">//存入数据</span></span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;users&quot;</span>, Arrays.asList(<span class="string">&quot;qinjiang&quot;</span>,<span class="string">&quot;kuangshen&quot;</span>));</span><br><span class="line">    <span class="comment">//classpath:/templates/test.html</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span> xmlns:th=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;狂神说&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;测试页面&lt;/h1&gt;</span><br><span class="line">        &lt;div th:text=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;!--不转义--&gt;</span><br><span class="line">        &lt;div th:utext=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;!--遍历数据--&gt;</span><br><span class="line">&lt;!--th:each每次遍历都会生成当前这个标签：官网#<span class="number">9</span>--&gt;</span><br><span class="line">        &lt;h4 th:each=<span class="string">&quot;user :$&#123;users&#125;&quot;</span> th:text=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;&lt;/h4&gt;</span><br><span class="line">        &lt;h4&gt;</span><br><span class="line">            &lt;!--行内写法：官网#<span class="number">12</span>--&gt;</span><br><span class="line">            &lt;span th:each=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;[[$&#123;user&#125;]]&lt;/span&gt;</span><br><span class="line">        &lt;/h4&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h5><p>将请求和处理请求的控制器方法关联起来，建立映射关系，即设置route</p><h6 id="各个属性"><a href="#各个属性" class="headerlink" title="各个属性"></a>各个属性</h6><ul><li><p>value属性：默认只写一个参数的话就是给value赋值；value是字符串类型的数组，表示请求映射匹配多个请求地址所对应的请求</p></li><li><p>method属性：设置get或post请求映射，是一个RequestMethod类的数组，表示请求映射能够匹配多种请求方式</p><p>对处理指定请求方式的控制器方法，SpringMVC提供了@RequestMapping的派生注解：</p><p><strong>处理get请求的映射–&gt;@GetMapping</strong></p><p><strong>处理post请求的映射–&gt;@PostMapping</strong></p><p><strong>处理put请求的映射–&gt;@PutMapping</strong></p><p><strong>处理delete请求的映射–&gt;@DeleteMapping</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM笔记</title>
      <link href="/2023/01/29/SSM%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/29/SSM%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><h4 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id: 对应的userMapper中的方法名，即该sql语句需要调用的接口的某个方法名</span><br><span class="line">resultType: sql语句执行的返回值类型</span><br><span class="line">parameterType： userMapper中相应的方法传递的参数类型</span><br><span class="line">Select 需要写返回值类型，update、insert、delete则不需要写</span><br></pre></td></tr></table></figure><p><code>编写接口</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据ID查询用户</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> Id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除一个用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br></pre></td></tr></table></figure><p><code>编写对应的UserMapper.xml中的sql语句</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserById&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultType=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br><span class="line">        select * from mybatis.user <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    对象中的属性，可以直接取出来--&gt;</span><br><span class="line">&lt;insert id=<span class="string">&quot;addUser&quot;</span> parameterType=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br><span class="line">        insert into mybatis.user (id, name, pwd) value (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">&lt;update id=<span class="string">&quot;updateUser&quot;</span> parameterType=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br><span class="line">        update mybatis.user <span class="type">set</span> <span class="variable">name</span> <span class="operator">=</span> #&#123;name&#125;, pwd = #&#123;pwd&#125; <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;;</span><br><span class="line">&lt;/update&gt;</span><br><span class="line"></span><br><span class="line">&lt;delete id=<span class="string">&quot;deleteUser&quot;</span> parameterType=<span class="string">&quot;int&quot;</span>&gt;</span><br><span class="line">        delete from mybatis.user <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><p><code>测试</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">     <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">     <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">     System.out.println(user);</span><br><span class="line"></span><br><span class="line">     sqlSession.close();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">     <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">     <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> mapper.addUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="string">&quot;哈哈&quot;</span>,<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">     <span class="comment">//增删改必须要提交事务</span></span><br><span class="line">     sqlSession.commit();</span><br><span class="line">     sqlSession.close();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">     <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">     mapper.updateUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="string">&quot;呵呵&quot;</span>,<span class="string">&quot;123123&quot;</span>));</span><br><span class="line">     sqlSession.commit();</span><br><span class="line">     sqlSession.close();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">     <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">     mapper.deleteUser(<span class="number">4</span>);</span><br><span class="line">     sqlSession.commit();</span><br><span class="line">     sqlSession.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="使用Map传递参数"><a href="#使用Map传递参数" class="headerlink" title="使用Map传递参数"></a>使用Map传递参数</h5><p>若实体类或数据库中的表字段或参数过多，可以考虑使用map传递参数</p><p><code>UserMapper.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用map传递参数，查询用户</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(Map&lt;string,Object&gt; map)</span>;</span><br><span class="line"><span class="comment">//使用map传递参数，添加用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser</span><span class="params">(Map&lt;string,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><p><code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id = #&#123;userId&#125; and name =#&#123;userName&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    传递的map的key--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user (id, name) value (#&#123;userId&#125;,#&#123;userName&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>UserMapperTest.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用map传递参数</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;userId&quot;</span>,<span class="number">6</span>);</span><br><span class="line">    map.put(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;侯帅鑫&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(map);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;userId&quot;</span>,<span class="number">6</span>);</span><br><span class="line">    map.put(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;侯帅鑫&quot;</span>);</span><br><span class="line">    mapper.addUser(map);</span><br><span class="line">    <span class="comment">//增删改必须要提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p>Spring是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架</p><h4 id="AOP（Aspect-Oriented-Programming）"><a href="#AOP（Aspect-Oriented-Programming）" class="headerlink" title="AOP（Aspect Oriented Programming）"></a>AOP（Aspect Oriented Programming）</h4><p>即面向切片编程的简称，基于IOC，是对OOP的有益补充；</p><p>AOP利用“横切”的技术剖解开封装的对象内部，将影响了多个类的公共行为封装到一个可重用模块并将其名为<code>Aspect（方面）</code>，此举有利于减少系统的重复代码，降低模块间的耦合度，和对未来的可操作性和可维护性；</p><p>实现AOP的技术分为：</p><ul><li>采用动态代理技术：用截取消息的方式对消息装饰，取代原对象行为的执行</li><li>采用静态织入的方式：引入特定的语法创建<code>方面</code>使得编译器可以在编译期间织入有关“方面的代码”</li></ul><p>Spring实现AOP：</p><ul><li>JDK动态代理：代理对象必须是某个接口的实现，通过在运行期间创建一个接口的实现类完成对目标对象的代理，核心是InvocationHandler和Proxy</li><li>CGLIB代理：原理类似JDK代理，在运行期间生成的代理对象是针对目标类扩展的子类，底层依靠ASM（开源的Java字节编辑类库）操作字节码实现，需要引入包asm.jar和cglib.jar，使用AspectJ注入式切面和@AspectJ注解驱动的切面实际上底层也是通过动态代理实现</li></ul><h5 id="AOP的作用"><a href="#AOP的作用" class="headerlink" title="AOP的作用"></a>AOP的作用</h5><ol><li>弥补了OOP的不足</li><li>对业务逻辑的各个部分进行隔离，降低业务逻辑的耦合性，提高程序的可重用性和开发效率</li><li>主要用于同一对象层次的公用行为建模</li></ol><h5 id="使用AOP的几种方式"><a href="#使用AOP的几种方式" class="headerlink" title="使用AOP的几种方式"></a>使用AOP的几种方式</h5><ol><li>经典的基于代理的AOP</li><li>@AspectJ注解驱动的切面</li><li>纯POJO切面</li><li>注入式AspectJ切面</li></ol><h5 id="AOP使用场景"><a href="#AOP使用场景" class="headerlink" title="AOP使用场景"></a>AOP使用场景</h5><ul><li>Authentication 权限检查</li><li>Caching 缓存</li><li>Context passing 内容传递</li><li>Error handling 错误处理</li><li>Lazy loading　延迟加载</li><li>Debugging　　调试</li><li>logging, tracing, profiling and monitoring　日志记录，跟踪，优化，校准</li><li>Performance optimization　性能优化，效率检查</li><li>Persistence　　持久化</li><li>Resource pooling　资源池</li><li>Synchronization　同步</li><li>Transactions 事务管理</li></ul><h5 id="常见的通知"><a href="#常见的通知" class="headerlink" title="常见的通知"></a>常见的通知</h5><ul><li>前置通知 方法执行前调用 对应注解 @Before</li><li>后置通知 方法执行后调用 对应注解 @After</li><li>返回通知 方法返回后调用 对应注解 @AfterReturning</li><li>异常通知 方法出现异常调用 对应注解 @AfterThrowing</li><li>环绕通知 动态代理、手动推荐方法运行 对应注解 @Around</li></ul><h5 id="常见名词"><a href="#常见名词" class="headerlink" title="常见名词"></a>常见名词</h5><ul><li>连接点（Joinpoint）    指程序能够应用通知的“时机”</li><li>切入点（Pointcut）     通知定义了切面要发生的“故事”，连接点定义了“故事”发生的时机，那么切入点就定义了“故事”发生的地点，例如某个类或方法的名称，Spring中允许我们方便的用正则表达式来指定</li><li>切面（Aspect）           通知、连接点、切入点共同组成了切面：时间、地点和要发生的“故事”</li><li>引入（Introduction） 引入允许我们向现有的类添加新的方法和属性(Spring提供了一个方法注入的功能）</li><li>目标（Target）            被通知的对象，若无AOP则通知逻辑写在目标对象中</li><li>织入（Weaving）        把切面应用到目标对象创建新代理对象过程，一般发生在<code>编译时</code>、<code>类加载时</code>、<code>运行时</code>      </li></ul><h4 id="IOC（Inversion-of-Control）"><a href="#IOC（Inversion-of-Control）" class="headerlink" title="IOC（Inversion of Control）"></a>IOC（Inversion of Control）</h4><p>将复杂系统分解为相互合作的对象，将对象类封装以后内部实现对外部是透明的，从而降低解决问题的复杂度，且可以灵活地被重用和扩展</p><p><img src="https://img-blog.csdnimg.cn/564a2e2fff9347a6a72cbfafd622a90d.png"></p><p>引入中间位置的“第三方”即IOC容器，全部对象的控制权上缴给IOC容器使其起到“粘合剂”的作用，若其消失则对象间失去联系</p><h5 id="控制反转名字的由来"><a href="#控制反转名字的由来" class="headerlink" title="控制反转名字的由来"></a>控制反转名字的由来</h5><p>A获得B的过程由主动行为变为了被动行为，控制权颠倒，这就是名称的由来</p><h5 id="IOC也称为依赖注入（DI）"><a href="#IOC也称为依赖注入（DI）" class="headerlink" title="IOC也称为依赖注入（DI）"></a>IOC也称为依赖注入（DI）</h5><p>控制被反转后，获得依赖对象的过程由自身管理变为了IOC容器主动注入，因此“控制反转”获得了一个更合适的名字：<code>依赖注入（Dependency Injection）</code></p><h4 id="OOP（Object-Oriented-Programming）"><a href="#OOP（Object-Oriented-Programming）" class="headerlink" title="OOP（Object Oriented Programming）"></a>OOP（Object Oriented Programming）</h4><h5 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h5><ul><li>封装：隐藏对象属性和实现细节，仅对外提供公共访问方式</li><li>继承：提高代码复用性；继承是多态的前提</li><li>多态：父类或接口定义的引用变量可以指向子类或具体实现类的实例对象</li></ul><h5 id="五大基本原则"><a href="#五大基本原则" class="headerlink" title="五大基本原则"></a>五大基本原则</h5><ol><li><p>单一职责原则SRP（<strong>Single Responsibility Principle</strong>）</p><p>类的功能要单一</p></li><li><p>开放封闭原则OCP（<strong>Open－Close Principle</strong>）</p><p>一个模块对拓展开放，对修改封闭</p></li><li><p>里氏替换原则LSP（<strong>the Liskov Substitution Principle</strong>）</p><p>子类可以替换父类，出现在父类能够出现的任何地方</p></li><li><p>依赖倒置原则DIP（<strong>the Dependency Inversion Principle</strong>）</p><p>高层次模块不应依赖于低层次模块，都应该依赖于抽象；抽象不应该依赖于具体实现，具体实现要依赖于抽象</p></li><li><p>接口分离原则ISP（<strong>the Interface Segregation Principle</strong>）</p><p>采用多个与特定客户类有关接口比采用一个通用接口更好，将不同功能拆分为不同接口比放在一个接口里更好</p></li></ol><h4 id="IOC理论推导"><a href="#IOC理论推导" class="headerlink" title="IOC理论推导"></a>IOC理论推导</h4><p><code>UserDao接口</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserDaoImpI实现类</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认获取用户数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>UserService业务接口</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>UserServiceImpl业务实现类</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>测试</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//用户实际调用的是业务层，dao层他们不需要接触！</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h4><p><code>新建一个maven项目，编写实体类</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>编写xml配置文件</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用Spring来创建对象，在Spring这些都称为bean</span></span><br><span class="line"><span class="comment">    类型 变量名 = new 类型();</span></span><br><span class="line"><span class="comment">    Hello hello = new Hello();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    id = 变量名</span></span><br><span class="line"><span class="comment">    class = new的对象</span></span><br><span class="line"><span class="comment">    property 相当于给对象中的属性设置一个值！</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>测试</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取Spring的上下文对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//对象都在Spring中管理</span></span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h4><ol><li><p>默认使用无参构造创建对象</p></li><li><p>若要使用有参构造创建对象：</p><ul><li><p>下标赋值</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种方式：下标赋值    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神说Java&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>类型</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种方式：通过类型的创建，不建议使用    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lifa&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>参数名</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三种方式：直接通过参数名来设置    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李发&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h4><p>在Spring中，构成应用程序主干并由Spring IoC容器管理的对象称为bean，其是由Spring IoC容器实例化、组装和管理的对象</p><p><img src="https://img-blog.csdnimg.cn/20200728173028735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NhcnBlX2RpZW0w,size_16,color_FFFFFF,t_70"></p><ul><li>Bean容器，或称Spring IoC容器，主要用来管理对象和依赖，及依赖的注入</li><li>bean是一个Java对象，根据bean规范编写的类并由Bean容器生成的对象</li><li>bean规范：<ul><li>所有属性为private</li><li>提供默认构造方法</li><li>提供getter和setter</li><li>实现serializable接口</li></ul></li></ul><h4 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> id：bean的唯一标识符，也就是相当于我们学的对象名</span></span><br><span class="line"><span class="comment"> class：bean对象所对应的全限定名：包名+类名</span></span><br><span class="line"><span class="comment"> name：也是别名，而且name可以同时取多个别名</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.UserT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2 u2,u3;u4&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黑心白莲&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试实例"><a href="#测试实例" class="headerlink" title="测试实例"></a>测试实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;西安&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种：普通值注入，value        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黑心白莲&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--第二种        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数组        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--List        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>打篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Map        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456789987456321&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;359419496419481649&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Set        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--NULL        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Properties        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>20191029<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>102.0913.524.4585<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;user&quot;</span>&gt;</span>黑心白莲<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h4><p>Spring三种装配属性方式：1、在xml中显示配置；2、在java中显示配置；3、隐式自动装配bean</p><p><code>创建项目，一个人有两个宠物</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Dog&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.People&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小白莲&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ByName自动装配</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--byName:自动在容器上下文查找，和对象set方法后面的值对应的bean id--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小白莲&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ByType自动装配</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--byType:自动在容器上下文查找和自己对象属性类型相同的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小白莲&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ByName的时候，需要保证所有bean的id唯一，且该bean需要和自动注入的属性的set方法的值一致</li><li>ByType的时候，需要保证所有bean的class唯一，且该bean需要和自动注入的属性的类型一致</li></ul><h4 id="使用注解实现自动装配"><a href="#使用注解实现自动装配" class="headerlink" title="使用注解实现自动装配"></a>使用注解实现自动装配</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解的支持    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接在属性上使用<code>@Autowired</code>即可，也可以在set方法上使用；使用Autowired就可以不用编写set方法，前提是自动配置属性在IOC存在，且符合名字ByName</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="comment">//若显示定义了Autowired的required属性为false，则该对象可以为null，否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><p><code>接口</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>真实角色</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东出租房子！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>代理角色</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        host.rent();</span><br><span class="line">        seeHouse();</span><br><span class="line">        sign();</span><br><span class="line">        fee();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带着看房子！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//签合同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sign</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;和中介签署租赁合同！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//收费用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fee</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介收取费用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>客户端访问代理角色</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//房东要出租房子</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理，中介帮房东出租房子，并且代理角色一般会有一些附属操作！</span></span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不用面对房东，直接找中介租房即可！</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color=red>代理模式</font>可以使真实角色的操作更纯粹，不用关注公共的业务，公共业务交给代理角色，公共业务发生扩展的时候，方便集中管理；但此时一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低</p><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><ul><li>动态代理和静态代理的角色一样</li><li>动态代理的代理类是动态生成的，不是直接写好的</li><li>动态代理分为：基于接口的动态代理、基于类的动态代理<ul><li>基于接口：JDK动态代理</li><li>基于类：cglib</li><li>java字节码实现：javassist</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们会用这个类，自动生成代理类！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRent</span><span class="params">(Rent rent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(),</span><br><span class="line">                rent.getClass().getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//动态代理的本质，就是使用反射机制实现！</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(rent, args);</span><br><span class="line">        seeHose();</span><br><span class="line">        fee();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHose</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带着看房子！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fee</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介收取费用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理角色：现在没有</span></span><br><span class="line">        <span class="type">ProxyInvocationHandler</span> <span class="variable">pih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过调用程序处理角色来处理我们要调用的接口对象！</span></span><br><span class="line">        pih.setRent(host);</span><br><span class="line">        <span class="type">Rent</span> <span class="variable">proxy</span> <span class="operator">=</span> (Rent) pih.getProxy(); <span class="comment">//这里的proxy就是动态生成的，我们并没有写</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可</li></ul><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><h4 id="SpringMVC执行原理"><a href="#SpringMVC执行原理" class="headerlink" title="SpringMVC执行原理"></a>SpringMVC执行原理</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/8aeda5056f0de84109fe41ed18963e3f.png"></p><h5 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h5><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求；假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p><p>将上述url拆分为三部分：</p><p><a href="http://localhost:8080：8080服务器域名">http://localhost:8080：8080服务器域名</a></p><p>SpringMVC：部署在服务器上的web站点</p><p>hello：控制器</p><p>故该url表示为：请求位于服务器localhost:8080上SpringMVC站点的hello控制器</p><ol><li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler</li><li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello</li><li>HandlerExecution将解析后信息传给DispatcherServlet,如解析控制器映射等</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler</li><li>Handler让具体的Controller执行</li><li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet</li><li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图</li><li>最终视图呈现给用户</li></ol><h4 id="HelloSpring示例"><a href="#HelloSpring示例" class="headerlink" title="HelloSpring示例"></a>HelloSpring示例</h4><h5 id="配置版"><a href="#配置版" class="headerlink" title="配置版"></a>配置版</h5><ol><li><p>新建一个Moudle ， springmvc-02-hello ， 添加web的支持！</p></li><li><p>确定导入了SpringMVC 的依赖！</p></li><li><p>配置web.xml ， 注册DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写SpringMVC 的配置文件！名称：<strong>springmvc-servlet.xml</strong> : [servletname]-servlet.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加处理映射器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加处理器适配器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加视图解析器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="comment">//注意：这里我们先导入Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>将自己的类交给SpringIOC容器，注册bean</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>写要跳转的jsp页面，显示ModelandView存放的数据以及正常页面</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">    &lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">            &lt;title&gt;Kuangshen&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">            $&#123;msg&#125;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置Tomcat 启动测试</p></li></ol><h5 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h5><ol><li><p><strong>新建一个Moudle，springmvc-03-hello-annotation 。添加web支持！</strong></p><p>建立包结构 com.kuang.controller</p></li><li><p>由于Maven可能存在资源过滤的问题，将配置完善</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等</p></li><li><p>配置web.xml</p><ul><li><p>注册DispatcherServlet</p></li><li><p>关联SpringMVC的配置文件</p></li><li><p>启动级别为1</p></li><li><p>映射路径为 / 【不要用/*，会404】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加Spring MVC配置文件</p><p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span>-</span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在视图解析器中把所有视图存放在/WEB-INF/目录下，保证视图安全，这个目录下的文件，客户端不能直接访问</p></li><li><p>创建Controller</p><p>编写一个Java控制类： com.kuang.controller.HelloController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,SpringMVC&quot;</span>);</span><br><span class="line">        <span class="comment">//web-inf/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建视图层</p><p>WEB-INF/ jsp目录中创建hello.jsp ，视图可直接取出并展示从Controller带回的信息；通过EL取Model中存放的值或对象；</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;SpringMVC&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置Tomcat运行</p></li></ol><h4 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h4><h5 id="通过ModelAndView"><a href="#通过ModelAndView" class="headerlink" title="通过ModelAndView"></a>通过ModelAndView</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest1</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="通过ModelMap"><a href="#通过ModelMap" class="headerlink" title="通过ModelMap"></a>通过ModelMap</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap model)</span>&#123;</span><br><span class="line">    <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">    <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="通过Model"><a href="#通过Model" class="headerlink" title="通过Model"></a>通过Model</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ct2/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span>&#123;</span><br><span class="line">    <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">    <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Model只有几个方法只适合于储存数据，简化了对于Model对象的操作和理解</span><br><span class="line">ModelMap除实现自身的方法，也继承LinkedMap的方法和特性</span><br><span class="line">ModelAndView可在储存数据的同时设置返回的逻辑视图，控制展示层的跳转</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="整合SSM"><a href="#整合SSM" class="headerlink" title="整合SSM"></a>整合SSM</h3><h4 id="数据库环境"><a href="#数据库环境" class="headerlink" title="数据库环境"></a>数据库环境</h4><p>创建一个存放书籍数据的数据库表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `ssmbuild`;</span><br><span class="line">USE `ssmbuild`;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `books`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `books` (</span><br><span class="line">    `bookID` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;书id&#x27;</span>,</span><br><span class="line">    `bookName` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;书名&#x27;</span>,</span><br><span class="line">    `bookCounts` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">    `detail` <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">    KEY `bookID` (`bookID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `books`(`bookID`,`bookName`,`bookCounts`,`detail`) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;从入门到放弃&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;从删库到跑路&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;Linux&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;从进门到进牢&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h4><ol><li><p>新建Maven项目ssmbuild，添加web的支持</p></li><li><p>导入相关pom依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Maven资源过滤设置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>搭建基本结构和配置框架</p><ul><li><p>com.kuang.pojo</p></li><li><p>com.kuang.dao</p></li><li><p>com.kuang.service</p></li><li><p>com.kuang.controller</p></li><li><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="Mybatis层编写"><a href="#Mybatis层编写" class="headerlink" title="Mybatis层编写"></a>Mybatis层编写</h4><ol><li><p>数据库配置文件<strong>database.properties</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>IDEA关联数据库</p></li><li><p>编写Mybatis的核心配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/kuang/dao/BookMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写数据库对应的实体类 com.kuang.pojo.Books</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Books</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写Dao层的 Mapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.dao;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookMapper</span> &#123;</span><br><span class="line">    <span class="comment">//增加一个Book</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books book)</span>;</span><br><span class="line">    <span class="comment">//根据id删除一个Book</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//更新Book</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span>;</span><br><span class="line">    <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">    Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">    List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.BookMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增加一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">        values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--根据id删除一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from ssmbuild.books where bookID=#&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--更新Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        update ssmbuild.books</span><br><span class="line">        set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--根据id查询,返回一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--查询全部Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        SELECT * from ssmbuild.books</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写Service层的接口和实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.service;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//BookService:底下需要去实现,调用dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//增加一个Book</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books book)</span>;</span><br><span class="line">    <span class="comment">//根据id删除一个Book</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//更新Book</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span>;</span><br><span class="line">    <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">    Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">    List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.service;</span><br><span class="line"><span class="keyword">import</span> com.kuang.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="Spring层"><a href="#Spring层" class="headerlink" title="Spring层"></a>Spring层</h4><ol><li><p>配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池</p></li><li><p>编写Spring整合Mybatis的相关的配置文件； spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">        dbcp  半自动化操作  不能自动连接</span></span><br><span class="line"><span class="comment">        c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.kuang.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>Spring整合service层</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描service下面的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.将我们所有的业务类，注入到spring，可以通过配置，或者注解实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.声明式事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4.aop事务支持--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;tx:method name=&quot;add&quot; propagation=&quot;REQUIRED&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name=&quot;delete&quot; propagation=&quot;REQUIRED&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name=&quot;update&quot; propagation=&quot;REQUIRED&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name=&quot;search*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name=&quot;get&quot; read-only=&quot;true&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置aop织入事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.kuang.dao.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Spring就是一个大杂烩，一个容器！</p></li></ol><h4 id="SpringMVC层"><a href="#SpringMVC层" class="headerlink" title="SpringMVC层"></a>SpringMVC层</h4><ol><li><p>web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span>   </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>spring-mvc.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">    https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>Spring配置整合文件，applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p><strong>配置文件，暂时结束！Controller 和 视图层编写</strong></p><ol><li><p>BookController 类编写 ， 方法一：查询全部书籍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;BookServiceImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookservice;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/allBook&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;allBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写首页 <strong>index.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">  &lt;!DOCTYPE HTML&gt;</span><br><span class="line">    &lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">            &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">            &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">                a &#123;</span><br><span class="line">                    text-decoration: none;</span><br><span class="line">                    color: black;</span><br><span class="line">                    font-size: 18px;</span><br><span class="line">                &#125;</span><br><span class="line">                h3 &#123;</span><br><span class="line">                    width: 180px;</span><br><span class="line">                    height: 38px;</span><br><span class="line">                    margin: 100px auto;</span><br><span class="line">                    text-align: center;</span><br><span class="line">                    line-height: 38px;</span><br><span class="line">                    background: deepskyblue;</span><br><span class="line">                    border-radius: 4px;</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">            &lt;h3&gt;</span><br><span class="line">                &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;</span>&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">            &lt;/h3&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>书籍列表页面 <strong>allbook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;书籍列表&lt;/title&gt;</span><br><span class="line">        &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">        &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">        &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">                    &lt;div class=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                        &lt;h1&gt;</span><br><span class="line">                            &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;</span><br><span class="line">                        &lt;/h1&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;col-md-4 column&quot;</span>&gt;</span><br><span class="line">                    &lt;a class=<span class="string">&quot;btn btn-primary&quot;</span> href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;</span>&gt;新增&lt;/a&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">                    &lt;table class=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">                        &lt;thead&gt;</span><br><span class="line">                            &lt;tr&gt;</span><br><span class="line">                                &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                                &lt;th&gt;书籍名字&lt;/th&gt;</span><br><span class="line">                                &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                                &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                                &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                            &lt;/tr&gt;</span><br><span class="line">                        &lt;/thead&gt;</span><br><span class="line">                        &lt;tbody&gt;</span><br><span class="line">                            &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;book&quot;</span> items=<span class="string">&quot;$&#123;requestScope.get(&#x27;list&#x27;)&#125;&quot;</span>&gt;</span><br><span class="line">                                &lt;tr&gt;</span><br><span class="line">                                    &lt;td&gt;$&#123;book.getBookID()&#125;&lt;/td&gt;</span><br><span class="line">                                    &lt;td&gt;$&#123;book.getBookName()&#125;&lt;/td&gt;</span><br><span class="line">                                    &lt;td&gt;$&#123;book.getBookCounts()&#125;&lt;/td&gt;</span><br><span class="line">                                    &lt;td&gt;$&#123;book.getDetail()&#125;&lt;/td&gt;</span><br><span class="line">                                    &lt;td&gt;</span><br><span class="line">                                        &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;&quot;</span>&gt;更改&lt;/a&gt; |</span><br><span class="line">                                        &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">                                    &lt;/td&gt;</span><br><span class="line">                                &lt;/tr&gt;</span><br><span class="line">                            &lt;/c:forEach&gt;</span><br><span class="line">                        &lt;/tbody&gt;</span><br><span class="line">                    &lt;/table&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>BookController 类编写 ， 方法二：添加书籍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toAddBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toAddPaper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;addBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addPaper</span><span class="params">(Books books)</span> &#123;</span><br><span class="line">    System.out.println(books);</span><br><span class="line">    bookService.addBook(books);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加书籍页面：<strong>addBook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;新增书籍&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        书籍名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        书籍数量：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        书籍详情：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>BookController 类编写 ， 方法三：修改书籍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toUpdateBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toUpdateBook</span><span class="params">(Model model, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">    <span class="type">Books</span> <span class="variable">books</span> <span class="operator">=</span> bookService.queryBookById(id);</span><br><span class="line">    System.out.println(books);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;book&quot;</span>,books );</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;updateBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateBook</span><span class="params">(Model model, Books book)</span> &#123;</span><br><span class="line">    System.out.println(book);</span><br><span class="line">    bookService.updateBook(book);</span><br><span class="line">    <span class="type">Books</span> <span class="variable">books</span> <span class="operator">=</span> bookService.queryBookById(book.getBookID());</span><br><span class="line">    model.addAttribute(<span class="string">&quot;books&quot;</span>, books);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改书籍页面 <strong>updateBook.jsp</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">small</span>&gt;</span>修改信息<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;book.getBookID()&#125;&quot;</span>/&gt;</span></span><br><span class="line">        书籍名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;book.getBookName()&#125;&quot;</span>/&gt;</span></span><br><span class="line">        书籍数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookCounts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;book.getBookCounts()&#125;&quot;</span>/&gt;</span></span><br><span class="line">        书籍详情：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;detail&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;book.getDetail() &#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>BookController 类编写 ， 方法四：删除书籍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/del/&#123;bookId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteBook</span><span class="params">(<span class="meta">@PathVariable(&quot;bookId&quot;)</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">    bookService.deleteBookById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img src="https://s1.ax1x.com/2023/01/29/pSa4cW9.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法笔记</title>
      <link href="/2023/01/29/markdown%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/29/markdown%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>一级标题：（#+空格+对应内容）（ctrl+1）（以此类推）（使用ctrl+或ctrl-调整标题等级）</li><li>下划线：（ctrl+u）（u标签）</li><li>删除线：（~~）（Alt+shift+5）</li><li>字体加粗：（__或**）（ctrl+b）</li><li>字体倾斜：（*或_）（ctrl+i）</li><li>加粗斜体：（***）</li><li>图片插入：（直接拖入想要插入的图片）</li><li>超链接：（[描述](地址)）(ctrl+k)</li><li>代码区：（```+类型+回车）</li><li>有序序列：（1.+空格+内容+回车 或 ctrl+shift+[）</li><li>无序序列：（+、-、* + 空格 或 ctrl+shift+]）</li><li>引用：（&gt;+空格）</li><li>表情：（:+单词）</li><li>高亮：（==）</li><li>调整字体：（font标签）</li><li>插入表格：（ctrl+t）</li><li>清除样式：（ctrl+\）</li><li>缩进：（减少缩进：ctrl+[）（增加缩进：ctrl+]）</li><li>选中当前词：（ctrl+d）</li><li>选中当前行：（ctrl+l）</li><li>选中当前格式文本：（ctrl+e）</li><li>替换：（ctrl+h）</li><li>关闭：（ctrl+w）</li><li>复制为MarkDown格式：（Ctrl + shift + C）</li><li>粘贴为纯文本格式：（Ctrl + shift + V ）</li><li>显示/隐藏侧边栏：（Ctrl + shift + L）</li><li>插入代码块：（Ctrl + shift + K）</li><li>插入公式：（Ctrl + shift + M）</li><li>引用：（Ctrl + shift + Q）</li><li>正常输入对应符号需要在前面添加转义符\</li></ul>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建笔记</title>
      <link href="/2023/01/29/hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/29/hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo初步搭建"><a href="#Hexo初步搭建" class="headerlink" title="Hexo初步搭建"></a>Hexo初步搭建</h3><h4 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h4><p>hexo是基于node.js的静态博客框架，可以方便地生成静态网页托管在GitHub和Coding上，下列是<a href="https://hexo.io/zh-cn/">hexo官网</a></p><h4 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h4><ol><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>Github创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ol><h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h5><p><strong>windows：</strong>到git官网上下载，<a href="https://gitforwindows.org/">Download git</a>，下载后会有一个Git Bash的命令行工具可供使用</p><p><strong>linux：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>安装好以后可使用<code>git --version</code>查看版本</p><h5 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h5><p><strong>windows：</strong><a href="https://nodejs.org/en/download/">nodejs</a>官网下载</p><p><strong>linux：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p>安装完成后可以使用<code>node -v</code>或<code>npm -v</code>查看对应的版本，检查是否安装成功</p><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><p>首先创建一个blog文件夹，在该文件夹下使用git bash输入命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>使用<code>hexo -v</code>查看版本</p><p>初始化hexo：<code>hexo init myblogname</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd myblogname</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h6 id="hexo创建文件夹目录介绍"><a href="#hexo创建文件夹目录介绍" class="headerlink" title="hexo创建文件夹目录介绍"></a>hexo创建文件夹目录介绍</h6><ul><li>node_modules：依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：存放自己的文章</li><li>themes：主题</li><li>_config.yml：博客的配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开hexo服务后，在浏览器中输入localhost:4000可以看到本地生成的博客</p><h5 id="github创建个人仓库"><a href="#github创建个人仓库" class="headerlink" title="github创建个人仓库"></a>github创建个人仓库</h5><p>首先注册一个github账户，通过<code>New repository</code>新建仓库；创建一个和用户名相同的仓库，后面加<code>.github.io</code>便于后续部署到github page的时候识别</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d002150a2eb02a0358d1c88199e4e726.png"></p><h5 id="生成SSH添加到github"><a href="#生成SSH添加到github" class="headerlink" title="生成SSH添加到github"></a>生成SSH添加到github</h5><p>回到git bash中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>可以用以下两条检验是否输入正确</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建ssh</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>在对应的路径中找到ssh存放目录，其中<code>id_rsa</code>是私人秘钥，<code>id_rsa.pub</code>是公共秘钥，将该公钥放在github上，当链接github自己的账户时，它会根据公钥匹配私钥，从而判断是否能够通过git上传文件</p><p>在GitHub的setting中找到SSH keys的设置选项，点击<code>New SSH key</code><br>将<code>id_rsa.pub</code>里面的信息复制进去</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3194ad0a9d04d94c09485122932968f3.png"></p><p>通过<code>ssh -T git@github.com</code>查看是否成功</p><h5 id="将hexo部署到github中"><a href="#将hexo部署到github中" class="headerlink" title="将hexo部署到github中"></a>将hexo部署到github中</h5><p>在<code>_config.yml</code>的最后修改为</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="comment"># 若后续部署失败，可以尝试更改为ssh方式,将上述链接替换成下面：</span></span><br><span class="line">  <span class="comment"># git@github.com:YourgithubName/YourgithubName.github.io.git（推荐）</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装deploy-git，即部署命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中<code>hexo clean</code>表示清除之前生成的东西，可以不加</p><p><code>hexo generate</code>表示生成静态文章，可以用<code>hexo g</code>缩写</p><p><code>hexo deploy</code>部署文章，可以用<code>hexo d</code>缩写</p><p>出现下图表示部署成功，稍后可以在<code>http://yourname.github.io</code>看到博客</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a4eba29bb7c185169228b596e636422f.png"></p><h5 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h5><p>在阿里云上购买一个域名，然后在域名控制台中查看购买的域名，点<strong>解析</strong>进去，添加解析<strong>，解析线路选择默认</strong>；登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入域名</p><p>然后在博客文件source中创建一个名为CNAME文件；写上域名</p><p>最后在gitbash中输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>过一段时间输入域名就可以看到网站了；接下来可以正式开始写文章了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new newpapername</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在source/_post中打开markdown文件开始编辑，写完后输入下列指令可以看到已经更新</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Hexo基本配置"><a href="#Hexo基本配置" class="headerlink" title="Hexo基本配置"></a>Hexo基本配置</h3><p>在文件根目录下的<code>_config.yml</code>就是整个hexo框架的配置文件了。可以在里面修改大部分的配置</p><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>author</td><td>作者</td></tr><tr><td>language</td><td>网站使用的语言</td></tr><tr><td>timezone</td><td>网站时区，默认使用用户电脑的时区</td></tr></tbody></table><h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>网址</td></tr><tr><td>root</td><td>网站根目录</td></tr><tr><td>permalink</td><td>文章的永久链接格式</td></tr><tr><td>permalink_defaults</td><td>永久链接各部分的默认值</td></tr></tbody></table><p>将<code>url</code>改成自己的网站域名，permalink即生成文章时的链接格式；如新建一个文章<code>test.md</code>，此时自动生成的地址是<code>http://yoursite.com/年/月/日/test</code></p><p>以下是官方给出的示例，更多变量可以去官网上查找 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> </p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>:year/:month/:day/:title/</td><td>2013/07/14/hello-world</td></tr><tr><td>:year-:month-:day-:title.html</td><td>2013-07-14-hello-world.html</td></tr><tr><td>:category/:title</td><td>foo/bar/hello-world</td></tr></tbody></table><p><code>theme</code>即选择的主题，默认为<code>landscape</code>，需要更换主题时可以在官网上下载，把主题的文件放在<code>theme</code>文件夹下，再修改这个参数就可以了；</p><p>接下来这个<code>deploy</code>就是网站的部署的，<code>repo</code>就是仓库(<code>Repository</code>)的简写。<code>branch</code>选择仓库的哪个分支</p><h4 id="git分支进行多端工作"><a href="#git分支进行多端工作" class="headerlink" title="git分支进行多端工作"></a>git分支进行多端工作</h4><p>使用场景：部署博客和想要操作文件的工作机器不一样；利用git的分支系统进行多端工作，只需简单的配置和在github上将文件同步下来即可操作</p><h5 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h5><p><code>hexo d</code>上传部署到github的是hexo编译后的文件，是用来生成网页的，不包含源文件；即上传的是本地目录中自动生成的<code>.deploy_git</code>里的，其它文件都没有上传到github；故利用git的分支管理，将源文件上传到github的另一个分支即可</p><h5 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h5><ol><li><p>创建新分支</p></li><li><p>在该仓库的settings中选择默认分支为新分支（这样同步时无需指定分支）</p></li><li><p>在本地的任意目录下打开git bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:YourgithubName/YourgithubName.github.io.git</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将其克隆到本地，把除了.git 文件夹外的所有文件都删掉，把之前我们写的博客源文件全部复制过来，除了<code>.deploy_git</code>。复制过来的源文件应该有一个<code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，若之前克隆过theme中的主题文件，则应把主题文件中的<code>.git</code>删掉</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;add branch&quot;</span><br><span class="line">git push </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就上传完了，可以去github上看一看新分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装。</p></li></ol><h5 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h5><p>和之前的环境搭建一样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git#安装git</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;yourgithubname&quot;</span><br><span class="line">git config --global user.email &quot;yourgithubemail&quot;#设置邮箱用户名</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">#生成后填到github和coding上（有coding平台的话）</span><br><span class="line">#验证是否成功</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@git.coding.net #(有coding平台的话)#设置ssh key</span><br><span class="line"></span><br><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm#安装nodejs</span><br><span class="line"></span><br><span class="line">sudo npm install hexo-cli -g#安装hexo</span><br><span class="line"></span><br><span class="line">#此时无需初始化，直接在任意文件夹下</span><br><span class="line">git clone git@github.com:YourgithubName/YourgithubName.github.io.git</span><br><span class="line"></span><br><span class="line">#进入克隆到的文件夹</span><br><span class="line">cd xxx.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">#生成，部署</span><br><span class="line">hexo g &amp;&amp; hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="coding-page部署实现国内外分流"><a href="#coding-page部署实现国内外分流" class="headerlink" title="coding page部署实现国内外分流"></a>coding page部署实现国内外分流</h4><p>若希望博客能被百度收录且更快的访问，则可以在国内的coding page做一个托管，这样在国内访问就是coding page，国外就走github page</p><ol><li><p>申请coding账户，新建项目</p></li><li><p>添加ssh key，该步骤和github一样</p></li><li><p>修改_config.yml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    coding: git@git.coding.net:yourgithubname/yourgithubname.git,master</span><br><span class="line">    github: git@github.com:yourgithubname/yourgithubname.github.io.git,master</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>开启coding pages服务，绑定域名</p><p><img src="https://img-blog.csdnimg.cn/img_convert/10a1bbb64e8a644bafb91a2cc772e5a3.png"></p></li><li><p>阿里云添加解析，将github的解析改为境外，将coding的解析设为默认</p></li></ol><h3 id="Hexo添加功能"><a href="#Hexo添加功能" class="headerlink" title="Hexo添加功能"></a>Hexo添加功能</h3><p>包括搜索的SEO，阅读量统计，访问量统计和评论系统等功能；参考 <a href="http://visugar.com/2017/08/01/20170801HexoPlugins/">visugar.com</a></p><h4 id="SEO（Search-Engine-Optimization）优化"><a href="#SEO（Search-Engine-Optimization）优化" class="headerlink" title="SEO（Search Engine Optimization）优化"></a>SEO（Search Engine Optimization）优化</h4><ol><li><p>登录百度站长平台添加网站</p></li><li><p>提交链接</p><p>使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generation-sitemap --save</span><br><span class="line">npm install hexo-generation-baidu-sitemap --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在根目录下的_config.xml`中看看url有没有改成自己的</p><p>重新部署后，就可以在public文件夹下看到生成的sitemap.xml和baidusitemap.xml，然后就可以向百度提交你的站点地图了，建议使用自动提交，自动提交又分为三种：主动推送、自动推送、sitemap</p><ul><li>自动推送：把百度生成的自动推送代码，放在主题文件<code>/layout/common/head.ejs</code>的适当位置，然后验证一下就可以了</li><li>sitemap：把两个sitemap地址，提交上去，看到状态正常就OK了</li><li>隔一段时间去<code>site:&lt;域名&gt;</code>查看是否被收录</li></ul></li></ol><h4 id="添加百度统计"><a href="#添加百度统计" class="headerlink" title="添加百度统计"></a>添加百度统计</h4><p>在<a href="https://tongji.baidu.com/">百度统计</a>中，注册一下；将代码复制到<code>head.ejs</code>文件中，再进行安装检查</p><h4 id="文章阅读量统计leanCloud"><a href="#文章阅读量统计leanCloud" class="headerlink" title="文章阅读量统计leanCloud"></a>文章阅读量统计leanCloud</h4><p><a href="https://leancloud.cn/">leanCloud</a>，进去后注册一下，进入后创建一个应用：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fda4f72f190ff5910ff790b05641096c.png"></p><p>在<code>存储</code>中创建Class，命名为Counter</p><p><img src="https://img-blog.csdnimg.cn/img_convert/16843063bfd1ae6f2e743001bc06067e.png"></p><p>然后在设置页面看到应用Key`，在主题的配置文件中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: yourid</span><br><span class="line">  app_key: yourkey</span><br></pre></td></tr></table></figure><p>在<code>article.ejs</code>中适当的位置添加如下，设置文章阅读量统计显示位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">阅读数量:&lt;span id=&quot;&lt;%= url_for(post.path) %&gt;&quot; class=&quot;leancloud_visitors&quot; data-flag-title=&quot;&lt;%- post.title %&gt;&quot;&gt;&lt;/span&gt;次</span><br></pre></td></tr></table></figure><p>然后在<code>footer.ejs</code>的最后添加如下，重新部署即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn1.lncld.net/static/js/2.5.0/av-min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var APP_ID = &#x27;你的app id&#x27;;</span><br><span class="line">    var APP_KEY = &#x27;你的app key&#x27;;</span><br><span class="line">    AV.init(&#123;</span><br><span class="line">        appId: APP_ID,</span><br><span class="line">        appKey: APP_KEY</span><br><span class="line">    &#125;);</span><br><span class="line">    // 显示次数</span><br><span class="line">    function showTime(Counter) &#123;</span><br><span class="line">        var query = new AV.Query(&quot;Counter&quot;);</span><br><span class="line">        if($(&quot;.leancloud_visitors&quot;).length &gt; 0)&#123;</span><br><span class="line">            var url = $(&quot;.leancloud_visitors&quot;).attr(&#x27;id&#x27;).trim();</span><br><span class="line">            // where field</span><br><span class="line">            query.equalTo(&quot;words&quot;, url);</span><br><span class="line">            // count</span><br><span class="line">            query.count().then(function (number) &#123;</span><br><span class="line">                // There are number instances of MyClass where words equals url.</span><br><span class="line">                $(document.getElementById(url)).text(number?  number : &#x27;--&#x27;);</span><br><span class="line">            &#125;, function (error) &#123;</span><br><span class="line">                // error is an instance of AVError.</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 追加pv</span><br><span class="line">    function addCount(Counter) &#123;</span><br><span class="line">        var url = $(&quot;.leancloud_visitors&quot;).length &gt; 0 ? $(&quot;.leancloud_visitors&quot;).attr(&#x27;id&#x27;).trim() : &#x27;icafebolger.com&#x27;;</span><br><span class="line">        var Counter = AV.Object.extend(&quot;Counter&quot;);</span><br><span class="line">        var query = new Counter;</span><br><span class="line">        query.save(&#123;</span><br><span class="line">            words: url</span><br><span class="line">        &#125;).then(function (object) &#123;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        var Counter = AV.Object.extend(&quot;Counter&quot;);</span><br><span class="line">        addCount(Counter);</span><br><span class="line">        showTime(Counter);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记</title>
      <link href="/2023/01/29/Git%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/29/Git%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Git命令用法"><a href="#Git命令用法" class="headerlink" title="Git命令用法"></a>Git命令用法</h3><h4 id="git-add和git-stash"><a href="#git-add和git-stash" class="headerlink" title="git add和git stash"></a>git add和git stash</h4><h5 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h5><p>将未提交的修改（工作区和暂存区）保存至堆栈中用于后续恢复当前工作目录，故<code>stash</code>的内容可以恢复任意分支</p><h6 id="git-stash两种应用场景"><a href="#git-stash两种应用场景" class="headerlink" title="git stash两种应用场景"></a>git stash两种应用场景</h6><ul><li><p>改动同一分支</p><p>本地修改后发现远程被改动造成冲突，此时无法<code>push</code>和<code>pull</code>，但是可以使用<code>git stash</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash save &quot;本地缓存内容标识&quot;//将本地改动暂存</span><br><span class="line">git pull//拉取远端分支</span><br><span class="line">git stash pop //将栈顶改动内容重新加回本地分支，此时可以继续修改</span><br></pre></td></tr></table></figure></li><li><p>不小心改动其它分支</p><p>当正在<code>dev</code>上开发，此时项目中出现一个bug需要紧急修复，但是正在开发的内容只完成一半还不想提交，此时可以用<code>git stash</code>将修改的内容保存至堆栈区，然后切换到<code>fixbug</code>分支进行修复；</p><p>或者本该在<code>dev</code>分支开发的内容却在<code>master</code>上进行了开发，需要重新切回<code>master</code>,用<code>git stash</code>将内容存至堆栈，切回<code>dev</code>后再次恢复内容即可，如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash save &quot;本地缓存内容标识&quot;//将本地内容暂存，此时master分支恢复到上次拉取时状态</span><br><span class="line">git checkout dev//切换到需要改动的分支</span><br><span class="line">git stash pop//将改动pop到当前的分支</span><br></pre></td></tr></table></figure></li></ul><h6 id="git-stash用法"><a href="#git-stash用法" class="headerlink" title="git stash用法"></a>git stash用法</h6><ul><li><code>git stash save “save message”</code>：执行存储时，添加备注，方便查找</li><li><code>git stash list</code>：查看<code>stash</code>了哪些存储</li><li><code>git stash show</code>：显示做了哪些改动，默认show第一个存储，若要显示其它存储，后面加<code>satsh@&#123;$num&#125;</code>，比如第二个 <code>git stash show stash@&#123;1&#125;</code></li><li><code>git stash apply</code>：取出栈顶内容，不会把存储从存储列表中删除，默认第一个存储，即<code>stash@&#123;0&#125;</code>，若要使用第二个：<code>git stash apply stash@&#123;1&#125;</code></li><li><code>git stash pop</code>：取出栈顶内容并删除，默认第一个 <code>stash</code>即 <code>stash@&#123;0&#125;</code>，若要应用并删除第二个：<code>git stash pop stash@&#123;1&#125;</code>。</li><li><code>git stash drop stash@&#123;$num&#125;</code>：丢弃<code>stash@&#123;$num&#125;</code>存储，列表中删除</li><li><code>git stash clear</code>：删除所有缓存的<code>satsh</code></li></ul><h5 id="git-add和git-stash的关系"><a href="#git-add和git-stash的关系" class="headerlink" title="git add和git stash的关系"></a>git add和git stash的关系</h5><p><code>git add</code>只是将文件加到版本控制中，<code>git stash</code>能正确存储的前提是文件必须在版本控制中才行；常规<code>git stash</code>的一个限制是会暂存所有文件，有时，只想备份某些文件的方法如下：</p><ol><li>add`不想备份的文件</li><li>调用<code>git stash --keep-index</code>只会备份没有被add的文件</li><li>调用<code>git reset</code>取消已经<code>add</code>的文件的备份，继续自己的工作</li></ol><h4 id="git-revert-和-git-reset-版本回退"><a href="#git-revert-和-git-reset-版本回退" class="headerlink" title="git revert 和 git reset 版本回退"></a>git revert 和 git reset 版本回退</h4><h5 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h5><p>创建一个新的版本，该版本内容与要回退的目标版本一致，HEAD指针指向新生成的版本，而不是目标版本</p><ul><li><code>git revert HEAD</code>撤销前一次commit</li><li><code>git revert HEAD^</code>撤销前前一次commit</li><li><code>git revert CommitVersionNum</code>撤销指定的版本</li></ul><h5 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h5><p>用于回退版本，可以指定退回某一次提交的版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure><p><strong>–mixed</strong> 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD^            # 回退所有内容到上一个版本  </span><br><span class="line">$ git reset HEAD^ hello.php  # 回退 hello.php 文件的版本到上一个版本 </span><br><span class="line">$ git  reset  052e           # 回退到指定版本</span><br></pre></td></tr></table></figure><p><strong>–soft</strong> 参数用于回退到某个版本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --soft HEAD~3   # 回退上上上一个版本 </span><br></pre></td></tr></table></figure><p><strong>–hard</strong> 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD~3  # 回退上上上一个版本  </span><br><span class="line">$ git reset –hard bae128  # 回退到某个版本回退点之前的所有信息。 </span><br><span class="line">$ git reset --hard origin/master    # 将本地的状态回退到和远程的一样 </span><br></pre></td></tr></table></figure><p>谨慎使用 <strong>–-hard</strong> 参数，它会删除回退点之前的所有信息</p><h5 id="git-revert和git-reset的区别"><a href="#git-revert和git-reset的区别" class="headerlink" title="git revert和git reset的区别"></a>git revert和git reset的区别</h5><ul><li><code>git revert</code>是用一次新的<code>commit</code>回滚之前的<code>commit</code>，<code>git reset</code>是直接删除指定的<code>commit</code>，操作后HEAD指针的指向不同</li><li>在回滚操作上看，效果差不多，但在日后继续<code>merge</code>以前的老版本时有区别，<code>git revert</code>是用一次逆向的<code>commit</code>“中和”，因此合并老<code>branch</code>时导致这部分改变不会再次出现，但<code>git reset</code>是把某些<code>commit</code>在某个<code>branch</code>上删除，和老<code>branch</code>再次<code>merge</code>时，这些被回滚的<code>commit</code>应该还会被引入</li></ul><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v#显示所有远程仓库</span><br><span class="line">git remote rm name#删除远程仓库</span><br><span class="line">git remote rename old_name new_name#修改仓库名</span><br></pre></td></tr></table></figure><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch#列举所有分支，与git branch --list同义</span><br><span class="line">git branch &lt;branch&gt;#创建一个名为branch的分支，不自动检出新创建的分支</span><br><span class="line">git branch -d &lt;branch&gt;#删除指定分支，当分支中有未合并的变更时，git会阻止这一次的删除操作</span><br><span class="line">git branch -D &lt;branch&gt;#强制删除指定分支，即便其中含有未合并的变更，该命令常见于当开发者希望永久删除某一开发过程中的所有commit</span><br><span class="line">git branch -m &lt;branch&gt;#将当前分支重命名为&lt;branch&gt;</span><br><span class="line">git branch -a#列举所有远程分支</span><br></pre></td></tr></table></figure><h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout branchname （切换到本地分支）</span><br><span class="line">git checkout -b 本地分支名 origin/远程分支名//切换远程分支（需要将远程分支与本地分支关联）</span><br><span class="line">//该命令可以将远程仓库指定的分支拉到本地，并在本地创建一个分支与指定远程仓库分支关联起来，并切换到新建的本地分支中</span><br><span class="line"></span><br><span class="line">//放弃所有工作区的修改</span><br><span class="line">git checkout .</span><br><span class="line">git checkout – filename//放弃对指定文件的修改</span><br><span class="line">git checkout -f//放弃工作区和暂存区的所有修改</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h4><ul><li><p>开发分支（dev）上的代码达到上线标准后，合并到master分支</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git pull </span><br><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"># merge --no-ff参数，表示Fast forward；可以保存之前的分支历史。能够更好地查看merge历史以及branch分支状态；保证版本提交、分支结构清晰</span><br><span class="line"></span><br><span class="line">git merge --no-ff dev</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当<code>master</code> 分支为保护分支时，执行<code>git push -u origin master</code>会提示远程服务器拒绝，此时需要在浏览器进行远程仓库<code>merge</code>操作</p></li><li><p>当master代码改动，需要更新开发分支（dev）上的代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master </span><br><span class="line">git pull </span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line"># merge --no-ff参数，表示禁用Fast forward;可以保存之前的分支历史能够更好的查看merge历史，以及branch状态;保证版本提交、分支结构清晰</span><br><span class="line"></span><br><span class="line">git merge --no-ff  master</span><br><span class="line">git push -u origin dev</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Git命令图解"><a href="#Git命令图解" class="headerlink" title="Git命令图解"></a>Git命令图解</h4><p><img src="https://img-blog.csdnimg.cn/2020010917233675.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9zaHE1Nzg1LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70"></p><h5 id="删除远程仓库文件及文件夹"><a href="#删除远程仓库文件及文件夹" class="headerlink" title="删除远程仓库文件及文件夹"></a>删除远程仓库文件及文件夹</h5><p>在<code>github</code>上只能删除仓库，无法删除文件夹或文件，只能通过命令解决</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull origin master# 将远程仓库的项目拉下来</span><br><span class="line">$ dir# 查看有哪些文件夹</span><br><span class="line">$ git rm -r --cached .idea# 删除.idea文件夹</span><br><span class="line">$ git commit -m &#x27;删除.idea&#x27;# 提交，添加操作说明</span><br><span class="line">$ git push -u origin master# 将本次更改更新到github上</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h3><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><h5 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a # 查看所有分支：本地分支白色，当前分支绿色，远程分支红色</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h5><h6 id="进入合并分支"><a href="#进入合并分支" class="headerlink" title="进入合并分支"></a>进入合并分支</h6><p><code>.git</code>同文件夹下进入<code>git bash</code>，进入要合并的分支（如develop分支合并到release，进入release目录）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout release # 切换分支</span><br><span class="line">git pull# 拉取最新的代码</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="合并分支-1"><a href="#合并分支-1" class="headerlink" title="合并分支"></a>合并分支</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge develop# develop在上一步是白色的，不建议直接合并远程分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status# 查看是否有冲突</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h6><p>在编辑器中解决冲突后<code>git add</code>提交至暂存区，之后<code>git commit</code>提交</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;说点什么&quot;（-m后面的是本次提交的信息，如果不填，直接使用git commit,系统会自动生成）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push# 已提交的变动推送至远程</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="命令集"><a href="#命令集" class="headerlink" title="命令集"></a>命令集</h5><h6 id="刷新分支"><a href="#刷新分支" class="headerlink" title="刷新分支"></a>刷新分支</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote update origin --prune</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="查看本地分支所关联的远程分支"><a href="#查看本地分支所关联的远程分支" class="headerlink" title="查看本地分支所关联的远程分支"></a>查看本地分支所关联的远程分支</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -vv</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="修改本地分支名称"><a href="#修改本地分支名称" class="headerlink" title="修改本地分支名称"></a>修改本地分支名称</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -m old_branch new_branch</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="删除远程旧分支"><a href="#删除远程旧分支" class="headerlink" title="删除远程旧分支"></a>删除远程旧分支</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin :old_branch</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="将新分支推送到远程仓库"><a href="#将新分支推送到远程仓库" class="headerlink" title="将新分支推送到远程仓库"></a>将新分支推送到远程仓库</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --set-upstream origin new_branch</span><br><span class="line">或者git push -u origin new_branch </span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="分支切换、合并"><a href="#分支切换、合并" class="headerlink" title="分支切换、合并"></a>分支切换、合并</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout --track origin/dev切换到远程dev分支</span><br><span class="line">git branch -D master develop删除本地库develop</span><br><span class="line">git checkout -b dev建立一个新的本地分支dev</span><br><span class="line">git merge origin/dev将dev与当前分支合并</span><br><span class="line">git checkout dev切换到本地dev分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="命令图"><a href="#命令图" class="headerlink" title="命令图"></a>命令图</h5><p><img src="https://img-blog.csdnimg.cn/f4d4bbb3de864cb882e9cf9faff30bca.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATm8gU2lsdmVyIEJ1bGxldA==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h4 id="提交指定文件"><a href="#提交指定文件" class="headerlink" title="提交指定文件"></a>提交指定文件</h4><ul><li><p>应用场景：本地代码未完成需要紧急修复bug，某些开发阶段代码不想提交</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status -s# 查看仓库状态</span><br><span class="line">git add 文件名# 添加需要提交的文件名</span><br><span class="line">git stash -u -k# 提交时不提交未被add的文件</span><br><span class="line">git commit -m# 提交备注信息</span><br><span class="line">git pull# 拉取合并</span><br><span class="line">git push# 推送到远程仓库</span><br><span class="line">git stash pop# 恢复之前忽略的文件</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p>当需要重命名文件时，可以使用<code>git mv [oldFileName] [new FileName]</code>，<code>Git</code>对于重命名操作分为三步进行，第一步首先重命名文件，然后再从仓库中删除原有文件，最后将新文件添加进暂存区等待提交</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mv README.md LOOKME.md</span><br><span class="line">$ git rm README.md</span><br><span class="line">$ git add LOOKME.md</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若通过软件进行批量修改文件时，也要按照该流程先删除原文件再添加新文件</p><h4 id="查看操作历史"><a href="#查看操作历史" class="headerlink" title="查看操作历史"></a>查看操作历史</h4><p>使用<code>git log</code>打印所有参与者的提交记录</p><ul><li><p><code>-p --patch</code>显示每次提交所引入的差异，也可以限制显示条目数量，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -p --patch -2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021072010075819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmh1YXFpYW5nMQ==,size_16,color_FFFFFF,t_70"></p></li><li><p><code>--stat</code>：在每次提交的下面列出所有被修改的文件、有多少文件被修改了以及被修改的文件哪些行被移除或是添加了。在每次提交的最后还有一个总结</p><p><img src="https://img-blog.csdnimg.cn/20210720100637195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmh1YXFpYW5nMQ==,size_16,color_FFFFFF,t_70"></p></li></ul><h5 id="将日志信息显示在一行上"><a href="#将日志信息显示在一行上" class="headerlink" title="将日志信息显示在一行上"></a>将日志信息显示在一行上</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="以short格式输出仓库修改信息"><a href="#以short格式输出仓库修改信息" class="headerlink" title="以short格式输出仓库修改信息"></a>以short格式输出仓库修改信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --pretty=short</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="以-full-格式输出仓库修改信息"><a href="#以-full-格式输出仓库修改信息" class="headerlink" title="以 full 格式输出仓库修改信息"></a>以 full 格式输出仓库修改信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --pretty=full</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="以-fuller-格式输出仓库修改信息"><a href="#以-fuller-格式输出仓库修改信息" class="headerlink" title="以 fuller 格式输出仓库修改信息"></a>以 fuller 格式输出仓库修改信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --pretty=fuller</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改文件与提交文件可以不是同一个人，故在查询日志时会区分修改人与提交人</p><h4 id="修改分支名称"><a href="#修改分支名称" class="headerlink" title="修改分支名称"></a>修改分支名称</h4><h5 id="修改本地分支名称-1"><a href="#修改本地分支名称-1" class="headerlink" title="修改本地分支名称"></a>修改本地分支名称</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -m oldBranchName newBranchName</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="将本地分支的远程分支删除"><a href="#将本地分支的远程分支删除" class="headerlink" title="将本地分支的远程分支删除"></a>将本地分支的远程分支删除</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin :oldBranchName</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="将改名后的本地分支推送到远程，并将本地分支与之关联"><a href="#将改名后的本地分支推送到远程，并将本地分支与之关联" class="headerlink" title="将改名后的本地分支推送到远程，并将本地分支与之关联"></a>将改名后的本地分支推送到远程，并将本地分支与之关联</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --set-upstream origin newBranchName</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="文件颜色"><a href="#文件颜色" class="headerlink" title="文件颜色"></a>文件颜色</h4><ul><li>红褐色：创建之后没有<code>add</code>，没提交，不在版本控制范围内，需要先<code>add</code>文件</li><li>绿色：<code>add</code>之后文件为绿色，没有提交</li><li>蓝色：原本有一个文件，改动之后没有提交为蓝色</li></ul><h4 id="git分支管理策略"><a href="#git分支管理策略" class="headerlink" title="git分支管理策略"></a>git分支管理策略</h4><h5 id="企业项目一般分支策略"><a href="#企业项目一般分支策略" class="headerlink" title="企业项目一般分支策略"></a>企业项目一般分支策略</h5><h6 id="主分支master"><a href="#主分支master" class="headerlink" title="主分支master"></a>主分支master</h6><p>代码库应有且仅有一个主分支。所有给用户使用的正式版本都在该主分支上发布</p><h6 id="开发分支develop"><a href="#开发分支develop" class="headerlink" title="开发分支develop"></a>开发分支develop</h6><p>主分支只用于发布重大版本。日常开发应在开发分支上生成代码最新版本</p><h6 id="功能分支feature"><a href="#功能分支feature" class="headerlink" title="功能分支feature"></a>功能分支feature</h6><p>为了开发某种特定功能，从<code>develop</code>上分出来的，开发完成后再次并入，功能分支的名字，可以采用<code>feature-*</code>的形式命名</p><h6 id="预发布分支release"><a href="#预发布分支release" class="headerlink" title="预发布分支release"></a>预发布分支release</h6><p>在合并到<code>master</code>分支前，可能需要一个预发布版本进行测试，预发布分支从<code>develop上分出来</code>，预发布结束后必须合并进<code>develop</code>和<code>master</code>分支，它的命名可以采用<code>release-*</code>的形式</p><h6 id="bug分支fixbug"><a href="#bug分支fixbug" class="headerlink" title="bug分支fixbug"></a>bug分支fixbug</h6><p>该分支用于bug修补，从<code>master</code>分支上分出来，修补结束以后，再合并进<code>Master</code>和<code>Develop</code>分支，它的命名可以采用<code>fixbug-*</code>的形式</p><h6 id="其它分支other"><a href="#其它分支other" class="headerlink" title="其它分支other"></a>其它分支other</h6><h4 id="仓库文件状态"><a href="#仓库文件状态" class="headerlink" title="仓库文件状态"></a>仓库文件状态</h4><h5 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h5><p>编写代码文件、管理资源文件的区域，细分为受版本控制和不受版本控制的文件</p><h5 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h5><p>该区域和<code>index</code>文件取得了联系，实际执行<code>git add</code>的文件都生成了对应的object对象，放在<code>.git/objects</code>目录下，状态变为<code>staged</code>，当提交到版本库时，分支会引用这些对象</p><h5 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h5><p>最终的修改提交到版本库，此时提交的文件状态变成<code>committed</code>，其实也是一种<code>unmodified</code>状态，版本库会记录每一次提交，可以追溯每次修改的内容</p><p>文件状态通常可以分为：</p><ul><li>不受版本控制的<code>untracked</code>状态</li><li>受版本控制且已修改的<code>modified</code>状态</li><li>受版本控制已修改并提交到暂存区的 <code>staged</code> 状态</li><li>从暂存区已经提交到本地仓库的 <code>committed</code> 状态</li><li>提交到本地仓库未修改或者从远程仓库克隆下来的 <code>unmodified</code> 状态</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">·Changes to be committed为暂存区已存在，需要进行提交进仓库的文件；</span><br><span class="line">·Changes not staged for commit为文件被操作尚未提交至暂存区的文件，此类文件需要使用add将其添加至缓存区再提交进仓库；</span><br><span class="line">·Untracked files为未入暂存区文件；</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status 只能查看未传送提交的次数，不能查看具体文件信息</span><br><span class="line">git cherry -v 只能查看未传送提交的描述/说明</span><br><span class="line">git log master ^origin/master 则可以查看未传送提交的详细信息</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
